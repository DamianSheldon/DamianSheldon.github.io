<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: android | Hello World]]></title>
  <link href="http://DamianSheldon.github.io/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://DamianSheldon.github.io/"/>
  <updated>2022-04-12T11:35:07+08:00</updated>
  <id>http://DamianSheldon.github.io/</id>
  <author>
    <name><![CDATA[Sheldon]]></name>
    <email><![CDATA[dongmeilianghy@sina.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[UI 设计与屏幕适配]]></title>
    <link href="http://DamianSheldon.github.io/blog/ui-design-and-screen-adaptation.html"/>
    <updated>2021-03-17T15:12:26+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/ui-design-and-screen-adaptation</id>
    <content type="html"><![CDATA[<p>目前移动设备的尺寸很多，所以前端 (iOS, Android, Web, 小程序等)开发需要适配多种尺寸屏幕。在适配时我们可能会有困惑，设计稿通常是 px 来表示尺寸，设备的分辨率也是以 px 来表示，它们之间是一样的吗？还是存在什么关系？iOS 开发者用 point 来表示视图的尺寸； Android 开发者用 dp 来表示视图尺寸； Web 开发者用 px 来表示尺寸？它们和设计稿的 px 是什么关系？设计师应该以什么基准尺寸来设计会有利于屏幕适配？应该输出几套切图？除了切图，设计师还可以做些什么来配合开发者做屏幕适配？要搞清楚这些问题，我们需要翻翻历史了。</p>

<p>Tim Chien 和 Robert Nyman 的这篇 <a href="https://hacks.mozilla.org/2013/09/css-length-explained/">CSS Length Explained</a> 帮了我的大忙，本文就是基于它而写成。</p>

<h2>英寸</h2>

<p>我们经常是用英寸为度量单位来表示手机屏幕尺寸，一英寸相当于2.54厘米或0.0254米。</p>

<h2>设备像素(device pixel)</h2>

<p>计算机屏幕显示事物的单位是像素。显示屏上的单个物理 &ldquo;光点"，能够独立于它的邻居显示出完整的颜色，被称为像素（图片元素）。我们把屏幕上的物理像素称为 "设备像素"。</p>

<h2>DPI, PPI</h2>

<p>DPI 是 dots per inch 的英文缩写，即每英寸点数； PPI 是 pixels per inch 的缩写，即每英寸像素。 它们都用来表示显示像素密度 (Display pixel density)。</p>

<p>计算机屏幕是由大量发光二极管整齐排列构成的集成电路，由于屏幕制造商工艺水平差异，每英寸集成电路上排列的二极管的数量会不一样，屏幕出厂时我们可以从厂商那里得知屏幕的 PPI。</p>

<p>于是我们可以知道:</p>

<pre><code>width or height of one device pixel = 1 / device's DPI  
</code></pre>

<p>例如 MacBook Air(2011) 的 DPI 为 125 ， 所以：</p>

<pre><code>(width or height of one device pixel) = 1/125 inch = 0.008 inch = 0.02032 cm
</code></pre>

<!--more-->


<h2>The CSS pixel (px)</h2>

<p>CSS像素的尺寸大致可以看成是人的肉眼能够舒适地看到的尺寸，不要太小，这样你就得眯着眼睛，也不要大到让你看到像素化。"看得很舒服 &ldquo; 的定义比较笼统，<a href="http://www.w3.org/TR/CSS2/syndata.html%23length-units">W3C CSS规范</a>中给我们一个推荐的参考。</p>

<blockquote><p>The reference pixel is the visual angle of one pixel on a device with a pixel density of 96 DPI and a distance from the reader of an arm’s length.</p></blockquote>

<h2>The viewing distance</h2>

<p>如前所述，观看距离因人而异，因设备而异，这就是为什么我们必须将设备按外形因素分类的原因。推荐的参考观看距离(&ldquo;一臂之长&rdquo;)和参考像素密度(&ldquo;96 DPI&rdquo;)其实是历史数据。</p>

<p>对于21世纪的日常设备，我们有不同的参考建议:</p>

<table>
<thead>
<tr>
<th> Device </th>
<th> Baseline pixel density </th>
<th> Width/height of one CSS pixel </th>
<th> Viewing distance</th>
</tr>
</thead>
<tbody>
<tr>
<td> A 20th century PC with CRT display </td>
<td> 96 DPI </td>
<td> ~0.2646 mm (1/96in) </td>
<td> 28 in (71.12cm) </td>
</tr>
<tr>
<td> Modern laptop with LCD </td>
<td> 125 DPI </td>
<td> 0.2032 mm (1/125in) </td>
<td> 21.5 in (54.61cm)</td>
</tr>
<tr>
<td> Smartphones/Tablets </td>
<td> 160 DPI </td>
<td> ~0.159mm (1/160 in) </td>
<td> 16.8in (42.672cm) </td>
</tr>
</tbody>
</table>


<p>因此，我们在 CSS 的世界里建立了一个基本的事实：一个 CSS 像素会以不同的物理尺寸显示，但它总是以正确的尺寸显示，让浏览者感到舒适。</p>

<h2>Device pixel ratio (DPPX)</h2>

<p>随着我们步入未来，现在很多智能手机在出厂时都采用了高密度的显示屏。为了保证 CSS 像素在每一个访问网络的设备(即一切有屏幕和网络连接的设备)上的尺寸一致，设备制造商不得不将多个设备像素映射到一个 CSS 像素上，以弥补它相对更大的物理尺寸。CSS 像素相对于设备像素的尺寸比就是设备像素比(DPPX)。</p>

<p>我们以 iPhone 4 为最著名的例子。它配备了一块 326 DPI 的显示屏。根据我们上面的表格，作为一款智能手机，它的典型观看距离是 16.8 英寸，它的基准像素密度是 160DPI。为了创建一个 CSS 像素，苹果选择将设备像素比设置为 2，这就等于让 iOS Safari 显示网页的方式和 163 DPI 手机上一样。</p>

<p>在我们继续之前，先回头看看上面的数字。其实我们可以做得更好，不把设备像素比设置为2，而是设置为<code>326/160=2.0375</code>，让一个 CSS 像素与参考尺寸相比完全一样。不幸的是，这样的比例会导致一个意想不到的结果：由于每个 CSS 像素并不是由整个设备像素来显示的，所以浏览器不得不对所有的位图图像、边框等进行反锯齿，因为它们几乎总是被当作整个 CSS 像素来显示。浏览器很难利用2.0375个设备像素来绘制你的1个CSS像素宽的边框：如果比例是简单的2，那就容易多了。</p>

<p>顺带一提，163 DPI恰好是上一代 iPhone 的像素密度，所以网页的工作方式也是一样的，不需要开发者对自己的网站进行任何特殊的"升级"。</p>

<p>设备制造商通常选择1.5，或2，或其他整数作为 DPPX 值。偶尔，有些设备决定不这么玩了，发货时使用1.325 DPPX这样的值；作为开发者，我们也许应该忽略这些设备。</p>

<p>现在我们就比较清楚 CSS pixel 和 device pixel 的关系了。接下来我们看下 iOS 的 point 和 device pixel 的关系。</p>

<h2>point</h2>

<blockquote><p>The coordinate system iOS uses to place content onscreen is based on measurements in points, which map to pixels in the display. A standard-resolution display has a <code>1:1</code> pixel density (or <code>@1x</code>), where one pixel is equal to one point. High-resolution displays have a higher pixel density, offering a scale factor of 2.0 or 3.0 (referred to as <code>@2x</code> and <code>@3x</code>). As a result, high-resolution displays demand images with more pixels.</p></blockquote>

<p>从 Apple 这段描述可知， scale factor (<code>@1x</code>, <code>@2x</code> 和 <code>@3x</code>) 就是我们上面据说的设备像素比（DPPX)。point 和 css pixel 是对应的。</p>

<h2>dp</h2>

<p>那 dp 和 device pixel 又是什么关系呢？</p>

<blockquote><p>To preserve the visible size of your UI on screens with different densities, you must design your UI using density-independent pixels (dp) as your unit of measurement. One dp is a virtual pixel unit that&rsquo;s roughly equal to one pixel on a medium-density screen (160dpi; the &ldquo;baseline&rdquo; density). Android translates this value to the appropriate number of real pixels for each other density.</p></blockquote>

<p>Google 这段描述更加直接，dp 是一个虚拟的像素单位，大致相当于中密度屏幕上的一个像素(160dpi;&ldquo;基线"密度)，所以 dp 和 css pixel 也是对应的。而 xhdpi, xxhdpi 和 xxxhdpi 是表示设备像素比(DPPX)2、3 和 4。</p>

<p>现在我们还剩下设计稿的 px。我们回忆一下在前端开发时，如果我们不指定图片尺寸而直接去显示设计师的切图，这时图片是有一个固有尺寸的，在设备像素比为1的设备上，这个固有尺寸就是图片的尺寸，而在设备像素比为2上尺寸是图片的尺寸除以2，所以设计稿的 px是对应设备像素(device pixel)的，这也是为什么我们需要提供多套图片来做适配。假设我们不提供多套图片，现在我们有一个 <code>100 x 100 css pixel</code>的图片， 在设备像素比为3的设备上也会去加载 <code>100 x 100 device pixel</code> 尺寸的资源图，按上面的分析，实际它应该加载 <code>300 x 300 device pixel</code> 尺寸的资源图，那么相当于资源图上一个像素点会对应显示三个设备像素点，这样可能会出现模糊或锯齿的情况。</p>

<p>理清了各平台尺寸单位的关系以及它们与设备像素的关系后，我们来看下设备尺寸。</p>

<h2>设备尺寸</h2>

<p>我们先看下 iOS 设备尺寸分布:</p>

<table>
<thead>
<tr>
<th> 型号 </th>
<th> points </th>
<th> 物理像素 </th>
<th style="text-align:center;"> 设备像素比(DPPX) </th>
</tr>
</thead>
<tbody>
<tr>
<td> 2G,3G,3GS </td>
<td> 320 x 480 </td>
<td> 320 x 480</td>
<td style="text-align:center;"> 1 </td>
</tr>
<tr>
<td> 4,4S </td>
<td> 320 x 480 </td>
<td> 640 x 960 </td>
<td style="text-align:center;"> 2 </td>
</tr>
<tr>
<td> 5,5C,5S,SE </td>
<td> 320 x 568 </td>
<td> 640 x 1136 </td>
<td style="text-align:center;"> 2 </td>
</tr>
<tr>
<td> 6,6S,7,8,SE2</td>
<td> 375 x 667 </td>
<td> 750 x 1334 </td>
<td style="text-align:center;"> 2 </td>
</tr>
<tr>
<td> 6+,6S+,7+,8+ </td>
<td> 414 x 736 </td>
<td> 1080 x 1920 </td>
<td style="text-align:center;"> 3 </td>
</tr>
<tr>
<td> 11Pro,X,Xs </td>
<td> 375 x 812 </td>
<td> 1125 x 2436 </td>
<td style="text-align:center;"> 3 </td>
</tr>
<tr>
<td> 11, Xr </td>
<td> 414 x 896 </td>
<td> 828 x 1792 </td>
<td style="text-align:center;"> 2 </td>
</tr>
<tr>
<td> 11Pro Max,Xs Max </td>
<td> 414 x 896 </td>
<td> 1242 x 2688 </td>
<td style="text-align:center;"> 3 </td>
</tr>
</tbody>
</table>


<p>对于 iOS 来说，现在的主流设备应该是从 <code>6,6S,7,8,SE2</code> 开始，对应的设备像素是<code>750 x 1334 px</code>。</p>

<p>再来看下 android 这边， Google 有一个 <a href="https://developer.android.com/about/dashboards/index.html#Screens">Screen sizes and densities</a> 统计表，本文写作时查询的结果如下:</p>

<table>
<thead>
<tr>
<th> </th>
<th> ldpi </th>
<th> mdpi </th>
<th> tvdpi </th>
<th> hdpi </th>
<th> xhdpi </th>
<th> xxhdpi </th>
<th> Total </th>
</tr>
</thead>
<tbody>
<tr>
<td> Small </td>
<td> 0.1% </td>
<td>  </td>
<td>  </td>
<td> </td>
<td> 0.1% </td>
<td>  </td>
<td> 0.2% </td>
</tr>
<tr>
<td> Normal </td>
<td>  </td>
<td> 0.3% </td>
<td> 0.3% </td>
<td> 14.8% </td>
<td> 41.3% </td>
<td> 26.1% </td>
<td> 82.8% </td>
</tr>
<tr>
<td> Large </td>
<td>  </td>
<td> 1.7% </td>
<td> 2.2% </td>
<td> 0.8% </td>
<td> 3.2% </td>
<td> 2.0% </td>
<td> 9.9%  </td>
</tr>
<tr>
<td> Xlarge </td>
<td>  </td>
<td> 4.2% </td>
<td> 0.2% </td>
<td> 2.3% </td>
<td> 0.4% </td>
<td>  </td>
<td> 7.1% </td>
</tr>
<tr>
<td> Total </td>
<td> 0.1% </td>
<td> 6.2% </td>
<td> 2.7% </td>
<td>  17.9% </td>
<td> 45.0% </td>
<td> 28.1% </td>
<td>  </td>
</tr>
</tbody>
</table>


<p><a href="https://developer.android.google.cn/guide/topics/resources/providing-resources#ScreenSizeQualifier">Small,Normal,Large 和 Xlarge</a> 是屏幕的尺寸分类，具体含义如下:</p>

<blockquote><ul>
<li><p>small: Screens that are of similar size to a low-density QVGA screen. The minimum layout size for a small screen is approximately 320x426 dp units. Examples are QVGA low-density and VGA high density.</p></li>
<li><p>normal: Screens that are of similar size to a medium-density HVGA screen. The minimum layout size for a normal screen is approximately 320x470 dp units. Examples of such screens a WQVGA low-density, HVGA medium-density, WVGA high-density.</p></li>
<li><p>large: Screens that are of similar size to a medium-density VGA screen. The minimum layout size for a large screen is approximately 480x640 dp units. Examples are VGA and WVGA medium-density screens.</p></li>
<li><p>xlarge: Screens that are considerably larger than the traditional medium-density HVGA screen. The minimum layout size for an xlarge screen is approximately 720x960 dp units. In most cases, devices with extra-large screens would be too large to carry in a pocket and would most likely be tablet-style devices. Added in API level 9.</p></li>
</ul>
</blockquote>

<p>从上表的数据可知，目前 android 设备的主流尺寸分布是从 normal-hdpi 这个分类开始，根据 google 对 normal 的解释，它的大小相当于 medium-density HVGA 屏幕上的 <code>320x470 dp</code>，换算成设备像素就是 <code>480x705 px</code>，注意如果我们以这个尺寸去设计的话，那么得到的切图就是对应 hdpi(1.5)，要输出xhdpi(2) 的切图则要放大 1.3333 倍，这就有点不方便了，很容易得到奇数的像素尺寸，所以我们将 <code>480x705 px</code> 换算到 xhdpi(2) 的设备像素，得到 <code>640x940 px</code>。</p>

<p>我们知道宽屏比窄屏能显示更多内容，如果我们以宽屏为其准尺寸设计，那么在窄屏上就可能出现控件放不下、文字截断的情况。反过来，如果我们以窄屏为基准设计，那么在宽屏上布局时会容易处理，控件的宽度增加或者间隔增加就可以了。高度和宽度存在同样的问题，所以也应该选高度小的作为基准。设计时扣除固定元素高度之和后分配给可滚动区域，这样方便界面的元素布局能够动态响应，开发更好做屏幕适配。</p>

<p>所以选择基准尺寸和我们想支持的设备紧密相关，这需要基于多方面的因素考虑。 例如，如果我们希望支持尽可能多的设备，就越有可能获取更多用户，但开发的兼容工作量就相应增加，很多新特性就可能不适合作为应用的主要功能，而只适合作为增强功能。通常可以考虑覆盖 90% 以上，团队资金和人员比较充足的话可以考虑覆盖 95%，98% 甚至更多。</p>

<p>以覆盖 90% 以上为例，如果我们同时支持 iOS 和 android，或只支持 android 时，应该选 <code>640x940 px</code>作为基准尺寸，而如果只支持 iOS ， 我们应该选 <code>750 x 1334 px</code> 作为基准尺寸。</p>

<p>iOS 的设备像素比主要分布在2和3，而 android 这边设备像素比主要分布在 1.5(hdpi), 2(xhdpi)和 3(xxhdpi)，所以 iOS 需要输出<code>@2x</code> 和 <code>@3x</code> 两套切图； android 需要输出 hdpi, xhdpi 和 xxhdpi 三套切图。</p>

<h2>总结</h2>

<p>现在我们知道，设计基准尺寸的选择以及切图的输出是和我们想支持的设备紧密相关，写作本文时：</p>

<h3>基准尺寸</h3>

<ul>
<li>仅支持 iOS ， 应该选 <code>750 x 1334 px</code> 作为基准尺寸，对应的设备像素比是2</li>
<li>仅支持 android 时，应该选 <code>640x940 px</code> 作为基准尺寸，对应的设备像素比是2</li>
<li>支持 iOS 和 android，应该选 <code>640x940 px</code> 作为基准尺寸，对应的设备像素比是2</li>
</ul>


<h3>切图</h3>

<ul>
<li>支持 iOS 需要输出<code>@2x</code> 和 <code>@3x</code> 两套切图</li>
<li>支持 android 需要输出 hdpi, xhdpi 和 xxhdpi 三套切图</li>
</ul>


<p>基准尺寸对应的切图是 <code>@2x</code> 和 xhdpi，输出 hdpi(1.5) 则是切图缩小 0.75, <code>@3x</code> 和 xxhdpi(3) 则是切图放大 1.5 。</p>

<p>我们需要需要注意，随着设备的更新换代，我们的基准尺寸和切图会发生变化，就像以前我们可能需要为 android 提供 mdpi 的切图。</p>

<p>另外想说一下，设计师在设计之初就要把屏幕适配这事放在心上，将界面的元素看成水流一样，尽量让它们能自由流动，这样开发者就能更好地也更容易地做屏幕适配。Apple 在屏幕适配这块提出了 auto layout 的解决方案，这是一个设计师视角的解决方案，也是我们日常的生活中的视角，用界面元素的之间的约束来表达布局，推荐设计师用约束这种方式去做设计并最终输出。可以看到 google 实际上也很认可 auto layout 用约束来布局的想法，在新版本的 android 开发中默认的根布局容器就是 ConstraintLayout，它就是用约束来表达布局。最后我们再看 web 开发布局这边，css 布局的核心就是流，为支持屏幕适配，目前的主流方案是响应式布局，而这种布局的核心我认为仍然是约束。可以看到在屏幕适配这块，各平台最终的想法其实是一样的。</p>

<h1>Reference</h1>

<ul>
<li><a href="https://hacks.mozilla.org/2013/09/css-length-explained/">CSS Length Explained</a></li>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/ios/icons-and-images/image-size-and-resolution/">Image Size and Resolution</a></li>
<li><a href="https://developer.android.google.cn/training/multiscreen/screendensities">Support different pixel densities</a></li>
<li><a href="https://developer.android.google.cn/guide/topics/resources/providing-resources#ScreenSizeQualifier">ScreenSizeQualifier</a></li>
<li><a href="https://developer.android.google.cn/training/multiscreen/screensizes">Support different screen sizes</a></li>
<li><a href="https://developer.android.com/about/dashboards/index.html#Screens">Screen sizes and densities</a></li>
<li><a href="https://www.paintcodeapp.com/news/ultimate-guide-to-iphone-resolutions">The Ultimate Guide To iPhone Resolutions</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[浅析移动端跨平台开发]]></title>
    <link href="http://DamianSheldon.github.io/blog/an-introduction-to-mobile-cross-platform-development.html"/>
    <updated>2019-04-15T17:04:39+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/an-introduction-to-mobile-cross-platform-development</id>
    <content type="html"><![CDATA[<p>最近几年随着移动端开发日益成熟以及 Web 技术的快速发展，跨平台开发技术如雨后春笋一般冒出来，这是所有从业者不能忽视的现象。这种现象导致很多公司主动或被动去研究相关的技术。我也不例外，对它的研究应该是夹杂着被动和主动。作为原生开发者，本来对日常的开发工作驾轻就熟，恐怕内心本身不会有太多意愿去迁移到新的技术，至少我一开始是这种心态；另一方面，跨平台开发在行业内日益受到关注，倒逼开发者去了解它、研究它。对于变化，我们可能本能的抗拒，但内心理性的声音告诉我们：变化是永恒的不变，我们应该拥抱变化。</p>

<p>在经过一段时间的学习和研究，自己觉得对它的认识更加清晰和深刻，于是决定将它们记下来，以便日后记忆模糊了帮助回忆，也可以验证对于它发展的看法。我这里主要谈谈自己对它的看法，技术选择，以及这种技术的基本使用流程。</p>

<p>跨平台开发不是什么新概念，我觉得这是一种很自然的想法。因为我们总是想减轻自己的工作负担，公司则会想减少成本，提高效率，于是就会想能不能一套代码跑到多个平台，两套代码合并成一套，应该可以删除掉不少重复代码，开发和维护的代码量就少了，可能也不需要那么多开发人员了，应该来说还是很有吸引力的。</p>

<p>不过我觉得问题不像看起来那么简单。上面提到了很多跨平台开发的优点，但它也有自己的缺点。而且看到很多二变为一，很容易认为是在减少，加上业界大厂分享的成功经验，更是验证这种想法。但我想强调具体情况具体分析，这里有一个很重要的点，我们所在的公司开发人员水平和大厂肯定是不一样的，所以它能取得成功，我们不一定能玩得转。所以当两套代码合并成一套，在大厂可能确实减少了开发和维护工作，但我们自己的情况可能就不一定了，因为这对开发人员的技术水平要求要高不少，这是需要考虑的一个问题。当我们在一些项目上使用跨平台技术开发时，如果能本着实事求是的态度，相信会更容易成功。有了这些认识，接下来，我们具体来看看跨平台开发技术。</p>

<p>当我们想跨平台时，我们就会寻找平台的共同之处，应该来讲目光很容易聚焦到 Web 技术上。移动端都可以使用 Web 技术，而且它在桌面端已经实现，可以说是一个不错的选择，于是就可以尝试从这里突破。本质上其实就是 Web 应用，我们要做是将设备的能力提供给 Web，Cordova 则是这方面的一个代表。</p>

<p>我认为移动端 Web 应用的主要问题还是性能，虽然现在硬件性能很强悍，但是很多 Web 应用和原生的体验还是有不小差别，所以这时就要权衡了。那能不能有个完美的解决方案呢？既然性能有问题，我们是不可以想办法优化性能，让它和原生体验一样？我认为 React Native 是顺着这种思路出现的，它使用 javascript 编码，最终设备上运行的是原生代码，即然是运行原生代码，性能自然可以做到和原生一致。虽然性能问题是解决了，但它需要用 javascript 编写多套代码，而且开发人员也要懂原生开发，或者有原生开发支持，不然遇到问题恐怕不好解决。</p>

<!--more-->


<p>除了 Cordova 和 React Native，Google 最近还推出 Flutter，由于技术栈差异很大，以及个人精力有限，暂时不打算研究。我决定在 Cordova 和 React Native 中选择。React Native 虽然性能不错，但各平台需要自己的代码，这和一份代码的初衷不符；另外它动态部署事件的能力也稍逊一筹，框架本身的发展和原生藕合很紧密。基于这些原因，我偏向选择 Cordova。</p>

<p>Cordova 让 Web 访问设备的能力比较方便，屏蔽了很多差异，但是它没有提供 UI 支持，如果我们想做出漂亮的界面，需要自己做，或者更好的办法是找一个好用的 UI 库。而且最好是搭配一个 SPA 框架，因为我们的应用通常不会只有一个界面，SPA 可以帮助我们在单个 WebView 里实现应用的功能。至此我们的脉络应该是比较清晰了，综合这些信息，我觉得 ionic 是个不错的选择。对于原生开发者，我们一开始可能对 Web 技术不是很熟悉，ionic 将相关技术整合在一起，这降低了学习的门槛。说到这里，我想起在前期，在搜索过程中，很多国产的跨平台技术映入眼帘，如 APICloud, DCloud,但我觉得技术群众基础也很重要，这样我们学的技术在其他公司能有用武之地，也容易招到合适的人才，综合考虑便没有选择这些技术。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android 开发问题汇总(四)]]></title>
    <link href="http://DamianSheldon.github.io/blog/problems-of-android-development-part-4.html"/>
    <updated>2017-05-14T16:56:19+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/problems-of-android-development-part-4</id>
    <content type="html"><![CDATA[<h3>1.怎么给 Button 加上圆角?</h3>

<p>A:Create an xml inside Drawable Folder with below code. Name it rounded_red_border.xml</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle"&gt;

// The width and color of the border   
 &lt;stroke
        android:width="4dp"
        android:color="#de3d3d" /&gt;

// The desired corner radius. reduce it to keep it less rounded
    &lt;corners android:radius="360dp" /&gt;

// Add your desired padding
    &lt;padding
        android:left="20dp"
        android:top="10dp"
        android:right="20dp"
        android:bottom="10dp"    &gt;
    &lt;/padding&gt;

&lt;/shape&gt;
</code></pre>

<p>Applying the border to a Layout or View</p>

<p>Set the above drawable as a background to your Layout or View like LinearLayout, FrameLayout, TextView, Button etc.</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
android:layout_width="match_parent"
android:layout_height="match_parent"&gt;


// Apply as the background of TextView
&lt;TextView
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:text="YOUR TEXT"
    android:textSize="20dp"
    android:textStyle="bold"
    android:background="@drawable/rounded_red_border"
    android:textColor="#000"
    android:layout_centerInParent="true"/&gt;


&lt;/RelativeLayout&gt;
</code></pre>

<!--more-->


<p>Reference:<a href="http://www.gadgetsaint.com/tips/rounded-corners-views-layouts-android/#.WRgR3FOGORt">Add Rounded Corners to Views and Layouts Android</a></p>

<h3>2.Error:All flavors must now belong to a named flavor dimension.</h3>

<p>A:在主app的build.gradle里面的</p>

<pre><code> defaultConfig {
   targetSdkVersion：***
    minSdkVersion ：***
    versionCode：***
   versionName ：***
    // 版本名后面添加一句话，意思就是flavor dimension
    // 它的维度就是该版本号，这样维度就是都是统一的了
    flavorDimensions "versionCode"
}
</code></pre>

<p>Reference:<a href="https://blog.csdn.net/SYIF88/article/details/75009663">解决Error:All flavors must now belong to a named flavor dimension.</a></p>

<h3>3.error: resource android:attr/fontVariationSettings not found.</h3>

<p>A:This is caused by an incompatibility with the android support library that changed to version 28 in the last day or so. Add follow contents to build.gradle:</p>

<pre><code>configurations.all {
    resolutionStrategy {
        force 'com.android.support:support-v4:27.1.0'
    }
}
</code></pre>

<p>Reference:<a href="https://github.com/crosswalk-project/cordova-plugin-crosswalk-webview/issues/205#issuecomment-371669478">Problem Isolated - Need Solution</a></p>

<h3>4.Application error. The connection to the server was unsuccessful</h3>

<p>A:Add the next line into the config.xml in side the tag.</p>

<pre><code>&lt;preference name="loadUrlTimeoutValue" value="700000" /&gt;
</code></pre>

<p>Reference:<a href="https://forum.ionicframework.com/t/application-error-the-connection-to-the-server-was-unsuccessful/67584/3">Application error. The connection to the server was unsuccessful</a></p>

<h3>5.How to get SQLite database from Android real device?</h3>

<p>A:Device File Explorer can archive this goal. We can open it this way:</p>

<p>View -> Tool Windows -> Device File Explorer</p>

<p>Once you have Device File Explorer window open, use your mouse to navigate to the following path:</p>

<p>data -> data -> your.package.name -> databases</p>

<p>Inside the databases folder you should see the database you want to explore, do a right click and Save As&hellip; select your desired computer destination folder.</p>

<p>Reference:<a href="https://stackoverflow.com/questions/21062187/get-sqlite-database-from-android-app">Get SQLite database from Android app</a></p>

<h3>6.AAPT: error: file failed to compile</h3>

<p>A:一个旧的工程编译报错，错误和 nine-patch 图片资源相关，详细的错误为:AAPT: error: file failed to compile，搜索了一圈没找到有效的解决办法。既然错误是和 aapt 相关，于是尝试使用 Android Studio 的命令行工具 aapt 来输出更多错误信息。</p>

<pre><code>$ /Users/meiliang/Library/Android/sdk/build-tools/28.0.3/aapt2 compile ~/Documents/AndroidProjects/LocationAware/app/src/main/res/drawable-mdpi/button_on.9.png -o /tmp/compiled/ -v
/Users/meiliang/Documents/AndroidProjects/LocationAware/app/src/main/res/drawable-mdpi/button_on.9.png: note: compiling PNG.
error: found an invalid color.
</code></pre>

<p>得到了无效的颜色的错误信息，但还是不知道如何解决。只能继续啃 Android Studio 用户指南的<a href="https://developer.android.google.cn/studio/write/draw9patch?hl=en">Create resizable bitmaps (9-Patch files)</a>, 及从中引申出来的 <a href="https://developer.android.google.cn/guide/topics/graphics/drawables#nine-patch">NinePatch drawables</a> ,看完之后对 nine-patch 有了进一步的认识，但是还是不知道如何创建，先尝试用 GIMP 来设置可以拉伸区域，失败了，于是上 Google 搜索相关视频教程，原来是拖动来设置拉伸区域而不是官方文档上面的点击，难怪点击一直没有效果，设置好拉伸区域后就能成功编译了。</p>

<h3>7.Android 工程设置 <code>svn:global-ignores, svn:ignore</code></h3>

<p>A:公司是使用 svn 来管理源代码，所以需要为 android 工程设置 svn ignore 规则。 svn 主要通过 <code>svn:global-ignores, svn:ignore</code> 来设置忽略规则。global-ignores 从名称可以看出它是全局相关的，ignore 则是和特定代码库相关的。</p>

<p>svn 的 ignore 规则是面向文件的，所以 global-ignores 可以忽略整个目录，但如果想忽略目录中部分文件则需要设置 ignore，例如可以配置 global-ignores 它可以忽略 <code>.idea</code> 目录，但如果想忽略 <code>.idea</code> 目录中部分文件则需要设置 ignore。个人觉得它不如 git ignore 方便。 下面我们参考 github 的 Android.gitignore 来为工程设置 svn global-ignores, ignore。</p>

<p>主要是使用 <code>$svn propedit svn:global-ignores .</code> 和 <code>$ svn propedit svn:ignore .idea</code>。</p>

<pre><code>$svn propedit svn:global-ignores .
# Built application files
*.apk
*.aar
*.ap_
*.aab

# Files for the ART/Dalvik VM
*.dex

# Java class files
*.dex

# Generated files
bin
gen
out
release

# Gradle files
.gradle
build

# Local configuration file (sdk path, etc)
local.properties

# Proguard folder generated by Eclipse
proguard

# Log Files
*.log

# Android Studio Navigation editor temp files
.navigation

# Android Studio captures folder
captures

# IntelliJ
*.iml

# Keystore files
# Uncomment the following lines if you do not want to check your keystore files in.
*.jks
*.keystore

# External native build folder generated in Android Studio 2.2 and later
.externalNativeBuild
.cxx

# Version control
vcs.xml

$ svn propedit svn:ignore .idea
workspace.xml
tasks.xml
gradle.xml
assetWizardSettings.xml
dictionaries
libraries
# Android Studio 3 in .gitignore file.
caches
modules.xml
# Comment next line if keeping position of elements in Navigation Editor is relevant for you
navEditor.xml
</code></pre>

<ul>
<li>Reference: <a href="http://svnbook.red-bean.com/en/1.8/svn.advanced.props.special.ignore.html">Ignoring Unversioned Items</a></li>
</ul>


<h3>8.<code>.aidl</code> 文件的目标位置</h3>

<p>A:当我们使用 AIDL 调用方法时需要包含 <code>.aidl</code> 文件，官方文档上是说 <code>Include the .aidl file in the project src/ directory.</code> 我实际测试下来发现要包含在 <code>src/main/</code> 目录下才会生效。</p>

<pre><code>$ls app/src/main/
AndroidManifest.xml        assets/                    ic_launcher-playstore.png  libs/
aidl/                      com/                       java/                      res/
</code></pre>

<h3>9.Activity did not call finish() prior to onResume() completing</h3>

<p>A:It was workaround by using Theme.Translucent instead of Theme.NoDisplay in the manifest.</p>

<p>Reference:</p>

<ul>
<li><a href="https://stackoverflow.com/questions/32169303/activity-did-not-call-finish-api-23">Activity did not call finish? (API 23)</a></li>
<li><a href="https://web.archive.org/web/20151116170752/https://code.google.com/p/android-developer-preview/issues/detail?id=2353">Activity crash with @android:style/Theme.NoDisplay</a></li>
</ul>


<h3>10.DownLoadManager failed with ERROR_UNKOWN</h3>

<p>A:First check your url, http schema is disable by default on API level 27 or higher. If this is your case, you can change to https schema or enable http via <a href="https://developer.android.google.cn/training/articles/security-config?hl=en#CleartextTrafficPermitted">network security configuration</a>.</p>

<p>Second, you can find clue in logcat, remind change it to No Filter, search with DownLoadManager, I find file permission exception from here.</p>

<h3>11.Logcat to file</h3>

<p>A:</p>

<pre><code>$adb shell
$logcat -b main,system,crash -f /mnt/sdcard/logs/logcat.log -r 32 -n 65535 &amp;
</code></pre>

<h3>12.将 ionic 的 android 工程单独提交到 svn 仓库</h3>

<p>A:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir RAWApp
</span><span class='line'>$ svn import RAWApp &lt;a href="http://url/svn/jwt_v3/ydjwv3/trunk/working/projects/client/cssj/RAWApp">http://url/svn/jwt_v3/ydjwv3/trunk/working/projects/client/cssj/RAWApp&lt;/a>
</span><span class='line'>$ rm -rf RAWApp
</span><span class='line'>$ svn checkout &lt;a href="http://url/svn/jwt_v3/ydjwv3/trunk/working/projects/client/cssj/RAWApp">http://url/svn/jwt_v3/ydjwv3/trunk/working/projects/client/cssj/RAWApp&lt;/a>
</span><span class='line'>$ rsync -avuz platforms/android/ RAWApp
</span><span class='line'>$ cd RAWApp
</span><span class='line'>$ svn add &ndash;force .
</span><span class='line'>$ svn commit</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android开发问题汇总(三)]]></title>
    <link href="http://DamianSheldon.github.io/blog/problems-of-android-development-part-3.html"/>
    <updated>2017-04-05T08:48:36+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/problems-of-android-development-part-3</id>
    <content type="html"><![CDATA[<h3>1. How to define custom attributes?</h3>

<p>A:Currently the best documentation is the source. You can take a look at it <a href="https://github.com/android/platform_frameworks_base/blob/master/core/res/res/values/attrs.xml">here(arrts.xml)</a>.</p>

<p>You can define attributes in the top <code>&lt;resources&gt;</code> element or inside of a <code>&lt;declare-styleable&gt;</code> element. If I&rsquo;m going to use an attr in more than on place I put it in the root element. Note , all attributes share the same global namespace. That means that even if you create a new attribute inside of a <code>&lt;declare-styleable&gt;</code> element it can be used outside of it and you cannot create another attribute with the same name of a different type.</p>

<p>An <code>&lt;attr&gt;</code> element has two xml attributes <code>name</code> and <code>format</code>. <code>name</code> lets you call it something and this how you end up refering to it in code, e.g., R.attr.my_attribute. The <code>format</code> attribute can have different values depending on the type of attribute you want.</p>

<ul>
<li>reference - if it references another resource id(e.g, &ldquo;@color/my_color&rdquo;, &ldquo;@layout/my_layout&rdquo;)</li>
<li>color</li>
<li>boolean</li>
<li>dimension</li>
<li>float</li>
<li>integer</li>
<li>string</li>
<li>fraction</li>
<li>enum - normally implicitly defined</li>
<li>flag - normally implicitly defined</li>
</ul>


<p>You can set the format to multiple types by using |, e.g., <code>format="reference|color"</code>.</p>

<p>enum attributes can be defined as follows:</p>

<pre><code>&lt;attr name="my_enum_attr"&gt; 
    &lt;enmu name="value1" value="1" /&gt;
    &lt;enmu name="value2" value="2" /&gt;
&lt;/attr&gt;
</code></pre>

<p>flag attributes are similar except the values need to defined so they can be bit ored together:</p>

<pre><code>&lt;attr name="my_flag_attr"&gt;
    &lt;flag name="fuzzy" value="0x01" /&gt;
    &lt;flag name="cold" value="0x02" /&gt;
&lt;/attr&gt;
</code></pre>

<!--more-->


<p>In addition to attributes there is the <code>&lt;declare-styleable&gt;</code> element. This allows you to define attributes a custom view can use. You do this by specifying an <code>&lt;attr&gt;</code> element, if it was previously defined you do not specify the format. If you wish to reuse an android attr, for example android:gravity, then you can do that in the name, as follows.</p>

<p>An example of a custom view <code>&lt;declare-styleable&gt;</code>:</p>

<pre><code>&lt;declare-styleable name="MyCustomView"&gt; 
    &lt;attr name="my_custom_attribute" /&gt;
    &lt;attr name="android:gravity" /&gt;
&lt;/declare-styleable&gt;
</code></pre>

<p>When defining you custom attributes in XML on you need to do a few things.</p>

<p>First you must declare a namespace to find your attributes. You do this on the root layout element. Normal there is only <code>xmlns:android="http//schemas.android.com/apk/res/android"</code>. You must now also add <code>xmlns:app="http://schemas.android.com/apk/res-auto"</code>.</p>

<p>Example:</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;LinearLayout
xmlns:android="http://schemas.android.com/apk/res/android"
xmlns:whatever="http://schemas.android.com/apk/res-auto"
android:orientation="vertical"
android:layout_width="fill_parent"
android:layout_height="fill_parent"&gt;

&lt;org.example.mypackage.MyCustomView
android:layout_width="fill_parent"
android:layout_height="wrap_content"
android:gravity="center"
whatever:my_custom_attribute="Hello, world!" /&gt;
&lt;/LinearLayout&gt;
</code></pre>

<p>Finally, to access that custom attribute you normally do so in the constructor of you custom view as follows:</p>

<pre><code>public MyCustomView(Context context, AttributeSet attrs, int defStyle) {
    super(context, attrs, defStyle);

    TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.MyCustomView, defStyle, 0);

    String str = a.getString(R.styleable.MyCustomView_my_custom_attribute);

    //do something with str

    a.recycle();
}
</code></pre>

<p>Reference:<a href="http://stackoverflow.com/questions/3441396/defining-custom-attrs">Defining custom attrs</a></p>

<h3>2. How to get Uri from raw file?</h3>

<p>A: <code>Uri url = Uri.parse("android.resource://" + getPackageName() + "/" + R.raw.usa_for_africa_we_are_the_world);</code></p>

<p>Reference:<a href="http://stackoverflow.com/questions/16791439/android-how-to-get-uri-from-raw-file">Android - How to get Uri from raw file?</a></p>

<h3>3. How to display all music on SD card?</h3>

<p>A: We can use loader perform this work,</p>

<pre><code>public Loader&lt;Cursor&gt; onCreateLoader(int id, Bundle args) {
    return new CursorLoader(getActivity(), MediaStore.Audio.Media.EXTERNAL_CONTENT_URI, new String[] { MediaStore.Audio.Media.DISPLAY_NAME }, null, null,
      "LOWER(" + MediaStore.Audio.Media.TITLE + ") ASC");    
}
</code></pre>

<p>Reference:<a href="http://stackoverflow.com/questions/8994625/display-all-music-on-sd-card">Display all music on SD card</a></p>

<h3>4. Call require API level 21(current min is 10):android.content.Context#getDrawable.</h3>

<p>A:<code>ContextCompat.getDrawable(getActivity(), R.drawable.name);</code></p>

<p>Reference:<a href="http://stackoverflow.com/questions/29041027/android-getresources-getdrawable-deprecated-api-22/29041466#29041466">Android getResources().getDrawable() deprecated API 22</a></p>

<h3>5. Android Studio 工程卡在 Refreshing &lsquo;Project Name&rsquo; Gradle project 或 gradle building project。</h3>

<p>A: Android Studio 更新到 2.3 后，打开之前的项目卡在 Refreshing &lsquo;Project Name&rsquo; Gradle project, 问题的原因是新版本的 Android Studio 使用的也是新版本的 Gradle,由于网络原因导致更新 Gradle 很慢，我们可以手动下载 Gradle 来解决这个问题。</p>

<ol>
<li>根据项目中 gradle-wrapper.properties 文件的配置，手动下载合适版本的 gradle;</li>
</ol>


<pre><code>distributionUrl=https\://services.gradle.org/distributions/gradle-3.3-all.zip
</code></pre>

<ol>
<li>将下载好的 gradle 移动到合适的位置;</li>
</ol>


<pre><code>// Windows
C:\Users\用户名.gradle\wrapper\dists\gradle-x.xx-all\xxxxxxxxxxxx
// MacOS
$HOME/.gradle/wrapper/dists/gradle-3.3-all/55gk2rcmfc6p2dg9u9ohc3hw9/
</code></pre>

<ol>
<li>重启 Android Studio。</li>
</ol>


<p>Reference:
<a href="http://www.jianshu.com/p/3063173deed8">Android Studio解决refreshing gradle project</a><br/>
<a href="http://zzqhost.com/?post=82">Androidstudio配置本地Gradle</a></p>

<h3>6. 怎么改变 EditText 输入框底部线条的颜色？</h3>

<p>A: 在 style.xml 中覆盖 colorControlActivated, ColorControlHighlight 和 colorControlNormal</p>

<p>```</p>



<pre><code>
Reference:[Changing EditText bottom line color with appcompat v7](https://stackoverflow.com/questions/26574328/changing-edittext-bottom-line-color-with-appcompat-v7)

###7.如何隐藏软键盘？
A:
</code></pre>

<p>// Check if no view has focus:
View view = this.getCurrentFocus();
if (view != null) {<br/>
    InputMethodManager imm = (InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
    imm.hideSoftInputFromWindow(view.getWindowToken(), 0);
}
```
Reference:<a href="https://stackoverflow.com/questions/1109022/close-hide-the-android-soft-keyboard">Close/hide the Android Soft Keyboard</a></p>

<h3>8.ListView 中的 EditText 捕获焦点异常。</h3>

<p>A:在 manifest 中配置下 Activity :</p>

<pre><code>&lt;activity android:name= ".yourActivity" android:windowSoftInputMode="adjustPan"/&gt;
</code></pre>

<p>Reference:<a href="https://stackoverflow.com/questions/2679948/focusable-edittext-inside-listview">Focusable EditText inside ListView</a></p>

<h3>9.Android Studio 如何设置使用本地 gradle?</h3>

<p>A:</p>

<ol>
<li>下载 gradle;</li>
<li>解压 gradle 到合适的目录，例如 /Users/meiliang/.gradle/local_gradle_distribution/;</li>
<li>在 Android Studio 中设置 gradle home:</li>
</ol>


<pre><code> Android Studio &gt; Preference... &gt; Build,Excution,Deployment &gt; Gradle &gt; User local gradle distribution &gt; Gradle home

 Gradle home :/Users/meiliang/.gradle/local_gradle_distribution/gradle-3.3
</code></pre>

<h3>10.Could not find method leftShift() for arguments on task of type org.gradle.api.DefaultTask</h3>

<p>A:&lt;&lt; was deprecated in 4.x and removed in 5.0.</p>

<pre><code>task createDB&lt;&lt;{
    description= "Creates the Database. Needs database name to be passed (like: -PdbName=someDBname)"
    sql = Sql.newInstance( 'jdbc:mysql:thin://localhost:3306/', mysqlUser, mysqlPassword, 'org.drizzle.jdbc.DrizzleDriver' )
    sql.execute( 'create database '+"`$dbName`" )
}

// Change to 
task createDB {
   description= "Creates the Database. Needs database name to be passed (like: -PdbName=someDBname)"
   doLast {    
    sql = Sql.newInstance( 'jdbc:mysql:thin://localhost:3306/', mysqlUser, mysqlPassword, 'org.drizzle.jdbc.DrizzleDriver' )
    sql.execute( 'create database '+"`$dbName`" )
   } 
}
</code></pre>

<p>Reference:[Could not find method leftShift() for arguments on task of type org.gradle.api.DefaultTask)[<a href="https://discuss.gradle.org/t/could-not-find-method-leftshift-for-arguments-on-task-of-type-org-gradle-api-defaulttask/30614">https://discuss.gradle.org/t/could-not-find-method-leftshift-for-arguments-on-task-of-type-org-gradle-api-defaulttask/30614</a>)</p>

<h3>11.How to unzip and view content of aar?</h3>

<p>A:</p>

<pre><code>$jar -xvf app-debug.aar
</code></pre>

<h3>12.How to update local aar module?</h3>

<p>A:</p>

<ol>
<li>Update yourLib.aar file in module, eg. copy new version aar to module dir</li>
<li>Sync Project with Gradle Files</li>
</ol>


<h3>13.Where is the merged AndroidManifest.xml?</h3>

<p>A:</p>

<pre><code>/project/module/build/intermediates/manifests/full/debug/AndroidManifest.xml
</code></pre>

<p>Reference:<a href="https://stackoverflow.com/questions/32087870/manifest-merger-it-is-possible-to-see-the-resulting-mixed-manifest">MANIFEST MERGER: It is possible to see the resulting mixed Manifest?</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android 真机抓包]]></title>
    <link href="http://DamianSheldon.github.io/blog/capturing-android-physic-device-traffic-on-tcpdump.html"/>
    <updated>2017-03-11T17:04:33+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/capturing-android-physic-device-traffic-on-tcpdump</id>
    <content type="html"><![CDATA[<p>在 Android 开发过程中，可能会遇到和服务端交互有问题的情况，这时候就得拿出证据来和服务端撕逼, 而最有力的证据自然是抓取的网络数据包；又或者是遇到很诡异的网络问题，这时候就可以借助抓包来分析和定位问题。</p>

<p>如果我们和服务端的交互没有通过 VPN, 而且也不是视频流这种网络性能要求苛刻的情况，我们可以通过 tPacketCapture 这种应用来抓包；</p>

<p>其他情况我们可以通过 root 手机，然后安装 tcpdump 来抓包。</p>

<p>下面我们详细介绍下 通过 tcpdump 抓包这种方法：</p>

<ul>
<li>Root 手机</li>
</ul>


<p>Root 手机的原理是利用系统存在的漏洞来获得 root 权限，<a href="https://forum.xda-developers.com/">XDA Developers</a> 上有不少 root 工具，很多手机都可以用它们 root。</p>

<ul>
<li>安装 tcpdump</li>
</ul>


<p>可以到网上搜索为 Android 编译好的 tcpdump 二进制包，例如<a href="http://www.strazzere.com/android/tcpdump">这里</a>就有一个。</p>

<pre><code>// Copy tcpdump to device
$ adb -d push /path/to/tcpdump /sdcard/tcpdump

// Device shell
$ adb -d shell

// Switch to root
$ su

// Copy tcpdump to /data/local/
# cat /sdcard/tcpdump /data/local/tcpdump
</code></pre>

<!--more-->


<ul>
<li>抓包</li>
</ul>


<pre><code>/# cd /data/local
/# ./tcpdump -i any -p -s 0 -w /sdcard/capture.pcap

//  Options
    # "-i any": listen on any network interface

　　# "-p": disable promiscuous mode (doesn't work anyway)

　　# "-s 0": capture the entire packet

　　# "-w": write packets to a file (rather than printing to stdout)

　　... do whatever you want to capture, then ^C to stop it ...
</code></pre>

<ul>
<li>分析</li>
</ul>


<pre><code>// Copy capture.pcap to computer
$ adb -d pull /sdcard/capture.pcap /path/to/capture.pcap

Analyze with Wireshark.
</code></pre>

<ul>
<li>Shell Commands</li>
</ul>


<p>Android 手机上的命令通常不全，我们可以通过安装 BusyBox 来提供一个相对完成 Shell 命令集方便我们的开发工作。</p>

<p>1,Download <a href="http://www.busybox.net/downloads/binaries">BusyBox</a> 的压缩包;<br/>
2,获取设备 CPU 的架构版本 <code>adb -d shell cat /proc/cpuinfo</code><br/>
3,解开压缩包，把对应 CPU 架构版本的二进制包生命名为 busybox,例如 <code>mv busybox-armv7l busybox</code>;<br/>
4,安装 busybox 到设备上，</p>

<pre><code>// Copy busybox to device
$adb -d push /path/to/busybox /sdcard/busybox

// Switch to device shell
$adb -d shell

// Install busybox
$ su

\# cat /sdcard/busybox /system/xbin/busybox

// Check install result
# busybox 

...
</code></pre>

<h2>Reference</h2>

<ul>
<li><a href="http://www.cnblogs.com/likwo/archive/2012/09/06/2673944.html">Android通过tcpdump抓包</a></li>
<li><a href="http://www.cnblogs.com/blues_/p/3582097.html">转adb Shell root 权限</a></li>
<li><a href="http://www.cnblogs.com/xiaowenji/archive/2011/03/12/1982309.html">为Android安装BusyBox —— 完整的bash shell</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
