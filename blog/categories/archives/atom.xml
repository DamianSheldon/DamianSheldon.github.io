<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: archives | Hello World]]></title>
  <link href="http://DamianSheldon.github.io/blog/categories/archives/atom.xml" rel="self"/>
  <link href="http://DamianSheldon.github.io/"/>
  <updated>2018-09-05T17:30:51+08:00</updated>
  <id>http://DamianSheldon.github.io/</id>
  <author>
    <name><![CDATA[Sheldon]]></name>
    <email><![CDATA[dongmeilianghy@sina.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Web 面试题汇总(二)]]></title>
    <link href="http://DamianSheldon.github.io/blog/web-technical-interview-part-2.html"/>
    <updated>2018-09-05T15:52:44+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/web-technical-interview-part-2</id>
    <content type="html"><![CDATA[<h3>1.介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？</h3>

<p>A:每个元素被表示为一个矩形的方框，框的内容、内边距、边界和外边距像洋葱的膜那样，一层包着一层构建起来。</p>

<p>低版本IE的盒子模型的宽度包括框的内容、内边距和边界。</p>

<h3>2.CSS选择符有哪些？哪些属性可以继承？</h3>

<p>A:</p>

<ul>
<li><em>简单选择器</em>（Simple selectors）：通过元素类型、class 或 id 匹配一个或多个元素。</li>
<li><em>属性选择器</em>（Attribute selectors）：通过 属性 / 属性值 匹配一个或多个元素。</li>
<li><em>伪类</em>（Pseudo-classes）：匹配处于确定状态的一个或多个元素，比如被鼠标指针悬停的元素，或当前被选中或未选中的复选框，或元素是DOM树中一父节点的第一个子节点。</li>
<li><strong>伪元素</strong>（Pseudo-elements）:匹配处于相关的确定位置的一个或多个元素，例如每个段落的第一个字，或者某个元素之前生成的内容。 </li>
<li><em>组合器</em>（Combinators）：这里不仅仅是选择器本身，还有以有效的方式组合两个或更多的选择器用于非常特定的选择的方法。例如，你可以只选择divs的直系子节点的段落，或者直接跟在headings后面的段落。</li>
<li><em>多重选择器</em>（Multiple selectors）：这些也不是单独的选择器；这个思路是将以逗号分隔开的多个选择器放在一个CSS规则下面， 以将一组声明应用于由这些选择器选择的所有元素。</li>
</ul>


<p>哪些属性可以继承？</p>

<ul>
<li>所有元素可继承：visibility和cursor。</li>
<li>内联元素可继承：letter-spacing、word-spacing、white-space、line-height、color、font、font-family、font-size、font-style、font-variant、font-weight、text-decoration、text-transform、direction。</li>
<li>终端块状元素可继承：text-indent和text-align。</li>
<li>列表元素可继承：list-style、list-style-type、list-style-position、list-style-image。</li>
<li>表格元素可继承：border-collapse。</li>
</ul>


<h3>3.CSS优先级算法如何计算？</h3>

<p>A:CSS根据规则的重要性、专用性和源代码次序来计算优先级。</p>

<p>重要性和源代码次序相对简单，专用性是用四种不同的值（或组件）来衡量的，它们可以被认为是千位，百位，十位和个位:</p>

<ol>
<li>千位：如果声明是在style 属性中该列加1分（这样的声明没有选择器，所以它们的专用性总是1000。）否则为0。</li>
<li>百位：在整个选择器中每包含一个ID选择器就在该列中加1分。</li>
<li>十位：在整个选择器中每包含一个类选择器、属性选择器、或者伪类就在该列中加1分。</li>
<li>个位：在整个选择器中每包含一个元素选择器或伪元素就在该列中加1分。</li>
</ol>


<!--more-->


<h3>4.如何居中div？</h3>

<p>A:</p>

<ul>
<li>水平居中</li>
<li>水平垂直居中</li>
</ul>


<h4>水平居中</h4>

<p>给div设置一个宽度，然后添加margin:0 auto属性。</p>

<p><figure class='code'><figcaption><span>html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>div{
</span><span class='line'>    width:200px;
</span><span class='line'>    margin:0 auto;
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<h4>水平垂直居中</h4>

<ul>
<li>容器的宽高确定</li>
</ul>


<p><figure class='code'><figcaption><span>css </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>// 确定容器的宽高 宽500 高 300 的层
</span><span class='line'>// 设置层的外边距
</span><span class='line'>
</span><span class='line'>div {
</span><span class='line'>    position: relative;     /* 相对定位或绝对定位均可 */
</span><span class='line'>    width:500px;
</span><span class='line'>    height:300px;
</span><span class='line'>    top: 50%;
</span><span class='line'>    left: 50%;
</span><span class='line'>    margin: -150px 0 0 -250px;          /* 外边距为自身宽高的一半 */
</span><span class='line'>    background-color: pink;         /* 方便看效果 */
</span><span class='line'> }
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<ul>
<li>容器的宽高未知</li>
</ul>


<p><figure class='code'><figcaption><span>css </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code> // 未知容器的宽高，利用 `transform` 属性
</span><span class='line'>
</span><span class='line'>div {
</span><span class='line'>    position: absolute;     /* 相对定位或绝对定位均可 */
</span><span class='line'>    width:500px;
</span><span class='line'>    height:300px;
</span><span class='line'>    top: 50%;
</span><span class='line'>    left: 50%;
</span><span class='line'>    transform: translate(-50%, -50%);
</span><span class='line'>    background-color: pink;         /* 方便看效果 */
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<ul>
<li>利用 flex 布局</li>
</ul>


<p><figure class='code'><figcaption><span>css </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code> // 利用 flex 布局
</span><span class='line'> // 实际使用时应考虑兼容性
</span><span class='line'>
</span><span class='line'>.container {
</span><span class='line'>    display: flex;
</span><span class='line'>    align-items: center;            /* 垂直居中 */
</span><span class='line'>    justify-content: center;        /* 水平居中 */
</span><span class='line'>
</span><span class='line'> }
</span><span class='line'>.container div {
</span><span class='line'>    width: 100px;
</span><span class='line'>    height: 100px;
</span><span class='line'>    background-color: pink;         /* 方便看效果 */
</span><span class='line'> }  
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<h3>5.display有哪些值？说明他们的作用。</h3>

<h3>6.position的值? relative和absolute定位原点是？</h3>

<h3>7.请解释一下CSS3的Flexbox（弹性盒布局模型），以及适用场景？</h3>

<h3>8.用纯CSS创建一个三角形的原理是什么？</h3>

<h3>9.一个满屏 品 字布局 如何设计?</h3>

<h3>10.css多列等高如何实现？</h3>

<h3>11.经常遇到的浏览器的兼容性有哪些？原因，解决方法是什么，常用hack的技巧 ？</h3>

<h3>12.li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？</h3>

<h3>13.为什么要初始化CSS样式。</h3>

<h3>14.absolute的containing block(容器块)计算方式跟正常流有什么不同？</h3>

<h3>15.CSS里的visibility属性有个collapse属性值是干嘛用的？在不同浏览器下以后什么区别？</h3>

<h3>16.position跟display、margin collapse、overflow、float这些特性相互叠加后会怎么样？</h3>

<h3>17.对BFC规范(块级格式化上下文：block formatting context)的理解？</h3>

<h3>18.css定义的权重</h3>

<h3>19.请解释一下为什么需要清除浮动？清除浮动的方式</h3>

<h3>20.什么是外边距合并？</h3>

<h3>21.zoom:1的清除浮动原理?</h3>

<h3>22.移动端的布局用过媒体查询吗？</h3>

<h3>23.使用 CSS 预处理器吗？喜欢那个？</h3>

<h3>24.CSS优化、提高性能的方法有哪些？</h3>

<h3>25.浏览器是怎样解析CSS选择器的？</h3>

<h3>26.在网页中的应该使用奇数还是偶数的字体？为什么呢？</h3>

<h3>27.margin和padding分别适合什么场景使用？</h3>

<h3>28.抽离样式模块怎么写，说出思路，有无实践经验？</h3>

<h3>29.元素竖向的百分比设定是相对于容器的高度吗？</h3>

<h3>30.全屏滚动的原理是什么？用到了CSS的那些属性？</h3>

<h3>31.什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的IE？</h3>

<h3>32.视差滚动效果，如何给每页做不同的动画？（回到顶部，向下滑动要再次出现，和只出现一次分别怎么做？）</h3>

<h3>33.<code>::before</code> 和 <code>:after</code>中双冒号和单冒号 有什么区别？解释一下这2个伪元素的作用。</h3>

<h3>34.如何修改chrome记住密码后自动填充表单的黄色背景 ？</h3>

<h3>35.你对line-height是如何理解的？</h3>

<h3>36.设置元素浮动后，该元素的display值是多少？</h3>

<h3>37.怎么让Chrome支持小于12px 的文字？</h3>

<h3>38.让页面里的字体变清晰，变细用CSS怎么做？</h3>

<h3>39.font-style属性可以让它赋值为“oblique” oblique是什么意思？</h3>

<h3>40.position:fixed;在android下无效怎么处理？</h3>

<h3>41.如果需要手动写动画，你认为最小时间间隔是多久，为什么？</h3>

<h3>42.display:inline-block 什么时候会显示间隙</h3>

<h3>43.overflow: scroll时不能平滑滚动的问题怎么处理？</h3>

<h3>44.有一个高度自适应的div，里面有两个div，一个高度100px，希望另一个填满剩下的高度。</h3>

<h3>45.png、jpg、gif 这些图片格式解释一下，分别什么时候用。有没有了解过webp？</h3>

<h3>46.什么是Cookie 隔离？（或者说：请求资源的时候不要让它带cookie怎么做）</h3>

<h3>47.style标签写在body后与body前有什么区别？</h3>

<h3>48.什么是CSS 预处理器 / 后处理器？</h3>

<h3>49.rem布局的优缺点?</h3>

<h2>Reference:</h2>

<ul>
<li><a href="https://github.com/markyun/My-blog/tree/master/Front-end-Developer-Questions/Questions-and-Answers">前端开发面试题</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web 面试题汇总(一)]]></title>
    <link href="http://DamianSheldon.github.io/blog/web-technical-interview-part-1.html"/>
    <updated>2018-09-03T17:26:10+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/web-technical-interview-part-1</id>
    <content type="html"><![CDATA[<h3>1.Doctype作用？标准模式与兼容模式各有什么区别?</h3>

<p>A: 告知浏览器的解析器用什么文档标准解析这个文档。DOCTYPE不存在或格式不正确会导致文档以兼容模式呈现。</p>

<h3>2.HTML5 为什么只需要写 &lt;!DOCTYPE HTML>？</h3>

<p>A: HTML5 不基于 SGML，因此不需要对DTD进行引用，但是需要doctype来规范浏览器的行为（让浏览器按照它们应该的方式来运行；而HTML4.01基于SGML,所以需要对DTD进行引用，才能告知浏览器文档所使用的文档类型。</p>

<h3>3.行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？</h3>

<p>A:</p>

<ul>
<li>行内元素有：a b span img input select strong（强调的语气）</li>
<li>块级元素有：div ul ol li dl dt dd h1 h2 h3 h4…p</li>
<li>常见的空元素：br hr img input link meta</li>
<li>鲜为人知的空元素：area base col command embed keygen param source track wbr</li>
</ul>


<h3>4.页面导入样式时，使用link和@import有什么区别？</h3>

<p>A:</p>

<ul>
<li>link属于XHTML标签，除了加载CSS外，还能用于定义RSS, 定义rel连接属性等作用；而@import是CSS提供的，只能用于加载CSS;</li>
<li>页面被加载的时，link会同时被加载，而@import引用的CSS会等到页面被加载完再加载;</li>
<li>import是CSS2.1 提出的，只在IE5以上才能被识别，而link是XHTML标签，无兼容问题;</li>
<li>link支持使用js控制DOM去改变样式，而@import不支持;</li>
</ul>


<h3>5.介绍一下你对浏览器内核的理解？</h3>

<h3>6.简述一下你对HTML语义化的理解？</h3>

<p>A:用正确的标签做正确的事情。</p>

<ul>
<li>html语义化让页面的内容结构化，结构更清晰，便于对浏览器、搜索引擎解析;</li>
<li>即使在没有样式CSS情况下也以一种文档格式显示，并且是容易阅读的;搜索引擎的爬虫也依赖于HTML标记</li>
<li>确定上下文和各个关键字的权重，利于SEO;</li>
<li>使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解。</li>
</ul>


<h3>7.HTML5的离线储存怎么使用，工作原理能不能解释一下？</h3>

<h3>8.浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢？</h3>

<!--more-->


<h3>9.请描述一下 cookies，sessionStorage 和 localStorage 的区别？</h3>

<h3>10.iframe有那些缺点？</h3>

<p>A:</p>

<ul>
<li>iframe会阻塞主页面的Onload事件；</li>
<li>搜索引擎的检索程序无法解读这种页面，不利于SEO；</li>
<li>iframe和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载。</li>
</ul>


<p>使用iframe之前需要考虑这两个缺点。如果需要使用iframe，最好是通过javascript 动态给iframe添加src属性值，这样可以绕开以上两个问题。</p>

<h3>11.HTML5的form如何关闭自动完成功能？</h3>

<p>A: 给不想要提示的 form 或某个 input 设置为 autocomplete=off。</p>

<h3>12.如何实现浏览器内多个标签页之间的通信?</h3>

<h3>13.webSocket如何兼容低浏览器？</h3>

<h3>14.页面可见性（Page Visibility API） 可以有哪些用途？</h3>

<p>A: 通过 visibilityState 的值检测页面当前是否可见，以及打开网页的时间等;在页面被切换到其他后台进程的时候，自动暂停音乐或视频的播放；</p>

<h3>15.如何在页面上实现一个圆形的可点击区域？</h3>

<p>A:</p>

<ol>
<li>map+area或者svg</li>
<li>border-radius</li>
<li>纯js实现 需要求一个点在不在圆上简单算法、获取鼠标坐标等等</li>
</ol>


<h3>16.实现不使用 border 画出1px高的线，在不同浏览器的标准模式与怪异模式下都能保持一致的效果。</h3>

<p>A:</p>

<p><figure class='code'><figcaption><span>html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>&lt;div style="height:1px;overflow:hidden;background:red"&gt;&lt;/div&gt;
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<h3>17.网页验证码是干嘛的，是为了解决什么安全问题?</h3>

<p>A:区分用户是计算机还是人。</p>

<p>可以防止恶意破解密码、刷票、论坛灌水；有效防止黑客对某一个特定注册用户用暴力破解方式进行不断的登陆尝试。</p>

<h3>18.title与h1的区别、b与strong的区别、i与em的区别？</h3>

<p>A:</p>

<ul>
<li>title属性没有明确意义只表示是个标题，h1则表示层次明确的标题，对页面信息的抓取也有很大的影响。</li>
<li>b 元素用来强调文本，却不表示该文本更重要；strong 元素表示内容更重要。</li>
<li>i 内容展示为斜体，em表示强调的文本。</li>
</ul>


<h3>19.Label的作用是什么？是怎么用的？</h3>

<p>A:label标签来定义表单控制间的关系,当用户选择该标签时，浏览器会自动将焦点转到和标签相关的表单控件上。</p>

<p><figure class='code'><figcaption><span>html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>&lt;label for="Name"&gt;Number:&lt;/label&gt;
</span><span class='line'>&lt;input type="text" name="Name" id="Name"/&gt;
</span><span class='line'>
</span><span class='line'>&lt;label&gt;Date:&lt;input type="text" name="B"/&gt;&lt;/label&gt;
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<h2>Reference:</h2>

<ul>
<li><a href="https://github.com/markyun/My-blog/tree/master/Front-end-Developer-Questions/Questions-and-Answers">前端开发面试题</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blocks 的实现]]></title>
    <link href="http://DamianSheldon.github.io/blog/the-implementation-of-blocks.html"/>
    <updated>2018-09-01T15:42:34+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/the-implementation-of-blocks</id>
    <content type="html"><![CDATA[<p>Block 的实现是面试中高频出现的问题，背后的原因我想是希望借此考察面试者对 Block 的掌握程度，在日后的工作中能够用好它；同时能从侧面反映面试者有没有深入钻研技术，以及独立思考能力如何，可谓一举多得。</p>

<p>下面我们就来看看 ObjC 中的 Blocks 是如何实现。Clang 的 <code>-rewrite-objc</code> 选项可以将含有 Block 语法的源代码转换为 C++，说是 C++，其实也仅使用了 struct 结构，其本质是 C 语言。</p>

<p>下面我们先转换一个简单的文件试试:</p>

<pre><code class="objc">#import &lt;Foundation/Foundation.h&gt;

int main(int argc, char ** argv)
{
    @autoreleasepool {
        void (^blk)(void) = ^{
            printf("Block\n");
        };

        blk();
    }    

    return 0;
}

// 使用命令:
$ clang -fobjc-arc -ObjC -rewrite-objc -mios-version-min=6.0.0 -fobjc-runtime=ios-6.0.0 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS11.3.sdk -arch arm64 block-essense.m  -o block-essense-in-c.c

//限于篇幅，省略不相关的部分，结果如下:
struct __block_impl {
  void *isa;
  int Flags;
  int Reserved;
  void *FuncPtr;
};

struct __main_block_impl_0 {
  struct __block_impl impl;
  struct __main_block_desc_0* Desc;
  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, int flags=0) {
    impl.isa = &amp;_NSConcreteStackBlock;
    impl.Flags = flags;
    impl.FuncPtr = fp;
    Desc = desc;
  }
};
static void __main_block_func_0(struct __main_block_impl_0 *__cself) {

            printf("Block\n");
        }

static struct __main_block_desc_0 {
  size_t reserved;
  size_t Block_size;
} __main_block_desc_0_DATA = { 0, sizeof(struct __main_block_impl_0)};
int main(int argc, char ** argv)
{
    /* @autoreleasepool */ { __AtAutoreleasePool __autoreleasepool; 
        void (*blk)(void) = ((void (*)())&amp;__main_block_impl_0((void *)__main_block_func_0, &amp;__main_block_desc_0_DATA));

        ((void (*)(__block_impl *))((__block_impl *)blk)-&gt;FuncPtr)((__block_impl *)blk);
    }

    return 0;
}
</code></pre>

<!--more-->


<p>可以看到持有 block 的变量实际上就是指针，而 block 本身则是结构体，在我们的例子中对应的是 <code>__main_block_impl_0</code>,功能代码则是通过函数来实现的，block 结构体内有成员变量指向该函数，这样我们对 block 的实现渐渐清晰起来了。</p>

<p>Block 有一个重要的特性&ndash;自动捕获变量。这又是怎么实现的呢？我们同样可以使用上述的方法来得到答案。我们构造一个捕获变量的例子，然后来查看它的结果：</p>

<pre><code class="objc">#import &lt;Foundation/Foundation.h&gt;

int main(int argc, char ** argv)
{
    @autoreleasepool {

        BOOL flag = YES;
        int i = 28;
        float pi = 3.1415;
        char c = 'x';

        void (^blk)(void) = ^{
            printf("Block\n");
            printf("flag:%d\n", flag);
            printf("i:%d\n", i);
            printf("pi:%d\n", pi);
            printf("c:%d\n", c);
        };

        blk();
    }

    return 0;
}

// 转换之后相关部分
struct __main_block_impl_0 {
  struct __block_impl impl;
  struct __main_block_desc_0* Desc;
  BOOL flag;
  int i;
  float pi;
  char c;
  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, BOOL _flag, int _i, float _pi, char _c, int flags=0) : flag(_flag), i(_i), pi(_pi), c(_c) {
    impl.isa = &amp;_NSConcreteStackBlock;
    impl.Flags = flags;
    impl.FuncPtr = fp;
    Desc = desc;
  }
};
static void __main_block_func_0(struct __main_block_impl_0 *__cself) {
  BOOL flag = __cself-&gt;flag; // bound by copy
  int i = __cself-&gt;i; // bound by copy
  float pi = __cself-&gt;pi; // bound by copy
  char c = __cself-&gt;c; // bound by copy

            printf("Block\n");
            printf("flag:%d\n", flag);
            printf("i:%d\n", i);
            printf("pi:%d\n", pi);
            printf("c:%d\n", c);
        }

static struct __main_block_desc_0 {
  size_t reserved;
  size_t Block_size;
} __main_block_desc_0_DATA = { 0, sizeof(struct __main_block_impl_0)};
int main(int argc, char ** argv)
{
    /* @autoreleasepool */ { __AtAutoreleasePool __autoreleasepool; 

        BOOL flag = ((bool)1);
        int i = 28;
        float pi = 3.1415;
        char c = 'x';

        void (*blk)(void) = ((void (*)())&amp;__main_block_impl_0((void *)__main_block_func_0, &amp;__main_block_desc_0_DATA, flag, i, pi, c));

        ((void (*)(__block_impl *))((__block_impl *)blk)-&gt;FuncPtr)((__block_impl *)blk);
    }

    return 0;
}
</code></pre>

<p>可以看到自动捕获的标量数据是直接声明为 block 结构体的成员变量。</p>

<p>除了读取捕获自动变量的值，block 还支持使用 <code>__block</code> 修饰符来修改自动捕获的变量。我们同样来看个例子：</p>

<pre><code class="objc">#import &lt;Foundation/Foundation.h&gt;

int main(int argc, char ** argv)
{
    @autoreleasepool {

        __block BOOL flag = YES;
        __block int i = 28;
        __block float pi = 3.1415;
        __block char c = 'x';

        void (^blk)(void) = ^{
            printf("Block\n");

            flag = NO;
            i = 88;
            pi = 3.1415926;
            c = 'a';

            printf("flag:%d\n", flag);
            printf("i:%d\n", i);
            printf("pi:%f\n", pi);
            printf("c:%d\n", c);
        };

        blk();
    }

    return 0;
}

// 转换之后相关部分的结果:
struct __Block_byref_flag_0 {
  void *__isa;
__Block_byref_flag_0 *__forwarding;
 int __flags;
 int __size;
 BOOL flag;
};
struct __Block_byref_i_1 {
  void *__isa;
__Block_byref_i_1 *__forwarding;
 int __flags;
 int __size;
 int i;
};
struct __Block_byref_pi_2 {
  void *__isa;
__Block_byref_pi_2 *__forwarding;
 int __flags;
 int __size;
 float pi;
};
struct __Block_byref_c_3 {
  void *__isa;
__Block_byref_c_3 *__forwarding;
 int __flags;
 int __size;
 char c;
};

struct __main_block_impl_0 {
  struct __block_impl impl;
  struct __main_block_desc_0* Desc;
  __Block_byref_flag_0 *flag; // by ref
  __Block_byref_i_1 *i; // by ref
  __Block_byref_pi_2 *pi; // by ref
  __Block_byref_c_3 *c; // by ref
  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, __Block_byref_flag_0 *_flag, __Block_byref_i_1 *_i, __Block_byref_pi_2 *_pi, __Block_byref_c_3 *_c, int flags=0) : flag(_flag-&gt;__forwarding), i(_i-&gt;__forwarding), pi(_pi-&gt;__forwarding), c(_c-&gt;__forwarding) {
    impl.isa = &amp;_NSConcreteStackBlock;
    impl.Flags = flags;
    impl.FuncPtr = fp;
    Desc = desc;
  }
};
static void __main_block_func_0(struct __main_block_impl_0 *__cself) {
  __Block_byref_flag_0 *flag = __cself-&gt;flag; // bound by ref
  __Block_byref_i_1 *i = __cself-&gt;i; // bound by ref
  __Block_byref_pi_2 *pi = __cself-&gt;pi; // bound by ref
  __Block_byref_c_3 *c = __cself-&gt;c; // bound by ref

            printf("Block\n");

            (flag-&gt;__forwarding-&gt;flag) = ((bool)0);
            (i-&gt;__forwarding-&gt;i) = 88;
            (pi-&gt;__forwarding-&gt;pi) = 3.1415926;
            (c-&gt;__forwarding-&gt;c) = 'a';

            printf("flag:%d\n", (flag-&gt;__forwarding-&gt;flag));
            printf("i:%d\n", (i-&gt;__forwarding-&gt;i));
            printf("pi:%f\n", (pi-&gt;__forwarding-&gt;pi));
            printf("c:%d\n", (c-&gt;__forwarding-&gt;c));
        }
static void __main_block_copy_0(struct __main_block_impl_0*dst, struct __main_block_impl_0*src) {_Block_object_assign((void*)&amp;dst-&gt;flag, (void*)src-&gt;flag, 8/*BLOCK_FIELD_IS_BYREF*/);_Block_object_assign((void*)&amp;dst-&gt;i, (void*)src-&gt;i, 8/*BLOCK_FIELD_IS_BYREF*/);_Block_object_assign((void*)&amp;dst-&gt;pi, (void*)src-&gt;pi, 8/*BLOCK_FIELD_IS_BYREF*/);_Block_object_assign((void*)&amp;dst-&gt;c, (void*)src-&gt;c, 8/*BLOCK_FIELD_IS_BYREF*/);}

static void __main_block_dispose_0(struct __main_block_impl_0*src) {_Block_object_dispose((void*)src-&gt;flag, 8/*BLOCK_FIELD_IS_BYREF*/);_Block_object_dispose((void*)src-&gt;i, 8/*BLOCK_FIELD_IS_BYREF*/);_Block_object_dispose((void*)src-&gt;pi, 8/*BLOCK_FIELD_IS_BYREF*/);_Block_object_dispose((void*)src-&gt;c, 8/*BLOCK_FIELD_IS_BYREF*/);}

static struct __main_block_desc_0 {
  size_t reserved;
  size_t Block_size;
  void (*copy)(struct __main_block_impl_0*, struct __main_block_impl_0*);
  void (*dispose)(struct __main_block_impl_0*);
} __main_block_desc_0_DATA = { 0, sizeof(struct __main_block_impl_0), __main_block_copy_0, __main_block_dispose_0};
int main(int argc, char ** argv)
{
    /* @autoreleasepool */ { __AtAutoreleasePool __autoreleasepool; 

        __attribute__((__blocks__(byref))) __Block_byref_flag_0 flag = {(void*)0,(__Block_byref_flag_0 *)&amp;flag, 0, sizeof(__Block_byref_flag_0), ((bool)1)};
        __attribute__((__blocks__(byref))) __Block_byref_i_1 i = {(void*)0,(__Block_byref_i_1 *)&amp;i, 0, sizeof(__Block_byref_i_1), 28};
        __attribute__((__blocks__(byref))) __Block_byref_pi_2 pi = {(void*)0,(__Block_byref_pi_2 *)&amp;pi, 0, sizeof(__Block_byref_pi_2), 3.1415};
        __attribute__((__blocks__(byref))) __Block_byref_c_3 c = {(void*)0,(__Block_byref_c_3 *)&amp;c, 0, sizeof(__Block_byref_c_3), 'x'};

        void (*blk)(void) = ((void (*)())&amp;__main_block_impl_0((void *)__main_block_func_0, &amp;__main_block_desc_0_DATA, (__Block_byref_flag_0 *)&amp;flag, (__Block_byref_i_1 *)&amp;i, (__Block_byref_pi_2 *)&amp;pi, (__Block_byref_c_3 *)&amp;c, 570425344));

        ((void (*)(__block_impl *))((__block_impl *)blk)-&gt;FuncPtr)((__block_impl *)blk);
    }

    return 0;
}
</code></pre>

<p>可以看到使用 <code>__block</code> 修饰的变量实际上转换成了结构体变量，同样在 block 结构体中有成员变量指向它们。</p>

<p>上面我们看过了使用 block 时的几种情况，我们可以尝试来总结使用 block 的情况，然后查看各种情况转换之后的代码来进一步探索 block 的实现，进而得到比较完善的答案。</p>

<p>首先 block 可以按是否捕获变量分为两大类，其次捕获变量时根据是否支持修改又可以分为两类，最后捕获变量又可以分为程序的数据区域、栈上和堆上三种情况。综上，我们可以得到得到如下的 block 分类列表:</p>

<ul>
<li>不捕获变量(1)</li>
<li><p>捕获变量</p>

<ul>
<li><p>不修改捕获的变量</p>

<ul>
<li>存在程序数据区的变量(2)</li>
<li>存在栈上的变量(3)</li>
<li>存在堆上的变量(4)</li>
</ul>
</li>
<li><p>修改捕获的变量(<code>__block</code> 修饰的变量)</p>

<ul>
<li>存在程序数据区的变量(5)</li>
<li>存在栈上的变量(6)</li>
<li>存在堆上的变量(7)</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>这样算下来应该是存在七种情况，我们可以分别构造各种情况的例子，然后得到 block 的实现全貌。</p>

<p>全局变量和 static 变量是程序数据区变量，block 中访问全局变量和在其他地方没有什么不同，所以 block 的实现中不需要对它进行特别考虑。Static 变量在捕获时会在 block 结构体中有对应的成员变量，可以用该成员变量来读写。由于它在程序的生命周期中一直存在，所以当 block 捕获并修改它时，不需要生成对应的结构体变量，这和其他 <code>__block</code> 修饰的变量不同。</p>

<p>情况三和四比较类似，它们都会在 block 结构体中增加相应的成员变量，不同之处是捕获堆上的变量， block 的描述结构体变量中会增加 copy 和 dipose 函数，用来管理对应的内存。</p>

<p>情况六和七也类似，它们都是将变量转换为结构体，然后在 block 结构体增加成员变量指向它们。捕获堆上的变量时，block 内的成员变量指向变量，而这个变量是指向堆上分配的一块内存的，也就是一个对象，对象就是一块内存区域嘛，用代码示例如下：</p>

<pre><code class="objc">blk_t blk;

{
  __block id __strong array = [[NSMutableArray alloc] init];

  blk = [^(id obj){

      [array addObject:obj];
      NSLog(@"array count = %ld", [array count]);

  } copy];
}

// __block 修饰指向 array 的变量
struct __Block_byref_array_0 {
  void *__isa;
__Block_byref_array_0 *__forwarding;
 int __flags;
 int __size;
 void (*__Block_byref_id_object_copy)(void*, void*);
 void (*__Block_byref_id_object_dispose)(void*);
 __strong id array;
};

// 表示 block 的结构体
struct __main_block_impl_0 {
  struct __block_impl impl;
  struct __main_block_desc_0* Desc;
  __Block_byref_array_0 *array; // by ref
  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, __Block_byref_array_0 *_array, int flags=0) : array(_array-&gt;__forwarding) {
    impl.isa = &amp;_NSConcreteStackBlock;
    impl.Flags = flags;
    impl.FuncPtr = fp;
    Desc = desc;
  }
};
</code></pre>

<p>看到这里，我们有了 block 捕获变量出了作用域后还能存在原因的线索，当表示 block 的结构体从栈上拷贝到堆上，如果是只读变量，它的值赋值给 block 结构体的成员变量了；如果是 <code>__block</code> 修饰的变量，表示该变量的结构体也会一并拷贝到堆上，并由 block 持有和管理。</p>

<p>至此，我们应该对 block 的实现比较清晰了。</p>

<h2>Reference</h2>

<ul>
<li>Objective-C 高级编程</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenLDAP 学习笔记]]></title>
    <link href="http://DamianSheldon.github.io/blog/openldap-notes.html"/>
    <updated>2018-07-10T21:58:07+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/openldap-notes</id>
    <content type="html"><![CDATA[<p>最近业余时间在自学 Java，接触到 JNDI，继而牵扯出 LDAP。在倒腾过程中感觉是个复杂的主题，决定做个简要的笔记，梳理下思路，也方便日后忘记时容易拾起。</p>

<p>OpenLDAP 是 LDAP 协议的一个开源实现。LDAP 服务器本质上是一个为只读访问而优化的非关系型数据库。它主要用做地址簿查询（如 email 客户端）或对各种服务访问做后台认证以及用户数据权限管控。（例如，访问 Samba 时，LDAP 可以起到域控制器的作用；或者 Linux 系统认证 时代替 /etc/passwd 的作用。）</p>

<p>以 slap 开头的命令如: slapacl, slapadd 等是服务端工具；以 ldap 开头的命令如: ldapadd, ldapcompare 等是客户端命令工具。</p>

<h2>安装</h2>

<p>Mac 内置了 OpenLDAP 软件包，所以可以直接使用。</p>

<h2>配置</h2>

<h3>服务端</h3>

<p>服务端支持两种配置方法:动态运行时配置引擎和老式的 slapd.conf 文件。这里介绍通过老式的 slapd.conf 文件转换成动态运行时配置引擎来配置服务器的方法。</p>

<p>服务器的配置文件位于 <code>/etc/openldap/slapd.conf</code>。在 Mac 上第一次配置时该文件还不存在，但有一个 slapd.conf.default 文件，从文件名可知，这应该是一个默认配置文件，所以我们可以在它基础上来配置。</p>

<pre><code>$ sudo cp /etc/openldap/slapd.conf.default /etc/openldap/slapd.conf
</code></pre>

<p>需要编辑后缀和 rootdn。典型的后缀通常是你所用的域名，但这并非强制要求，而是依赖于你如何使用你的目录。下例中以 tenneshop 做为域名，tld 为 com，rootdn 则是 LDAP 管理员的名字（这里用 Manager）。</p>

<!--more-->


<pre><code>suffix     "dc=tenneshop,dc=com"
rootdn     "cn=Manager,dc=example,dc=com"
</code></pre>

<p>现在删除默认 root 口令并创建一个强口令：</p>

<pre><code>$slappasswd -s yourfavoritepassword

// /etc/openldap/slapd.conf
rootpw  {SSHA}Q0vdi3/5Hw+EhDrFAbvEEszq1Xf4YSyy
</code></pre>

<p>在 slapd.conf 头部添加一些 schemas:</p>

<pre><code> include     /private/etc/openldap/schema/core.schema
 include         /etc/openldap/schema/cosine.schema
 include         /etc/openldap/schema/inetorgperson.schema
 include         /etc/openldap/schema/nis.schema
 #include         /etc/openldap/schema/samba.schema
 include     /private/etc/openldap/schema/java.schema
</code></pre>

<p>可能需要在 slapd.conf 底部加入一些常用的 indexes:</p>

<pre><code>index   uid             pres,eq
index   mail            pres,sub,eq
index   cn              pres,sub,eq
index   sn              pres,sub,eq
index   dc              eq
</code></pre>

<p>现在准备数据目录，需要重命名配置文件：</p>

<pre><code>$sudo mkdir -p /private/var/db/openldap/openldap-data
$sudo cp /etc/openldap/DB_CONFIG.example /private/var/db/openldap/openldap-data/DB_CONFIG
</code></pre>

<p>将 slapd.conf 中的改动应用到 <code>/etc/openldap/slapd.d/</code>(第一次配置时可能需要创建该目录)，<em>需要先删除老配置</em>：</p>

<pre><code>$sudo rm -rf /etc/openldap/slapd.d/*
</code></pre>

<p>用下面命令生成配置文件:</p>

<pre><code>$sudo slaptest -f /etc/openldap/slapd.conf -F /etc/openldap/slapd.d/
</code></pre>

<p>每次修改 slapd.conf 后，都需要执行上面命令。检查有没有问题，可以忽略 &ldquo;bdb_monitor_db_open: monitoring disabled; configure monitor database to enable&rdquo;. 如果提示数据库不存在，可以先使用命令来检查配置文件:</p>

<pre><code>$sudo slaptest -f /etc/openldap/slapd.conf -F /etc/openldap/slapd.d/ -u 
</code></pre>

<p>确认配置文件没有语法错误之后，可以通过启动 slap 来创建数据库:</p>

<pre><code>$sudo /usr/libexec/slapd -F /etc/openldap/slapd.d
</code></pre>

<p>最终完整的配置文件如下:</p>

<pre><code>#
# See slapd.conf(5) for details on configuration options.
# This file should NOT be world readable.
#
include     /private/etc/openldap/schema/core.schema
include         /etc/openldap/schema/cosine.schema
include         /etc/openldap/schema/inetorgperson.schema
include         /etc/openldap/schema/nis.schema
#include         /etc/openldap/schema/samba.schema
include     /private/etc/openldap/schema/java.schema

# Define global ACLs to disable default read access.

# Do not enable referrals until AFTER you have a working directory
# service AND an understanding of referrals.
#referral   ldap://root.openldap.org

pidfile     /private/var/db/openldap/run/slapd.pid
argsfile    /private/var/db/openldap/run/slapd.args

# Load dynamic backend modules:
# modulepath    /usr/libexec/openldap
# moduleload    back_bdb.la
# moduleload    back_hdb.la
# moduleload    back_ldap.la

# Sample security restrictions
#   Require integrity protection (prevent hijacking)
#   Require 112-bit (3DES or better) encryption for updates
#   Require 63-bit encryption for simple bind
# security ssf=1 update_ssf=112 simple_bind=64

# Sample access control policy:
#   Root DSE: allow anyone to read it
#   Subschema (sub)entry DSE: allow anyone to read it
#   Other DSEs:
#       Allow self write access
#       Allow authenticated users read access
#       Allow anonymous users to authenticate
#   Directives needed to implement policy:
# access to dn.base="" by * read
# access to dn.base="cn=Subschema" by * read
# access to *
#   by self write
#   by users read
#   by anonymous auth
#
# if no access controls are present, the default policy
# allows anyone and everyone to read anything but restricts
# updates to rootdn.  (e.g., "access to * by * read")
#
# rootdn can always read and write EVERYTHING!

#######################################################################
# BDB database definitions
#######################################################################

database    bdb
suffix      "dc=tenneshop,dc=com"
rootdn      "cn=Manager,dc=tenneshop,dc=com"
# Cleartext passwords, especially for the rootdn, should
# be avoid.  See slappasswd(8) and slapd.conf(5) for details.
# Use of strong authentication encouraged.
#rootpw     secret
#The hash was generated from password secret using the command slappasswd -s secret
rootpw  {SSHA}Q0vdi3/5Hw+EhDrFAbvEEszq1Xf4YSyy
# The database directory MUST exist prior to running slapd AND
# should only be accessible by the slapd and slap tools.
# Mode 700 recommended.
directory   /private/var/db/openldap/openldap-data
# Indices to maintain
index   objectClass eq

# Some common indexes
index   uid             pres,eq
index   mail            pres,sub,eq
index   cn              pres,sub,eq
index   sn              pres,sub,eq
index   dc              eq
</code></pre>

<h3>客户端</h3>

<p>客户的配置文件位于 /etc/openldap/ldap.conf.</p>

<p>这个配置很简单，只需要将BASE 设置为服务器的前缀，将 URI 设置为服务器的地址:</p>

<pre><code>BASE            dc=tenneshop,dc=com
URI             ldap://localhost
</code></pre>

<p>最终完整的配置文件如下:</p>

<pre><code>#
# LDAP Defaults
#

# See ldap.conf(5) for details
# This file should be world readable but not world writable.

#BASE   dc=example,dc=com
#URI    ldap://ldap.example.com ldap://ldap-master.example.com:666
BASE    dc=tenneshop,dc=com
URI ldap://localhost

#SIZELIMIT  12
#TIMELIMIT  15
#DEREF      never
#TLS_REQCERT    demand
TLS_REQCERT allow
</code></pre>

<h3>创建初始项</h3>

<p>配置好客户端后，创建根项和 root 角色项：
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dn: dc=tenneshop,dc=com
</span><span class='line'>objectClass: dcObject
</span><span class='line'>objectClass: organization
</span><span class='line'>dc: tenneshop
</span><span class='line'>o: Tenneshop
</span><span class='line'>description: Tenneshop directory&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;dn: cn=Manager,dc=tenneshop,dc=com
</span><span class='line'>objectClass: organizationalRole
</span><span class='line'>cn: Manager
</span><span class='line'>description: Directory Manager</span></code></pre></td></tr></table></div></figure></p>

<p>将上述内容保存在文件 <code>/etc/openldap/root.ldif</code> 中，然后使用命令:</p>

<pre><code>$ldapadd -x -D 'cn=Manager,dc=tenneshop,dc=com' -W -f /etc/openldap/root.ldif
</code></pre>

<p>添加到目录服务中。</p>

<h3>测试安装好的系统</h3>

<p>运行下面命令:</p>

<pre><code>$ ldapsearch -x '(objectclass=*)'
# extended LDIF
#
# LDAPv3
# base &lt;dc=tenneshop,dc=com&gt; (default) with scope subtree
# filter: (objectclass=*)
# requesting: ALL
#

# tenneshop.com
dn: dc=tenneshop,dc=com
objectClass: dcObject
objectClass: organization
dc: tenneshop
o: Tenneshop
description: Tenneshop directory

# Manager, tenneshop.com
dn: cn=Manager,dc=tenneshop,dc=com
objectClass: organizationalRole
cn: Manager
description: Directory Manager

# search result
search: 2
result: 0 Success

# numResponses: 3
# numEntries: 2
</code></pre>

<p>或认证为 rootdn (将 -x 替换为 -D <user> -W), 用上面配置的例子的话：</p>

<pre><code>$ ldapsearch -D "cn=Manager,dc=tenneshop,dc=com" -W '(objectclass=*)'
Enter LDAP Password:
# extended LDIF
#
# LDAPv3
# base &lt;dc=tenneshop,dc=com&gt; (default) with scope subtree
# filter: (objectclass=*)
# requesting: ALL
#

# tenneshop.com
dn: dc=tenneshop,dc=com
objectClass: dcObject
objectClass: organization
dc: tenneshop
o: Tenneshop
description: Tenneshop directory

# Manager, tenneshop.com
dn: cn=Manager,dc=tenneshop,dc=com
objectClass: organizationalRole
cn: Manager
description: Directory Manager

# search result
search: 2
result: 0 Success

# numResponses: 3
# numEntries: 2
</code></pre>

<h3>遇到的问题</h3>

<h4>1.additional info: objectClass: value #0 invalid per syntax</h4>

<pre><code>$ ldapadd -x -D 'cn=Manager,dc=tenneshop,dc=com' -W -f /etc/openldap/root.ldif
Enter LDAP Password:
ldapadd: attributeDescription "dn": (possible missing newline after line 8, entry "dc=tenneshop,dc=com"?)
adding new entry "dc=tenneshop,dc=com"
ldap_add: Invalid syntax (21)
    additional info: objectClass: value #0 invalid per syntax
</code></pre>

<p>A:导入的数据每行结尾含有空格所致，去掉数据每行结尾的空格。</p>

<p>Reference:<a href="http://www.what21.com/sys/ldap_3_1483460096406.html">OpenLDAP报错: additional info: objectClass: value #0 invalid per syntax</a></p>

<h2>Reference</h2>

<ul>
<li>OpenLDAP Software 2.4 Administrator&rsquo;s Guide</li>
<li><a href="https://wiki.archlinux.org/index.php/OpenLDAP_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87">openLDAP</a>#.E5.88.9B.E5.BB.BA.E5.88.9D.E5.A7.8B.E9.A1.B9)</li>
<li><a href="https://wiki.gentoo.org/wiki/Centralized_authentication_using_OpenLDAP/zh#Configuring_the_OpenLDAP_client_tools">使用OpenLDAP实现集中式认证</a></li>
<li><a href="https://techhelplist.com/tech-tutorials/34-openldap/48-user-management-in-openldap">User Management in OpenLDAP</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web 开发问题汇总(三)]]></title>
    <link href="http://DamianSheldon.github.io/blog/web-development-notes-part-three.html"/>
    <updated>2018-04-13T11:07:25+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/web-development-notes-part-three</id>
    <content type="html"><![CDATA[<h3>1.How to send email in java?</h3>

<p>A:</p>

<pre><code class="java">import java.util.*;
import javax.mail.*;
import javax.mail.internet.*;
import javax.activation.*;

public class SendEmail {

   public static void main(String [] args) {    
      // Recipient's email ID needs to be mentioned.
      String to = "abcd@gmail.com";

      // Sender's email ID needs to be mentioned
      String from = "web@gmail.com";

      // Assuming you are sending email from localhost
      String host = "localhost";

      // Get system properties
      Properties properties = System.getProperties();

      // Setup mail server
      properties.setProperty("mail.smtp.host", host);

      // Get the default Session object.
      Session session = Session.getDefaultInstance(properties);

      try {
         // Create a default MimeMessage object.
         MimeMessage message = new MimeMessage(session);

         // Set From: header field of the header.
         message.setFrom(new InternetAddress(from));

         // Set To: header field of the header.
         message.addRecipient(Message.RecipientType.TO, new InternetAddress(to));

         // Set Subject: header field
         message.setSubject("This is the Subject Line!");

         // Now set the actual message
         message.setText("This is actual message");

         // Send message
         Transport.send(message);
         System.out.println("Sent message successfully....");
      } catch (MessagingException mex) {
         mex.printStackTrace();
      }
   }
}
</code></pre>

<p>Reference:<a href="http://www.tutorialspoint.com/java/java_sending_email.htm">Java - Sending Email</a><br/>
<a href="https://stackoverflow.com/questions/3649014/send-email-using-java">Send email using java</a></p>

<!--more-->


<h3>2.Eclipse error: &lsquo;Failed to create the Java Virtual Machine&rsquo;</h3>

<p>A:安装了 Eclipse 提示的升级后再重新打开时，出现上面的报错。Google 一圈后显示可能是 eclipse.ini 的锅，正好我安装了 cpp, java 和 jee 三个版本，尝试打开 java 版本的，正常打开，于是对比它们的 eclipse.ini 文件:</p>

<pre><code>$ cp ~/eclipse/jee-oxygen/Eclipse.app/Contents/Eclipse/eclipse.ini  ~/eclipse-workspace/jee-eclipse.ini
cp ~/eclipse/java-oxygen/Eclipse.app/Contents/Eclipse/eclipse.ini ~/eclipse-workspace/java-eclipse.ini

$ diff eclipse-workspace/jee-eclipse.ini eclipse-workspace/java-eclipse.ini
3,4d2
&lt; --launcher.library
&lt; /Users/dongmeiliang/.p2/pool/plugins/org.eclipse.equinox.launcher.cocoa.macosx.x86_64_1.1.551.v20171108-1834
6a5,6
&gt; --launcher.library
&gt; /Users/dongmeiliang/.p2/pool/plugins/org.eclipse.equinox.launcher.cocoa.macosx.x86_64_1.1.551.v20171108-1834
8c8
&lt; org.eclipse.epp.package.jee.product
---
&gt; org.eclipse.epp.package.java.product
18,23d17
&lt; -javaagent:/Users/dongmeiliang/.p2/pool/plugins/com.zeroturnaround.eclipse.optimizer.plugin_1.0.11/agent/eclipse-optimizer-agent.jar
&lt; -server
&lt; -XX:PermSize=256m
&lt; -XX:MaxPermSize=256m
&lt; -XX:+UseParallelGC
&lt; -Xverify:none
32c26
&lt; -Xms512m
---
&gt; -Xms256m
</code></pre>

<p>总共有五处不同，细看之后发现只有两处可能会产生影响，先尝试将 <code>-Xms512m</code> 改成 <code>-Xms256m</code>，问题仍然存在，将文件恢复原样，再尝试将</p>

<pre><code>&lt; -javaagent:/Users/dongmeiliang/.p2/pool/plugins/com.zeroturnaround.eclipse.optimizer.plugin_1.0.11/agent/eclipse-optimizer-agent.jar
&lt; -server
&lt; -XX:PermSize=256m
&lt; -XX:MaxPermSize=256m
&lt; -XX:+UseParallelGC
&lt; -Xverify:none
</code></pre>

<p>删除，问题顺利解决。</p>

<p>Reference:<a href="https://stackoverflow.com/questions/7302604/eclipse-error-failed-to-create-the-java-virtual-machine">Eclipse error: &lsquo;Failed to create the Java Virtual Machine&rsquo;</a></p>

<h3>3.<code>Warning: mysqli::__construct(): (HY000/2002): No such file or directory in /code/index.php on line 8 Connection failed: No such file or directory</code></h3>

<p>A:问题出现的原因：
当主机填写为localhost时MySQL会采用 unix domain socket连接，当主机填写为127.0.0.1时MySQL会采用TCP/IP的方式连接。使用Unix socket的连接比TCP/IP的连接更加快速与安全。这是MySQL连接的特性，可以参考官方文档的说明<a href="https://dev.mysql.com/doc/refman/5.6/en/connecting.html#id471316">4.2.2. Connecting to the MySQL Server</a>:</p>

<blockquote><p>On Unix, MySQL programs treat the host name localhost specially, in a way that is
likely different from what you expect compared to other network-based programs.
For connections to localhost, MySQL programs attempt to connect to the local server
by using a Unix socket file. This occurs even if a &ndash;port or -P option is given to
specify a port number. To ensure that the client makes a TCP/IP connection to the
local server, use &ndash;host or -h to specify a host name value of 127.0.0.1, or the IP
address or name of the local server. You can also specify the connection protocol
explicitly, even for localhost, by using the &ndash;protocol=TCP option.</p></blockquote>

<p>这个问题有以下几种解决方法：</p>

<ol>
<li>使用TCP/IP代替Unix socket。即在连接的时候将localhost换成127.0.0.1。</li>
<li>修改MySQL的配置文件my.cnf，指定mysql.socket的位置： /var/lib/mysql/mysql.sock (你的mysql.socket路径)。   </li>
<li>直接在php建立连接的时候指定my.socket的位置（官方文档：mysqli_connect）。比如： <code>$db = new MySQLi('localhost', 'root', 'root', 'my_db', '3306', '/var/run/mysqld/mysqld.sock')</code></li>
</ol>


<p>Reference:<a href="https://segmentfault.com/q/1010000000328531">mysqli不能使用localhost，请问这是怎么回事？</a></p>

<h3>4.超链接元素的 onclick 方法直接使用表单元素的名字调用其 submit 方法。</h3>

<p>A:</p>

<pre><code class="html">&lt;form name="bm_form" action="/delete_bms" method="POST"&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;a href="https://www.google.com"&gt;https://www.google.com&lt;/a&gt;&lt;/td&gt;
        &lt;td&gt;&lt;input type="checkbox" name="del_me" value="https://www.google.com" /&gt;&lt;/td&gt;
    &lt;/tr&gt;

    &lt;tr&gt;
        &lt;td&gt;&lt;a href="https://www.twitter.com"&gt;https://www.twitter.com&lt;/a&gt;&lt;/td&gt;
        &lt;td&gt;&lt;input type="checkbox" name="del_me" value="https://www.twitter.com" /&gt;&lt;/td&gt;
    &lt;/tr&gt;
&lt;/form&gt;

&lt;a href="#" onclick="bm_form.submit();"&gt;Delete BM&lt;/a&gt;
</code></pre>

<p>这里展示了可以直接使用表单元素的名字直接来提交的技巧。</p>

<h3>5.Ionic - Cannot find module “.”</h3>

<p>A:Just remove all imports that have /umd at the final.
In my case, I changed: 
<code>import { IonicPageModule } from 'ionic-angular/umd';</code>
To: 
<code>import { IonicPageModule } from 'ionic-angular';</code></p>

<p>Reference:<a href="https://stackoverflow.com/questions/43236971/ionic-2-runtime-error-cannot-find-module">Ionic 2 - Runtime error Cannot find module “.”</a></p>

<h3>6.Google maps report google is not define in ionic app.</h3>

<p>A:</p>

<ol>
<li>go to your project and do “ionic plugin add cordova-plugin-whitelist”</li>
<li>add CSP meta</li>
</ol>


<pre><code>&lt;meta http-equiv="Content-Security-Policy" content="script-src 'self' https://maps.googleapis.com/ https://maps.gstatic.com/ https://mts0.googleapis.com/ 'unsafe-inline' 'unsafe-eval'"&gt;
</code></pre>

<p>Live reload unfortunately seems not work, I get this error:</p>

<pre><code>Refused to load the script 'http://localhost:35729/livereload.js?snipver=1' because it violates the following Content Security Policy directive: "script-src 'self' https://maps.googleapis.com/ https://maps.gstatic.com/ https://mts0.googleapis.com/ 'unsafe-inline' 'unsafe-eval'".
</code></pre>

<p>After some google, update CSP meta works, new CSP meta as follow:</p>

<pre><code>  &lt;meta http-equiv="Content-Security-Policy" content="script-src localhost:35729 'self' https://maps.googleapis.com/ https://maps.gstatic.com/ https://mts0.googleapis.com/ 'unsafe-inline' 'unsafe-eval'"&gt;
</code></pre>

<p>Reference:<a href="https://forum.ionicframework.com/t/ionic-google-maps-referenceerror-google-is-not-defined/22550">Ionic + Google Maps: ReferenceError: google is not defined</a><br/>
<a href="https://forum.ionicframework.com/t/solution-for-livereload-problems-with-new-csp-rules/25449">Solution for livereload problems with new CSP rules</a></p>

<h3>7.Error: No provider for Navbar!</h3>

<p>A:Normally navbar don&rsquo;t provide with injector, we should access like follow:</p>

<pre><code>// Template
&lt;ion-navbar #navbar color="primary"&gt;
    &lt;ion-title&gt;Whatever&lt;/ion-title&gt;
    &lt;ion-buttons right&gt;
      &lt;button icon-only ion-button&gt;
        &lt;ion-icon name='pause'&gt;&lt;/ion-icon&gt;
      &lt;/button&gt;
    &lt;/ion-buttons&gt;
&lt;/ion-navbar&gt;
</code></pre>

<pre><code>// Typescript
export class Page {

@ViewChild('navbar') navBar: Navbar;

}
</code></pre>

<p>Reference:<a href="https://forum.ionicframework.com/t/error-in-homepage-class-homepage-caused-by-no-provider-for-navbar/82530">Error in ./HomePage class HomePage - caused by: No provider for Navbar!</a></p>

<h3>8.How to custom back button of ionic app?</h3>

<p>A:</p>

<pre><code>&lt;ion-header&gt;
  &lt;ion-navbar color='danger' hideBackButton&gt;
    &lt;ion-title&gt;product page&lt;/ion-title&gt;
        &lt;ion-buttons left&gt;
        &lt;button ion-button navPop icon-only&gt;
              &lt;ion-icon ios="ios-arrow-forward" md="md-arrow-forward"&gt;&lt;/ion-icon&gt;
        &lt;/button&gt;
    &lt;/ion-buttons&gt;
  &lt;/ion-navbar&gt;
&lt;/ion-header&gt;
</code></pre>

<p>Reference:<a href="https://forum.ionicframework.com/t/change-default-ion-navbar-back-button-ios/47342">Change default ion-navbar “back” button ios</a></p>

<h3>9.How to make a div take the remaining height?</h3>

<p>A:</p>

<ol>
<li>Absolute Positioning</li>
<li>Tables</li>
<li>CSS3 calc</li>
</ol>


<p>Absolute Positioning</p>

<p>```
// html</p>

<div id="inner_fixed">
    I have a fixed height
</div>


<p> </p>

<div id="inner_remaining">
    I take up the remaining height
</div>


<pre><code>
<figure class='code'><figcaption><span>css </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>html, body {
</span><span class='line'>        height: 100%;
</span><span class='line'>        width: 100%;
</span><span class='line'>        margin: 0;
</span><span class='line'>    }
</span><span class='line'>     
</span><span class='line'>    #inner_fixed {
</span><span class='line'>        height: 100px;
</span><span class='line'>        background-color: grey;
</span><span class='line'>    }
</span><span class='line'>     
</span><span class='line'>    #inner_remaining {
</span><span class='line'>        background-color: #DDDDDD;    
</span><span class='line'>     
</span><span class='line'>        position: absolute;
</span><span class='line'>        top: 100px;
</span><span class='line'>        bottom: 0;
</span><span class='line'>        width: 100%; 
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>

pros

* easy to implement
* intuitive

cons

* tedious to maintain (hard-coded positions)

Tables
</code></pre>

<p>// html</p>

<div id="outer">
    <div id="inner_fixed">
        I have a fixed height
    </div>
 
    <div id="inner_remaining">
        I take up the remaining height
    </div>
</div>


<pre><code>
<figure class='code'><figcaption><span>css </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>html, body, #outer {
</span><span class='line'>        height: 100%;
</span><span class='line'>        width: 100%;
</span><span class='line'>        margin: 0;
</span><span class='line'>    }
</span><span class='line'>     
</span><span class='line'>    #outer {
</span><span class='line'>        display: table;
</span><span class='line'>    }
</span><span class='line'>     
</span><span class='line'>    #inner_fixed {
</span><span class='line'>        height: 100px;
</span><span class='line'>        background-color: grey;
</span><span class='line'>     
</span><span class='line'>        display: table-row;
</span><span class='line'>    }
</span><span class='line'>     
</span><span class='line'>    #inner_remaining {
</span><span class='line'>        background-color: #DDDDDD;
</span><span class='line'>     
</span><span class='line'>        display: table-row;    
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>

pros

* rather “clean” solution
* no hard-coded values, other elements can change their height

cons

* might cause some side-effects with the layout

CSS3 calc
</code></pre>

<p>// html</p>

<div id="inner_fixed">
    I have a fixed height
</div>


<p> </p>

<div id="inner_remaining">
    I take up the remaining height
</div>


<p>```</p>

<p><figure class='code'><figcaption><span>css </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>html, body {
</span><span class='line'>    height: 100%;
</span><span class='line'>    width: 100%;
</span><span class='line'>    margin: 0;
</span><span class='line'>}
</span><span class='line'> 
</span><span class='line'>#inner_fixed {
</span><span class='line'>    height: 100px;
</span><span class='line'>    background-color: grey;
</span><span class='line'>}
</span><span class='line'> 
</span><span class='line'>#inner_remaining {
</span><span class='line'>    background-color: #DDDDDD;
</span><span class='line'> 
</span><span class='line'>    height: calc(100% - 100px);    
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<p>pros</p>

<ul>
<li>easy to implement</li>
<li>less code than the other solutions</li>
</ul>


<p>cons</p>

<ul>
<li>the calc function is rather new (no support for older browsers)</li>
<li>tedious to maintain (hard-coded height)</li>
</ul>


<p>Reference:<a href="https://www.whitebyte.info/programming/css/how-to-make-a-div-take-the-remaining-height">How to make a div take the remaining height</a></p>
]]></content>
  </entry>
  
</feed>
