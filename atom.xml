<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hello World]]></title>
  <link href="http://DamianSheldon.github.io/atom.xml" rel="self"/>
  <link href="http://DamianSheldon.github.io/"/>
  <updated>2014-11-18T14:19:16+08:00</updated>
  <id>http://DamianSheldon.github.io/</id>
  <author>
    <name><![CDATA[Sheldon]]></name>
    <email><![CDATA[dongmeilianghy@sina.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS App 数据持久化]]></title>
    <link href="http://DamianSheldon.github.io/blog/2014/11/13/ios-app-data-persistence/"/>
    <updated>2014-11-13T15:06:25+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/2014/11/13/ios-app-data-persistence</id>
    <content type="html"><![CDATA[<p>数据的持久化就是让数据能够持久的保存，实现它的方法有两种：云端和本地。本文试着简单总结本地持久化的方法。</p>

<p>本地持久化其实就是将数据保存到闪存，那么我们应该用什么方法保存，又应该保存在哪呢？</p>

<h2>文件系统基础</h2>

<p>在OS X和iOS中，文件系统处理数据文件，应用程序和操作系统本身相关文件的持久存储。
我们要知道把数据保存到哪，就要知道些iOS文件系统的知识。</p>

<p>iOS应用和文件系统的交互基本上仅限于它沙盒内目录。新应用安装过程中，安装程序为应用创建了数个容器。每个容器有个特定的角色。The bundle container holds the app’s bundle, whereas the data container holds data for both the application and the user. The data container is further divided into a number of directories that the app can use to sort and organize its data. The app may also request access to additional containers—for example, the iCloud container—at runtime.</p>

<p>这些容器构成了应用文件系统的基本面。下图是应用沙盒的示意图。</p>

<div style="text-align:center" markdown="1">

<img name="ios_app_layout_2x" src="images/ios_app_layout_2x.png" width="383" height="417">

</div>


<p>iOS应用常用的目录列表：</p>

<table>
<thead>
<tr>
<th></th>
<th> Directory </th>
<th> Description </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> AppName.app </td>
<td> This is the app’s bundle</td>
</tr>
<tr>
<td></td>
<td> Documents/ </td>
<td> Use this directory to store user-generated content.</td>
</tr>
<tr>
<td></td>
<td> Documents/Inbox </td>
<td> Use this directory to access files that your app was asked to open by outside entities.</td>
</tr>
<tr>
<td></td>
<td> Library/ </td>
<td> This is the top-level directory for any files that are not user data files.</td>
</tr>
<tr>
<td></td>
<td> tmp/ </td>
<td> Use this directory to write temporary files that do not need to persist between launches of your app.</td>
</tr>
</tbody>
</table>


<h3>数据的建议存储位置</h3>

<p>限于篇幅，关于应用的数据应该放到哪，可以查阅<strong>File System Programming Guide</strong> > <strong>File System Basics</strong> > <strong>About the iOS File System</strong> > <strong>Where You Should Put Your App’s Files</strong>。</p>

<h3>数据持久化的方法</h3>

<ol>
<li>NSUserDefaults;</li>
<li>Property Lists;</li>
<li>Archive;</li>
<li>数据库;</li>
<li>Core Data。</li>
</ol>


<h4>NSUserDefaults</h4>

<p>NSUserDefaults类提供与默认系统交互的程序接口。默认系统允许应用去自定义它的行为来符合用户的偏好。所以它主要是用来存储些配置信息。
它支持的数据类型有：floats，doubles，integers，Booleans，URLs，NSData，NSString，NSNumber，NSDate，NSArray和NSDictionary。如果还想存储其他类型的对象，需要使用NSData对它们进行归档。</p>

<h4>Property Lists</h4>

<p>当我们的需要持久化的数据量在几百KB内时，property list为我们提供了统一而方便的方法持久化数据。如果我们对象的全由NSDictionary, NSArray, NSString, NSDate, NSData, 或NSNumber类派生，我们可以创建property list。事实上，NSUserDefaults就是把数据保存在property list中。</p>

<p>Property list有三种存储方式：XML, binary format, &ldquo;old-style&rdquo; ASCII format inherited from OpenStep。old-style format的序列化API是只读的。</p>

<p>XML property list比binary格式的可移植性好，可以手动编辑，但是binary property lists兼容性好，需要的存储空间少，读写速度要优于XML property lists。通常来说，如果你的property list相对较小，XML property lists的优点会战胜它相对binary property lists的I/O速度，难兼容的缺点。如果你有大量数据，binary property lists, keyed archives，或自定义数据格式会是更好的解决方案。</p>

<h4>Archive</h4>

<p>Archives提供了一种把对象和值转成结构独立的字节流，它保留了对象与值，以及对象与对象的关系信息。</p>

<p>Cocoa archives可以持有Objective-c对象，标量，数组，结构体和字符串。它不能持有和平台相关的类型，例如union, void *, function pointers, 和long chains of pointers。</p>

<p>对象写入archive和从archive读出是使用coder对象。Coder对象是抽象类NSCoder具体子类的实例。它通过给对象发送NSCoding协议定义的encodeWithCoder: 和initWithCoder:方法分别写入或读出archiver。只有支持NSCoding协议的对象才能写入archiver。</p>

<h4>数据库</h4>

<p>iOS中有了以上数据持久化方法，我们为什么还需要数据库？</p>

<p>目前在iOS App开发中，SQLite是个不错的选择。</p>

<hr />

<p>SQLite</p>

<blockquote><p>SQLite is an in-process library that implements a self-contained, serverless, zero-configuration, transactional SQL database engine.</p></blockquote>

<p>SQLite在众多数据库中脱颖而出，目前是个不错的选择，但由于它是C接口，操作略显繁琐，就有了很多对它的封装，FMDB是个不错的选择。</p>

<h4>Core Data</h4>

<p>Core Data是Apple为我们提供的一种持久化方法，比较强大也比较复杂。</p>

<h1>Reference</h1>

<p>File System Programming Guide <br/>
Property List Programming Guide
Archives and Serializations Programming Guide  <br/>
<a href="http://www.infoq.com/cn/articles/data-storage-in-ios">对比iOS中的四种数据存储</a>  <br/>
<a href="http://www.cnblogs.com/kenshincui/p/3885689.html#archiver">IOS开发系列—Objective-C之Foundation框架</a>  <br/>
<a href="http://www.cnblogs.com/kenshincui/p/4077833.html">iOS开发系列&mdash;数据存取</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Key-Value Coding &amp; Key-Value Observing]]></title>
    <link href="http://DamianSheldon.github.io/blog/2014/11/12/key-value-coding-and-key-value-observing/"/>
    <updated>2014-11-12T16:06:13+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/2014/11/12/key-value-coding-and-key-value-observing</id>
    <content type="html"><![CDATA[<h2>Key-Value Coding</h2>

<ol>
<li>Key-Value Coding是什么？</li>
<li>为什么要用Key-Value Coding？</li>
<li>如何使用Key-Value Coding?</li>
</ol>


<h3>Key-Value Coding是什么？</h3>

<blockquote><p>Key-value coding is a mechanism for accessing an object’s properties indirectly, using strings to identify properties, rather than through invocation of an accessor method or accessing them directly through instance variables.</p></blockquote>

<p>Key-value coding是一种间接访问对象属性和机制，使用字符串去区别属性，而不是通过调用存取方法或者通过实例变量直接访问它们。</p>

<h3>为什么要用Key-Value Coding？</h3>

<ol>
<li>Scripting（OS X）;</li>
<li>简化代码和提高灵活性；</li>
</ol>


<h3>如何使用Key-Value Coding?</h3>

<p>Key-value coding支持对象属性，也可以是标量类型和结构体。在开始使用之前，我们先熟悉些下key-value coding术语，后文我们用术语来阐述，方便交流。</p>

<p>除了重载现有的术语，key-value coding定义了些专属的术语。</p>

<p>Key-value coding可以被用来访问三种不同的类型的对象值：<strong>attributes</strong>, <strong>to-one relationships</strong>, 和<strong>to-many relationships</strong>。术语<strong>property</strong>指三种类型值的任意一种。</p>

<p>attribute是简单值的property，像标量，字符串，或者布尔值。NSNumber和其他的不可变类型如NSColor也都被认为是attributes。</p>

<p>to-one relationship是拥有自己properties的对象。这些内部的properties可以改变而对象却不变。例如，NSView实例的superview就是to-one relationship。</p>

<p>to-many relationship包括一个相关对象的集合。NSArray或NSSet经常被用来持有这样一个集合。但是，key-value coding允许你使用自定义的类作为集合并且通过实现在to-many Properties中讨论的key-value coding存取方法仍然可以可以像它们是NSArray或NSSet那样访问它们。</p>

<p>既然key-value coding是一种间接访问对象属性的机制，访问就包括存取。</p>

<h4>使用key-value coding读取attribute值</h4>

<p>NSKeyValueCoding中定义的的attribute读取方法有：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (id)valueForKey:(NSString *)key;
</span><span class='line'>
</span><span class='line'>- (NSMutableArray *)mutableArrayValueForKey:(NSString *)key;
</span><span class='line'>
</span><span class='line'>- (id)valueForKeyPath:(NSString *)keyPath;
</span><span class='line'>
</span><span class='line'>- (NSMutableArray *)mutableArrayValueForKeyPath:(NSString *)keyPath;
</span><span class='line'>
</span><span class='line'>- (NSDictionary *)dictionaryWithValuesForKeys:(NSArray *)keys;
</span><span class='line'>
</span><span class='line'>- (id)valueForUndefinedKey:(NSString *)key;
</span></code></pre></td></tr></table></div></figure>


<h4>使用key-value coding存储attribute值</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)setValue:(id)value forKey:(NSString *)key;
</span><span class='line'>
</span><span class='line'>- (NSMutableSet *)mutableSetValueForKey:(NSString *)key;
</span><span class='line'>
</span><span class='line'>- (void)setValue:(id)value forKeyPath:(NSString *)keyPath;
</span><span class='line'>
</span><span class='line'>- (NSMutableSet *)mutableSetValueForKeyPath:(NSString *)keyPath;
</span><span class='line'>
</span><span class='line'>- (void)setValue:(id)value forUndefinedKey:(NSString *)key;
</span><span class='line'>
</span><span class='line'>- (void)setNilValueForKey:(NSString *)key;
</span><span class='line'>
</span><span class='line'>- (void)setValuesForKeysWithDictionary:(NSDictionary *)keyedValues;
</span></code></pre></td></tr></table></div></figure>


<p>你需要考虑一个额外的问题就是当你尝试设置非对象的property为nil。这种情况下，接收者给它自己发送一个setNilValueForKey:消息。它默认的实现是抛出NSInvalidArgumentException异常。你的应用可以覆盖这个方法替换默认值或标记值，然后你用新值调用setValue:forKey:。</p>

<p>现在，我们知道怎么用key-value coding去间接访问对象的property了。但是，如果想让我们自定义的类的property也支持key-value coding的话，我们应该怎么做呢？</p>

<h4>如何让自定义类的属性支持key-value coding?</h4>

<blockquote><p>Key-value coding attempts to use accessor methods to get and set values, before resorting to directly accessing the instance variable.</p></blockquote>

<p>在依靠直接访问实例变量之前，key-value coding尝试使用存取方法去访问和设置值。也就是说我们最好实现相应的存取方法，至少也要存在合适的实例变量。</p>

<p>前面提到key-value coding支持三个类型的attribute,针对三种类型的attribute,key-value coding分别是怎么来搜索存取方法和实例变量的呢？</p>

<ol>
<li>简单attributes存取方法搜索模式；</li>
<li>顺序集合存取方法的搜索模式；</li>
<li>唯一顺序集合存取方法的搜索模式；</li>
<li>无序集合存取方法的搜索模式。</li>
</ol>


<p>搜索的细节可以查阅Key-Value Coding Programming Guide。</p>

<h2>Key-Value Observing</h2>

<ol>
<li>Key-Value Observing是什么？</li>
<li>为什么要用Key-Value Observing？</li>
<li>如何使用Key-Value Observing?</li>
</ol>


<h3>Key-Value Observing是什么？</h3>

<blockquote><p>Key-value observing is a mechanism that allows objects to be notified of changes to specified properties of other objects.</p></blockquote>

<p>Key-value observing是一种允许一对对象的特定属性改变时另一个对象被通知的机制。</p>

<h3>为什么要用Key-Value Observing？</h3>

<p>KVO的主要好处是你不需要实现一套属性每次改变发送通知的机制。</p>

<h3>如何使用Key-Value Observing?</h3>

<ol>
<li>Registering as an Observer;</li>
<li>Receiving Notification of a Change;</li>
<li>Removing an Object as an Observer.</li>
</ol>


<p>同样，自定义的类如何才能让其他的开发者能使用KVO呢？我们要做的是符合KVO标准。</p>

<h4>KVO Compliance</h4>

<ul>
<li>The class must be <strong>key-value coding compliant</strong> for the property, as specified in <strong>Ensuring KVC Compliance</strong> in <strong>Key-Value Coding Programming Guide</strong>.</li>
<li>The class emits KVO change notifications for the property.</li>
<li>Dependent keys are registered appropriately (see <strong>Registering Dependent Keys</strong>).</li>
</ul>


<hr />

<p>There are two techniques for ensuring the change notifications are emitted. Automatic support is provided by NSObject and is by default available for all properties of a class that are key-value coding compliant. Typically, if you follow standard Cocoa coding and naming conventions, you can use automatic change notifications—you don’t have to write any additional code.</p>

<p>Manual change notification provides additional control over when notifications are emitted, and requires additional coding. You can control automatic notifications for properties of your subclass by implementing the class method automaticallyNotifiesObserversForKey:.</p>

<hr />

<h4>One more thing</h4>

<p>Key-Value Observing Implementation Details</p>

<p>Automatic key-value observing is implemented using a technique called <strong>isa-swizzling</strong>.</p>

<p>The <strong>isa</strong> pointer, as the name suggests, points to the object&rsquo;s class which maintains a dispatch table. This dispatch table essentially contains pointers to the methods the class implements, among other data.</p>

<p>When an observer is registered for an attribute of an object the isa pointer of the observed object is modified, pointing to an intermediate class rather than at the true class. As a result the value of the isa pointer does not necessarily reflect the actual class of the instance.</p>

<p>You should never rely on the <strong>isa</strong> pointer to determine class membership. Instead, you should use the <strong>class</strong> method to determine the class of an object instance.</p>

<p>So how does <strong>class</strong> method determine the class of an object?</p>

<h1>Reference</h1>

<p>Key-Value Coding Programming Guide <br/>
Key-Value Observing Programming Guide</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(翻译)iOS 设计模式]]></title>
    <link href="http://DamianSheldon.github.io/blog/2014/11/10/ios-design-patterns/"/>
    <updated>2014-11-10T08:35:43+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/2014/11/10/ios-design-patterns</id>
    <content type="html"><![CDATA[<p>iOS设计模式&mdash;你也许听说过这个术语，但是你知道它意味着什么吗？尽管大多数开发者可能同意设计模式非常重要，但关于它的文章并不多，咱们开发者们写代码时并没有花大多注意力放到设计模式上。</p>

<p>在软件设计中设计模式是对常见问题的可复用的解决方法。他们被设计成模板帮助你写出容易理解和复用的代码。他们也帮助你写出低藕合的代码以便你不需要太多争论就能改变或替换你代码的组件。</p>

<p>如果你刚刚接触设计模式，告诉你些好消息！首先，你已经使用过很多设计模式，这得感谢Cocoa建立的方式以及你被鼓励使用的最佳实践。其次，这篇教程将让你掌握iOS的主要（次要）设计模式，它们在Cocoa中很常用。</p>

<p>教程分成多个部分，每部分包含一种设计模式。在每部分，你会看到如下顺序的解释：</p>

<ul>
<li>该设计模式是什么；</li>
<li>你为什么应该使用它；</li>
<li>如何使用它，以及什么场景合适，使用时需要留意的常见陷阱；</li>
</ul>


<p>这篇教程中，你将创建一个Music Library应用，它会显示你的专辑和它们相关的信息。</p>

<p>在开发应用的过程中，你会慢慢熟悉多数常见的Cocoa设计模式：</p>

<ul>
<li>构造类：单例(Singleton)和 抽象工厂(Abstract Factory);</li>
<li>架构类：模型-视图-控制器(MVC), 修饰(Decorator), 适配器(Adapter), 门面(Facade)和合成（Composite);</li>
<li>行为类：观察者(Observer), 记忆(Memento), 响应链(Chain of Responsibility)和命令（Command）。</li>
</ul>


<p>别被误导认为这是篇纯理论的文章；你会在你音乐应用中使用这些应用模式中的大多数。你的应用最终看起来像这样：</p>

<div style="text-align:center" markdown="1">

<img name="finalapp-180x320" src="http://DamianSheldon.github.io/images/finalapp-180x320.png" width="180" height="320">  

</div>


<h3>开始吧</h3>

<p>下载<a href="http://cdn2.raywenderlich.com/wp-content/uploads/2013/07/BlueLibrary-Starter.zip">启动工程</a>,解压ZIP文件内容，然后在Xcode中打开。</p>

<p>里面内容不多，仅仅是默认的ViewController和一个未实现的简单HTTP客户端。</p>

<p><strong>Note</strong>:你知道吗？当你创建一个新的工程你的代码就已经符合设计模式了。MVC, Delegate, Protocol, Singleton&mdash;你免费得到全部！:]</p>

<p>在你深入第一个设计模式之前，你必须创建两个类去持有和显示专辑数据。</p>

<p>导航到<strong>“File\New\File…”</strong>(或简单地按Command+N)。选中<strong>iOS > Cocoa Touch</strong>，然后<strong>Objective-C class</strong>和单击<strong>Next</strong>。设置类名为<strong>Album</strong>并继承<strong>NSObject</strong>。单击<strong>Next</strong>然后<strong>Create</strong>。</p>

<p>打开<strong>Album.h</strong>，然后添加如下属性和方法原型到<strong>@interface</strong> 和 <strong>@end</strong>间:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@property (nonatomic, copy, readonly) NSString *title, *artist, *genre, *coverUrl, *year;
</span><span class='line'> 
</span><span class='line'>- (id)initWithTitle:(NSString*)title artist:(NSString*)artist coverUrl:(NSString*)coverUrl year:(NSString*)year;</span></code></pre></td></tr></table></div></figure>


<p>注意到所有的属性都是可读的，因为Album对象被创建之后不需要被改变。</p>

<p>方法是对象的初始化方法。当你创建一个新alum，你将传入album name, artist, album cover URL和year。</p>

<p>现在打开<strong>Album.m</strong>,添加下列代码到<strong>@implementation</strong>和<strong>@end</strong>中间:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (id)initWithTitle:(NSString*)title artist:(NSString*)artist coverUrl:(NSString*)coverUrl year:(NSString*)year
</span><span class='line'>{
</span><span class='line'>    self = [super init];
</span><span class='line'>    if (self)
</span><span class='line'>    {
</span><span class='line'>        _title = title;
</span><span class='line'>        _artist = artist;
</span><span class='line'>        _coverUrl = coverUrl;
</span><span class='line'>        _year = year;
</span><span class='line'>        _genre = @"Pop";
</span><span class='line'>    }
</span><span class='line'>    return self;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>这里没有什么神奇的；仅仅是一个简单的init方法去创建一个新Album实例。</p>

<p>再次导航到<strong>File\New\File…</strong>。选择<strong>Cocoa Touch</strong>然后<strong>Objective-C class</strong>，点击<strong>Next</strong>。设置类名为<strong>AlbumView</strong>，但是这次设置它为<strong>UIView</strong>的子类。点击<strong>Next</strong>然后<strong>Create</strong>。</p>

<p><strong>Note</strong>:如果你发现快捷键更容易用的话，<strong>Command+N</strong>将创建新的文件，<strong>Command+Option+N</strong>将创建新组，<strong>Command+B</strong>将编译你的工程，<strong>Command+R</strong>将运行工程。</p>

<p>打开<strong>AlbumView.h</strong>,然后添加下列方法原型到<strong>@interface</strong>和<strong>@end</strong>的中间。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (id)initWithFrame:(CGRect)frame albumCover:(NSString*)albumCover;</span></code></pre></td></tr></table></div></figure>


<p>Now open AlbumView.m and replace all the code after @implementation with the following code:</p>

<p>现在打开<strong>AlbumView.m</strong>，用下面的代码替换<strong>@implementation</strong>之后的内容：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@implementation AlbumView
</span><span class='line'>{
</span><span class='line'>    UIImageView *coverImage;
</span><span class='line'>    UIActivityIndicatorView *indicator;
</span><span class='line'>}
</span><span class='line'> 
</span><span class='line'>- (id)initWithFrame:(CGRect)frame albumCover:(NSString*)albumCover
</span><span class='line'>{
</span><span class='line'>    self = [super initWithFrame:frame];
</span><span class='line'>    if (self)
</span><span class='line'>    {
</span><span class='line'> 
</span><span class='line'>        self.backgroundColor = [UIColor blackColor];
</span><span class='line'>        // the coverImage has a 5 pixels margin from its frame
</span><span class='line'>        coverImage = [[UIImageView alloc] initWithFrame:CGRectMake(5, 5, frame.size.width-10, frame.size.height-10)];
</span><span class='line'>        [self addSubview:coverImage];
</span><span class='line'> 
</span><span class='line'>        indicator = [[UIActivityIndicatorView alloc] init];
</span><span class='line'>        indicator.center = self.center;
</span><span class='line'>        indicator.activityIndicatorViewStyle = UIActivityIndicatorViewStyleWhiteLarge;
</span><span class='line'>        [indicator startAnimating];
</span><span class='line'>        [self addSubview:indicator];
</span><span class='line'>    }
</span><span class='line'>    return self;
</span><span class='line'>}
</span><span class='line'> 
</span><span class='line'>@end</span></code></pre></td></tr></table></div></figure>


<p>你注意到的第一件事是这里有个名为coverImage的实例变量。变量代表专辑的封面图片。第二个变量是一个指示器，当专辑在下载时它转动指示器。</p>

<p>在初始化方法的实现中，你设置背影为黑色，创建一个与主视图周边有5个点距离的图片视图，创建并添加了一个活动指示器。</p>

<p><strong>Note</strong>:很奇怪为什么把私有变量定义在实现文件中而不是接口文件中？这是因为AlbumView类之外的其他类并不需要知道这些变量的存在，它们仅被类的内部实现中使用。如果你是在开发库或框架让其他开发者使用，这个惯例极其重要。</p>

<p>编译你的工程（<strong>Command+B</strong>）确认所有事情都准备就绪。都好了吗？然后准备迎接你的第一个设计模式！:]</p>

<h3>模型&mdash;视图&mdash;控制器，设计模式之王</h3>

<div style="text-align:center" markdown="1">

<img name="mvcking" src="http://DamianSheldon.github.io/images/mvcking.png" width="293" height="196">  

</div>


<p>模型&mdash;视图&mdash;控制器（MVC）是Cocoa的一个基石，它毫无疑问是被用得最多的设计模式。它依据应用中类的角色给它们分类，鼓励基于角色简洁地分隔代码。</p>

<p>这三个角色是：</p>

<ul>
<li><p>模型：持有你应用数据并定义如何操作它们的对象。例如，这个应用中的模型是你的Album类。</p></li>
<li><p>视图：控制模型类的可视显示以及和用户的交互的对象;所有的UIView和它们的子类基本上都是。在你这个应用中AlbumView代表视图。</p></li>
<li><p>控制器：控制器是中间件，它协调所有的工作。它从模型类访问数据并显示到视图上，监听事件，在需要时操作数据。你能猜到哪个类是你的控制器吗？对，是ViewController。</p></li>
</ul>


<p>你应用中这个设计模式好的实现意味着每个对象都会是三者之一。</p>

<p>视图和模型的通信可以被最佳描述成下图：</p>

<div style="text-align:center" markdown="1">

<img name="mvc0" src="http://DamianSheldon.github.io/images/mvc0.png" width="424" height="194">  

</div>


<p>任何数据发生改变模型类便通知控制器，接下来，控制器将数据更新到视图上。视图接收到用户的动作时可以通知控制器，控制器会根据需要更新模型数据或获取任何请求的数据。</p>

<p>你也许会奇怪为什么不拿掉Controller,在同一个类中实现视图和模型，这看起来更容易。</p>

<p>这都来源于代码的去藕合和可可复用。理想情况下，视图应该完全和模型隔离，这样它可以被不同的模型复用去展示其他的数据。</p>

<p>例如，如果未来你也想添加电影或书本到你的收藏库中，你仍然可以使用相同的AlbumView去展示你的电影和图书对象。此外，如果你创建了一个新的对象，它和专辑有些关系，你可以简单地复用你的Album类，因为它不依赖任何视图。这就是MVC的强大之处！</p>

<h3>如何使用MVC设计模式</h3>

<p>首先，你需要保证你工程中的类是Controller，View, Model三者之一；不要混合两个角色的功能到一个类中。你创建的<strong>Album</strong>和<strong>AlbumView</strong>到目前为止都做的很好。</p>

<p>其次，为了确保你习惯这种工作方式，你应该创建三个工程组来持有你的代码，每组对应一个类别。</p>

<p>导航到<strong>File\New\Group</strong>（或按<strong>Command+Option+N</strong>）并命名为Model，用相同的方法创建<strong>View</strong>和<strong>Controller</strong>组。</p>

<p>现在拖拽<strong>Album.h</strong>和<strong>Album.m</strong>到<strong>Model</strong>组。拖拽<strong>AlbumView.h</strong>和<strong>AlbumView.m</strong>到<strong>View</strong>组，最后拖拽<strong>ViewController.h</strong>和<strong>ViewController.m</strong>到<strong>Controller</strong>组。</p>

<p>目前你的工程结构应该看起来像这样：</p>

<div style="text-align:center" markdown="1">

<img name="mvc2-255x320" src="http://DamianSheldon.github.io/images/mvc2-255x320.png" width="255" height="320">  

</div>


<p>你的工程已经没有混乱的文件了看起来好多了。你明显能拥有其他的组和类，但这三个类别中的类是应用的核心。</p>

<p>现在你的组件被组织起来了，你需要从其他地方得到你的专辑数据。你将创建一个API类用于全部代码的数据管理&mdash;这提供了一个机会和你探讨下一个设计模式&mdash;单例。</p>

<h3>单例设计模式</h3>

<p>单例设计模式确保对于指定的类仅存在一个实例，全局的访问都指向它。它经常使用懒散加载，只有第一次需要时才创建这个实例。</p>

<p><strong>Note</strong>:Apple大量使用这种方法。例如：<strong>[NSUserDefaults standardUserDefaults]</strong>, <strong>[UIApplication sharedApplication]</strong>, <strong>[UIScreen mainScreen]</strong>, <strong>[NSFileManager defaultManager]</strong> 全都返回单例对象。</p>

<p>你也许会奇怪为什么你要关心一个类是不是只有一个实例，毕竟代码和内存都很便宜，对不对？</p>

<p>有些场景对于类只存在一个实例是有意义的。例如，没有必要存在多个Logger实例，除非你想同时输出多个log文件。以或者来看一个全局配置处理类：像配置文件，对于单个共享资源实现线程安全访问要比在同时可能有很多配置文件修改时容易的多。</p>

<h3>如何使用单例设计模式</h3>

<p>看下下面这个图：</p>

<div style="text-align:center" markdown="1">

<img name="singleton" src="http://DamianSheldon.github.io/images/singleton.png" width="233" height="152">  

</div>


<p>上图示例了一个Logger类，它有一个属性（它就是这个单独的实例），和两个方法：sharedInstance和init。</p>

<p>客户端第一次发送sharedInstance消息，属性的实例还没被初始化，所以你创建类的一个新的实例，然后返回它的一个引用。</p>

<p>下次调用sharedInstance，实例会立即返回不用初始化。这个逻辑保证任何时候都只仅存在一个实例。</p>

<p>你将实现这种模式通过创建一个单例类来管理专辑的所有数据。</p>

<p>你将注意到工程里有一个组叫<strong>API</strong>；这是你放所有将为应用提供服务类的地方。在组里用<strong>iOS\Cocoa Touch\Objective-C class</strong>模板创建一个新的类。命名为<strong>LibraryAPI</strong>，设置它是<strong>NSObject</strong>的子类。</p>

<p>打开<strong>LibraryAPI.h</strong>,用如下内容替代它：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@interface LibraryAPI : NSObject
</span><span class='line'> 
</span><span class='line'>+ (LibraryAPI*)sharedInstance;
</span><span class='line'> 
</span><span class='line'>@end</span></code></pre></td></tr></table></div></figure>


<p>Now go to LibraryAPI.m and insert this method right after the @implentation line:</p>

<p>现在到<strong>LibraryAPI.m</strong>，在<strong>@implentation</strong>之后插入这个方法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+ (LibraryAPI*)sharedInstance
</span><span class='line'>{
</span><span class='line'>    // 1
</span><span class='line'>    static LibraryAPI *_sharedInstance = nil;
</span><span class='line'> 
</span><span class='line'>    // 2
</span><span class='line'>    static dispatch_once_t oncePredicate;
</span><span class='line'> 
</span><span class='line'>    // 3
</span><span class='line'>    dispatch_once(&oncePredicate, ^{
</span><span class='line'>        _sharedInstance = [[LibraryAPI alloc] init];
</span><span class='line'>    });
</span><span class='line'>    return _sharedInstance;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>简短的方法里有不少内容：</p>

<ol>
<li><p>声明了一个静态变量来持有你类的实例，确保它在你的类中是全局可用的。</p></li>
<li><p>声明了一个<strong>dispatch_once_t</strong>静态变量，它确保初始化方法只会被执行一次。</p></li>
<li><p>使用Grand Central Dispatch (GCD)来执行块，它初始化了一个<strong>LibraryAPI</strong>的实例。这是单例设计模式的要义：类被实例化之后初始化方法就不会被调用了。</p></li>
</ol>


<p>下次你调用<strong>sharedInstance</strong>，在<strong>dispatch_once</strong>块中代码就不会被执行了（因为它已经被执行过一次了），你会得到一个之前创建的<strong>LibraryAPI</strong>的实例引用。</p>

<p>Note:想了解更多GCD内容以及它的用法，看下网站中的这两篇教程：<a href="http://www.raywenderlich.com/?p=4295">Multithreading and Grand Central Dispatch</a>和<a href="http://www.raywenderlich.com/?p=9328">How to Use Blocks</a>。</p>

<p>你现在有一个单例对象作为入口去管理专辑。我们把它进一步完善，创建一个类来处理你收藏库数据的持久化。</p>

<p>以<strong>iOS\Cocoa Touch\Objective-C class</strong>为模板在API组中创建一个新的类，命名为<strong>PersistencyManager</strong>，设置它为<strong>NSObject</strong>的子类。</p>

<p>打开<strong>PersistencyManager.h</strong>，添加下列引用到文件的顶端:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import "Album.h"</span></code></pre></td></tr></table></div></figure>


<p>Next, add the following code to PersistencyManager.h after the @interface line:</p>

<p>然后，添加下列代码到<strong>PersistencyManager.h</strong>中<strong>@interface</strong>后面：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (NSArray*)getAlbums;
</span><span class='line'>- (void)addAlbum:(Album*)album atIndex:(int)index;
</span><span class='line'>- (void)deleteAlbumAtIndex:(int)index;</span></code></pre></td></tr></table></div></figure>


<p>上面是你处理专辑数据的三个方法原型。</p>

<p>打开PersistencyManager.m，添加下列代码到@implementation前面：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@interface PersistencyManager () {
</span><span class='line'>    // an array of all albums
</span><span class='line'>    NSMutableArray *albums;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>上面添加了一个类的扩展，它是另一种给类添加私有方法和变量而不会暴露给外部类的方法。这里你声明了一个<strong>NSMutableArray</strong>来持有专辑数据。数组的可变性可以让你很容易添加和删除专辑数据。</p>

<p>现在添加下现代码实现到PersistencyManager.m文件中@implementation的后面：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (id)init
</span><span class='line'>{
</span><span class='line'>    self = [super init];
</span><span class='line'>    if (self) {
</span><span class='line'>      // a dummy list of albums
</span><span class='line'>        albums = [NSMutableArray arrayWithArray:
</span><span class='line'>                 @[[[Album alloc] initWithTitle:@"Best of Bowie" artist:@"David Bowie" coverUrl:@"http://www.coversproject.com/static/thumbs/album/album_david%20bowie_best%20of%20bowie.png" year:@"1992"],
</span><span class='line'>                 [[Album alloc] initWithTitle:@"It's My Life" artist:@"No Doubt" coverUrl:@"http://www.coversproject.com/static/thumbs/album/album_no%20doubt_its%20my%20life%20%20bathwater.png" year:@"2003"],
</span><span class='line'>                 [[Album alloc] initWithTitle:@"Nothing Like The Sun" artist:@"Sting" coverUrl:@"http://www.coversproject.com/static/thumbs/album/album_sting_nothing%20like%20the%20sun.png" year:@"1999"],
</span><span class='line'>                 [[Album alloc] initWithTitle:@"Staring at the Sun" artist:@"U2" coverUrl:@"http://www.coversproject.com/static/thumbs/album/album_u2_staring%20at%20the%20sun.png" year:@"2000"],
</span><span class='line'>                 [[Album alloc] initWithTitle:@"American Pie" artist:@"Madonna" coverUrl:@"http://www.coversproject.com/static/thumbs/album/album_madonna_american%20pie.png" year:@"2000"]]];
</span><span class='line'>    }
</span><span class='line'>    return self;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>在init中，你用5个样本专辑填充了数组。如果上面的专辑你不喜欢，用你喜欢的音乐替换它们吧. :]</p>

<p>现在添加下面三个方法到<strong>PersistencyManager.m</strong>：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (NSArray*)getAlbums
</span><span class='line'>{
</span><span class='line'>    return albums;
</span><span class='line'>}
</span><span class='line'> 
</span><span class='line'>- (void)addAlbum:(Album*)album atIndex:(int)index
</span><span class='line'>{
</span><span class='line'>    if (albums.count &gt;= index)
</span><span class='line'>      [albums insertObject:album atIndex:index];
</span><span class='line'>    else
</span><span class='line'>      [albums addObject:album];
</span><span class='line'>}
</span><span class='line'> 
</span><span class='line'>- (void)deleteAlbumAtIndex:(int)index
</span><span class='line'>{
</span><span class='line'>    [albums removeObjectAtIndex:index];
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>这些方法能让你获取，添加，删除专辑。</p>

<p>编译你的工程，确保所有的文件仍然能成功被编译。</p>

<p>到这，你可能会奇怪<strong>PersistencyManager</strong>来看哪里呢？它又不是单例。<strong>LibraryAPI</strong>和<strong>PersistencyManager</strong>的关系，我们在下一节会进一步揭示，你还会看到<strong>门面</strong>设计模式。</p>

<h3>门面设计模式</h3>

<div style="text-align:center" markdown="1">

<img name="facade" src="http://DamianSheldon.github.io/images/facade.jpg" width="300" height="212">  

</div>


<p>门面设计模式为复杂的子系统提供一个单一的接口。与其把一系列类和它们的API暴露给用户，还不如仅仅暴露给它们一个简单统一的API。</p>

<p>下图解释了这种理念：</p>

<div style="text-align:center" markdown="1">

<img name="facade2-480x241" src="http://DamianSheldon.github.io/images/facade2-480x241.png" width="480" height="241">  

</div>


<p>API的使用者们完全感觉不到它后面的复杂。当很多类协作时，这种设计模式十分理想，特别是当它们对用户很复杂或很难理解。</p>

<p>门面模式让使用系统的代码从接口和你隐藏实现的类解藕；它也减少了外部代码对内部子系统工作的依赖。当门面底下的类想改变时，这也很有用，因为门面能保留相同的API，尽管后面的代码已经改变了。</p>

<p>例如，如果有一天你想替换你的后端服务，你不需要去修改使用你API的代码。</p>

<h3>如何使用门面设计模式</h3>

<p>目前你有<strong>PersistencyManager</strong>保存专辑数据到本地，<strong>HTTPClient</strong>处理远程交互。工程中其他的类不应该意识到这个逻辑的存在。</p>

<p>为了实现这个设计模式，仅<strong>LibraryAPI</strong>应该持有<strong>PersistencyManager</strong>和<strong>HTTPClient</strong>的实例。然后，<strong>LibraryAPI</strong>会对其他的服务暴露一个简单的API。</p>

<p><strong>Note</strong>:通常，单例在整个应用的生命周期都存在。你不应该让单例保持大多其他对象的强引用，因为他们直到应用关闭才会被释放。</p>

<p>设计看起来像下面这样：</p>

<div style="text-align:center" markdown="1">

<img name="design-patterns-facade-uml-480x71" src="http://DamianSheldon.github.io/images/design-patterns-facade-uml-480x71.png" width="480" height="71">  

</div>


<p><strong>LibraryAPI</strong>将暴露给其他代码，但是会对应用的其他部分隐藏<strong>HTTPClient</strong>和<strong>PersistencyManager</strong>的复杂。</p>

<p>打开<strong>LibraryAPI.h</strong>，添加下列引用到文件的顶端：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import "Album.h"</span></code></pre></td></tr></table></div></figure>


<p>然后，添加下列方法定义到<strong>LibraryAPI.h</strong>：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (NSArray*)getAlbums;
</span><span class='line'>- (void)addAlbum:(Album*)album atIndex:(int)index;
</span><span class='line'>- (void)deleteAlbumAtIndex:(int)index;</span></code></pre></td></tr></table></div></figure>


<p>现在，这些方法是你会暴露给其他类的。</p>

<p>到LibraryAPI.m中，添加下面两个引用：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import "PersistencyManager.h"
</span><span class='line'>#import "HTTPClient.h"</span></code></pre></td></tr></table></div></figure>


<p>这将是你唯一导入这些类的地方。记住：你的API将会是唯一的入口去访问你&#8221;复杂&#8221;的系统。</p>

<p>现在，通过类的扩展添加些私有变量（在@implementation上面）：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@interface LibraryAPI () {
</span><span class='line'>    PersistencyManager *persistencyManager;
</span><span class='line'>    HTTPClient *httpClient;
</span><span class='line'>    BOOL isOnline;
</span><span class='line'>}
</span><span class='line'> 
</span><span class='line'>@end</span></code></pre></td></tr></table></div></figure>


<p><strong>isOnline</strong>决定任何专辑列表的改变，例如，添加或删除专辑，是否应该被更新到服务器。</p>

<p>你现在需要通过<strong>init</strong>来初始化这些变量。添加下列代码到<strong>LibraryAPI.m</strong>：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (id)init
</span><span class='line'>{
</span><span class='line'>    self = [super init];
</span><span class='line'>    if (self) {
</span><span class='line'>        persistencyManager = [[PersistencyManager alloc] init];
</span><span class='line'>        httpClient = [[HTTPClient alloc] init];
</span><span class='line'>        isOnline = NO;
</span><span class='line'>    }
</span><span class='line'>    return self;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>HTTP Client最终不会和真实的服务器交互，这里仅仅是为示例门面模式的使用，所以<strong>isOnline</strong>将一直是<strong>NO</strong>。</p>

<p>下一步，添加下面三个方法到<strong>LibraryAPI.m</strong>：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (NSArray*)getAlbums
</span><span class='line'>{
</span><span class='line'>    return [persistencyManager getAlbums];
</span><span class='line'>}
</span><span class='line'> 
</span><span class='line'>- (void)addAlbum:(Album*)album atIndex:(int)index
</span><span class='line'>{
</span><span class='line'>    [persistencyManager addAlbum:album atIndex:index];
</span><span class='line'>    if (isOnline)
</span><span class='line'>    {
</span><span class='line'>        [httpClient postRequest:@"/api/addAlbum" body:[album description]];
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'> 
</span><span class='line'>- (void)deleteAlbumAtIndex:(int)index
</span><span class='line'>{
</span><span class='line'>    [persistencyManager deleteAlbumAtIndex:index];
</span><span class='line'>    if (isOnline)
</span><span class='line'>    {
</span><span class='line'>        [httpClient postRequest:@"/api/deleteAlbum" body:[@(index) description]];
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>看一眼<strong>addAlbum:atIndex:</strong>。类首先更新本地数据，然后如果是联网的话，更新远程服务器。这是门面的真正力量；当你系统外面添加一个新专辑，它不知道，也不需要知道这底下的复杂。</p>

<p><strong>Note</strong>:当你为子系统的类设计门面时，记住没任何东西防止客户端直接访问隐藏的类。不要吝啬你的防御代码，不要假设所有客户端按门面相同的方式使用这些类是必须的。</p>

<p>编译并运行你的应用。你会看到像下面这样令人兴奋和无法置信的空的黑色屏幕。</p>

<div style="text-align:center" markdown="1">

<img name="2013-09-01_12-08-44-211x320" src="http://DamianSheldon.github.io/images/2013-09-01_12-08-44-211x320.png" width="211" height="320">  

</div>


<p>你将会需要些东西来显示专辑数据到屏幕上&mdash;这是个完美的使用场景对于你的下个设计模式：修饰。</p>

<h3>修饰设计模式</h3>

<p>修饰设计模式动态添加行为和能力到一个对象而不需要修改它的代码。它是不同于子类那样通过包装到另一个对象来修改类的行为的方法。</p>

<p>在Objective-C中，这种设计模式有两个很常见的实现：<strong>Category</strong>和<strong>Delegation</strong>。</p>

<h4>Category</h4>

<p>Category是一个极其强大的机制，它允许你添加方法到已经存在的类而不需要子类化。新的方法在编译时被添加，可以像扩展类的普通方法一样被执行。它和经典的修饰模式有点不同，因为一个Category不能持有扩展类的实例。</p>

<p><strong>Note</strong>:除了扩展你自己的类，你还可以添加方法到任意Cocoa拥有的类。</p>

<h4>如何使用Categories</h4>

<p>想像这么一个场景，你有一个Album对象，你想让它显示在一个表格视图中:</p>

<div style="text-align:center" markdown="1">

<img name="design-patterns-category1" src="http://DamianSheldon.github.io/images/design-patterns-category1.png" width="310" height="188">  

</div>


<p>专辑标题是从哪来的呢？<strong>Album</strong>是一个模型对象，所以它不关心你如何展示数据。你将需要些外部代码来为<strong>Album</strong>类添加该功能，但是不能直接修改类。</p>

<p>你将创建一个category，这是Album的扩展；它将定义一个新方法，这个新方法会返回一个让UITableView很容易使用的数据结构。</p>

<p>The data structure will look like the following:</p>

<p>这个数据结构会看起来像这样：</p>

<div style="text-align:center" markdown="1">

<img name="delegate2-480x67" src="http://DamianSheldon.github.io/images/delegate2-480x67.png" width="480" height="67">  

</div>


<p>为了添加<strong>Category</strong>到<strong>Album</strong>，导航到<strong>File\New\File…</strong>，选择<strong>Objective-C category</strong>模板&mdash;不要习惯性地选择了<strong>Objective-C class</strong>！输入<strong>TableRepresentation</strong>到<strong>Category</strong>字段，<strong>Album</strong>到<strong>Category on</strong>字段。</p>

<p>Note:你有没注意到新文件的名字？<strong>Album+TableRepresentation</strong>意味着你正在扩展<strong>Album</strong>类。这个惯例很重要，因为它易读并且它防止和你事其他人可能创建的categories冲突。</p>

<p>Go to Album+TableRepresentation.h and add the following method prototype:</p>

<p>进入Album+TableRepresentation.h，添加如下方法原型：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (NSDictionary*)tr_tableRepresentation;</span></code></pre></td></tr></table></div></figure>


<p>注意这里的方法名前有个<strong>tr_</strong>，是<strong>category:TableRepresentation</strong>的缩写。再次提醒，像这样的惯例将防止和其他方法冲突！</p>

<p><strong>Note</strong>:如果你在category中声明的方法和源类，或都同一个类其他的category（甚至父类）方法相同，运行时会使用哪个方法实现是示定义的。这种情况在你使用自己拥有类的category时很少发生，但是当使用categories添加方法到标准的Cocoa或Cocoa Touch类时能导致严重问题。</p>

<p>Go to Album+TableRepresentation.m and add the following method:</p>

<p>进入<strong>Album+TableRepresentation.m</strong>，添加如下方法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (NSDictionary*)tr_tableRepresentation
</span><span class='line'>{
</span><span class='line'>    return @{@"titles":@[@"Artist", @"Album", @"Genre", @"Year"],
</span><span class='line'>             @"values":@[self.artist, self.title, self.genre, self.year]};
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Consider for a moment how powerful this pattern can be:</p>

<p>思考下这种模式在某个时刻有多强大：</p>

<ul>
<li>你正在使用直接来自Album属性。</li>
<li>你添加了内容到Album类，但是你并没有子类化它。如果你需要子类化Album，你仍然也可以这么做。</li>
<li>这个简单的额外内容让你能返回一个UITableView式的专辑，并没有修改Album的代码。</li>
</ul>


<p>Apple在Foundation类中大量使用Categories。打开<strong>NSString.h</strong>看下他们是如何做的。找到 <strong>@interface NSString</strong>，你将会看到总共定义了三个categories：<strong>NSStringExtensionMethods</strong>, <strong>NSExtendedStringPropertyListParsing</strong> 和 <strong>NSStringDeprecated</strong>。Categories帮助方法组织和分隔到各个部分。</p>

<h4>Delegation</h4>

<p>另一个修饰设计模式，Delegation，是一种一个对象的行为代表或协调另一个对象。例如，当你使用<strong>UITableView</strong>，你必须实现的方法之一是<strong>tableView:numberOfRowsInSection:</strong>。</p>

<p>你不能期望UITableView知道你想每个部分有多少行，因为这是应用特定的。因此，计算每个部分有多少行的任务传递给了UITableView delegate。它允许UITableView类独立于它显示的数据。</p>

<p>这里有一个当你创建一个UITableView时是如何进行的虚拟场景解释：</p>

<div style="text-align:center" markdown="1">

<img name="delegate-480x252" src="http://DamianSheldon.github.io/images/delegate-480x252.png" width="480" height="252">  

</div>


<p>UITableView对象的工作是显示table view。但是，最终它将需要一些它没有的信息。然后，它救助于它的delegates，发送消息询问额外的信息。在Objective-C中实现delegate模式，一个类通过protocol可以声明可选和必选的方法。你将教程的稍候全面了解protocols。</p>

<p>表面看起来仅仅去继承一个对象然后覆盖必要的方法要简单，但是考虑下你只能继承单一的一个类。如果你想让某个类成为两或多个对象的delegate，这是不能通过继承实现的。</p>

<p>Note:这是个很重要的模式。Apple应用这种方法到大多数UIKit类：<strong>UITableView</strong>, <strong>UITextView</strong>, <strong>UITextField</strong>, <strong>UIWebView</strong>, <strong>UIAlert</strong>, <strong>UIActionSheet</strong>, <strong>UICollectionView</strong>, <strong>UIPickerView</strong>, <strong>UIGestureRecognizer</strong>, <strong>UIScrollView</strong>。列表还在继续。</p>

<p>未完待续&hellip;</p>

<h3>原文</h3>

<p>iOS Design Patterns（<a href="http://www.raywenderlich.com/46988/ios-design-patterns%EF%BC%89">http://www.raywenderlich.com/46988/ios-design-patterns%EF%BC%89</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为MacBook Pro配置一个像guake的终端]]></title>
    <link href="http://DamianSheldon.github.io/blog/2014/11/07/setup-iterm2-to-behave-like-guake/"/>
    <updated>2014-11-07T10:31:19+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/2014/11/07/setup-iterm2-to-behave-like-guake</id>
    <content type="html"><![CDATA[<p>以前在Arch下经常使用一个名为guake的终端，体验很好，用MacBook Pro之后也想有个这样的终端，由于各种原因，这事一直耽搁着，但并没有放下，今天特意找了下，还真找到了。不费话了，进入正题。</p>

<h3>让iTerm2的行为像guake</h3>

<p>1)下载<a href="http://iterm2.com/">iTerm2</a>,然后解压;</p>

<p>2)打开iTerm2,然后iTerm2&mdash;>Prefences&hellip;&ndash;>Profiles;</p>

<p>3)创建一个新Profiles,命名为guake;</p>

<p>4)在Window选项中根据自己的喜好配置;</p>

<p><img name="create_new_iterm_profile" src="http://DamianSheldon.github.io/images/create_new_iterm_profile.png" width="913" height="533"></p>

<p>5)在Keys选项中激活&#8221;Show/hide iTerm2 with a system-wide hotkey&#8221;,由于F12用来移动到Dashboard,只能用其他的快捷键了，可以根据自己喜好设置，我这里设置为⌘F12,(Note:⌘ + fn + F12);</p>

<p><img name="assign_a_hotkey" src="http://DamianSheldon.github.io/images/assign_a_hotkey.png" width="897" height="528"></p>

<h3>开机启动iTerm2时不打开终端窗口</h3>

<p>安装好iTerm2,并把它配置像guake, 加入开机自启动(System Preferences > Users&amp;Groups > Login Items > + iTerm2)之后，还有一个小问题困扰着我，就是它会默认打开一个终端窗口，这让人很不舒坦，解决方法如下:</p>

<p>1)打开iTerm2;</p>

<p>2)关闭所有的窗口(iTerm2菜单栏&mdash;>shell&mdash;>Close);</p>

<p>3)Window&mdash;>Save Window Arrangement;</p>

<p>4)将新的窗口布局命名为“No Windows”;</p>

<p>5)将这个新窗口布局设置默认布局，Preferences > Arrangements > Set it as default;</p>

<p>6)最后在Preferences… > General > Startup, 只选中“Open default window arrangement” 。</p>

<h3>Reference:</h3>

<p>SETUP ITERM2 TO BEHAVE LIKE GUAKE(<a href="http://ivanvillareal.com/osx/setup-iterm2-to-behave-like-guake/">http://ivanvillareal.com/osx/setup-iterm2-to-behave-like-guake/</a>)</p>

<p>Launch iTerm 2 on startup without opening a terminal window (<a href="http://rottmann.net/2013/03/launch-iterm-2-on-startup-without-opening-a-terminal-window/">http://rottmann.net/2013/03/launch-iterm-2-on-startup-without-opening-a-terminal-window/</a>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git 小结]]></title>
    <link href="http://DamianSheldon.github.io/blog/2014/11/05/git-summary/"/>
    <updated>2014-11-05T10:13:13+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/2014/11/05/git-summary</id>
    <content type="html"><![CDATA[<h1>Git</h1>

<ol>
<li>Git是什么？</li>
<li>为什么使用Git?</li>
<li>如何使用Git?</li>
</ol>


<h2>Git是什么？</h2>

<p>git &ndash; the stupid content tracker</p>

<p>这是man git中对它的介绍，我们看到它的核心是content tracker。Git是一个分布式的版本控制系统，项目是出于维护Linux内核源码的需求, 由Linus Torvalds启动的，现在已经成为最流行的版本管理系统，学会Git几乎成了开发者的必备技能。</p>

<h2>为什么使用Git?</h2>

<ol>
<li>系统稳定，安全性高，不会丢失辛苦的劳动成果；</li>
<li>操作十分快速；</li>
<li>功能强大；</li>
<li>&hellip;</li>
</ol>


<h2>如何使用Git?</h2>

<h3>安装Git</h3>

<p>安装Git主要有两种方法：一种是通过编译源代码来安装;另一种是使用为特定平台预编译好的安装包。</p>

<h3>在服务器上布署Git</h3>

<p>尽管技术上可以从个人的仓库里推送和拉取改变,但是我们不鼓励这样做,因为一不留心就很 容易弄混其他人的进度。另外,你也一定希望合作者们即使在自己不开机的时候也能从仓库获取数据——拥有 一个更稳定的公共仓库十分有用。因此,更好的合作方式是建立一个大家都可以访问的共享仓库,从那里推送和拉取数据。我们将把这个仓库称为 “Git 服务器”;代理一个 Git 仓库只需要花费很少的资源,几乎从不 需要整个服务器来支持它的运行。</p>

<p>架设一个 Git 服务器有很多种选择，这里不打算展开，不是一下子能讲清楚的，让我们看个实例。架设一个使用SSH传输数据和使用 authorized_keys 方法来给用户授权的Git服务器：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>// Step 1:创建一个 ‘git’ 用户并为其创建一个 .ssh 目录
</span><span class='line'><span class="nv">$ </span>sudo adduser git
</span><span class='line'><span class="nv">$ </span>su -l git
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~
</span><span class='line'><span class="nv">$ </span>mkdir .ssh
</span><span class='line'>
</span><span class='line'>// Step 2:把开发者的 SSH 公钥添加到这个用户的 authorized_keys 文件中。
</span><span class='line'>// 假设你通过 e-mail 收到了几个 公钥并存到了临时文件里
</span><span class='line'><span class="nv">$ </span>cat /tmp/id_rsa.john.pub &gt;&gt; ~/.ssh/authorized_keys
</span><span class='line'><span class="nv">$ </span>cat /tmp/id_rsa.josie.pub &gt;&gt; ~/.ssh/authorized_keys
</span><span class='line'><span class="nv">$ </span>cat /tmp/id_rsa.jessica.pub &gt;&gt; ~/.ssh/authorized_keys
</span><span class='line'>
</span><span class='line'>// Step 3:使用 --bare 选项运行 git init 来设定一个空仓库,这会初始化一个不包含工作目录的仓库
</span><span class='line'><span class="nv">$sudo</span> mkdir /opt/git
</span><span class='line'><span class="nv">$sudo</span> chown -R git /opt/git
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /opt/git
</span><span class='line'><span class="nv">$ </span>mkdir project.git
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>project.git
</span><span class='line'><span class="nv">$ </span>git --bare init
</span><span class='line'>
</span><span class='line'>// Mac 下需要开启ssh并允许remote login
</span><span class='line'><span class="nv">$launchctl</span> start sshd
</span><span class='line'>// System Preferences -&gt; Sharing -&gt; Remote Login -&gt; All Users
</span><span class='line'>
</span><span class='line'>// Step 4:Join,Josie 或者 Jessica 就可以把它加为远程仓库,
</span><span class='line'>推送一个分支,从而把第一个版本的工程上 传到仓库里了
</span><span class='line'><span class="c"># 在 John 的电脑上</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>myproject
</span><span class='line'><span class="nv">$ </span>git init
</span><span class='line'><span class="nv">$ </span>git add .
</span><span class='line'><span class="nv">$ </span>git commit -m <span class="s1">&#39;initial commit&#39;</span>
</span><span class='line'><span class="nv">$ </span>git remote add origin git@gitserver:/opt/git/project.git
</span><span class='line'><span class="nv">$ </span>git push origin master
</span><span class='line'>
</span><span class='line'>// Step 5:其他人的克隆和推送也一样变得很简单
</span><span class='line'><span class="nv">$ </span>git clone git@gitserver:/opt/git/project.git <span class="nv">$ </span>vim README
</span><span class='line'><span class="nv">$ </span>git commit -am <span class="s1">&#39;fix for the README file&#39;</span>
</span><span class='line'><span class="nv">$ </span>git push origin master
</span><span class='line'>
</span><span class='line'>// Step 6:用这个方法可以很快捷的为少数几个开发者架设一个可读写的 Git 服务
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>// 如何生成 SSH 公钥？
</span><span class='line'>// Step 1:首先,确定一下是否已经有一个公钥了。SSH 公钥默认储存 在账户的 ~/.ssh 目录。
</span><span class='line'>// 进入那里并查看其内容,有没有公钥一目了然:
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~/.ssh
</span><span class='line'><span class="nv">$ </span>ls
</span><span class='line'>authorized_keys2 id_dsa known_hosts config id_dsa.pub
</span><span class='line'>
</span><span class='line'>// Step 2:关键是看有没有用 文件名 和 文件名.pub 来命名的一对文件,
</span><span class='line'>// 这个 文件名 通常是 id_dsa 或者 id_rsa。 .pub 文件是公钥,另一个文件是密钥。
</span><span class='line'>// 假如没有这些文件<span class="o">(</span>或者干脆连 .ssh 目录都没有<span class="o">)</span>,你可以用 ssh- keygen 的程序来建立它们,
</span><span class='line'>// 该程序在 Linux/Mac 系统由 SSH 包提供, 在 Windows 上则包含在 MSysGit 包 里:
</span><span class='line'><span class="nv">$ </span>ssh-keygen
</span><span class='line'>Generating public/private rsa key pair.
</span><span class='line'>Enter file in which to save the key <span class="o">(</span>/Users/schacon/.ssh/id_rsa<span class="o">)</span>:
</span><span class='line'>Enter passphrase <span class="o">(</span>empty <span class="k">for </span>no passphrase<span class="o">)</span>:
</span><span class='line'>Enter same passphrase again:
</span><span class='line'>Your identification has been saved in /Users/schacon/.ssh/id_rsa.
</span><span class='line'>Your public key has been saved in /Users/schacon/.ssh/id_rsa.pub.
</span><span class='line'>The key fingerprint is:
</span><span class='line'>43:c5:5b:5f:b1:f1:50:43:ad:20:a6:92:6a:1f:9a:3a schacon@agadorlaptop.local
</span><span class='line'>
</span><span class='line'>// Step 3:它先要求你确认保存公钥的位置<span class="o">(</span>.ssh/id_rsa<span class="o">)</span>,然后它会让你重复一个密码两次,
</span><span class='line'>// 如果不想在使用公钥的 时候输入密码,可以留空。
</span><span class='line'>// 现在,所有做过这一步的用户都得把它们的公钥给你
</span><span class='line'>// 或者 Git 服务器的管理者<span class="o">(</span>假设 SSH 服务被设定为使 用公钥机制<span class="o">)</span>。
</span><span class='line'>// 他们只需要复制 .put 文件的内容然后 e-email 之。公钥的样子大致如下:
</span><span class='line'><span class="nv">$ </span>cat ~/.ssh/id_rsa.pub
</span><span class='line'>ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAklOUpkDHrfHY17SbrmTIpNLTGK9Tjom/BWDSU
</span><span class='line'>GPl+nafzlHDTYW7hdI4yZ5ew18JH4JW9jbhUFrviQzM7xlELEVf4h9lFX5QVkbPppSwg0cda3
</span><span class='line'>Pbv7kOdJ/MTyBlWXFCR+HAo3FXRitBqxiX1nKhXpHAZsMciLq8V6RjsNAQwdsdMFvSlVK/7XA
</span><span class='line'>t3FaoJoAsncM1Q9x5+3V0Ww68/eIFmb1zuUFljQJKprrX88XypNDvjYNby6vw/Pb0rwert/En
</span><span class='line'>mZ+AW4OZPnTPI89ZPmVMLuayrD2cE86Z/il8b+gw3r3+1nKatmIkjn2so1d01QraTlMqVSsbx
</span><span class='line'>NrRFi9wrf+M7Q<span class="o">==</span> schacon@agadorlaptop.local
</span></code></pre></td></tr></table></div></figure>


<p>作为一个额外的防范措施,你可以用 Git 自带的 git-shell 简单工具来把 git 用户的活动限制在仅与 Git 相关。把它设为 git 用户登入的 shell,那么该用户就不能拥有主机正常的 shell 访问权。为了实现这一 点,需要指明用户的登入shell 是 git-shell ,而不是 bash 或者 csh。你可能得编辑 /etc/passwd 文件:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>// Step 1:
</span><span class='line'><span class="nv">$ </span>sudo vim /etc/passwd
</span><span class='line'>
</span><span class='line'>// Step 2:在文件末尾,你应该能找到类似这样的行
</span><span class='line'>git:x:1000:1000::/home/git:/bin/sh
</span><span class='line'>
</span><span class='line'>// Step 3:把 bin/sh 改为 /usr/bin/git-shell <span class="o">(</span>或者用 which git-shell 查看它的位置<span class="o">)</span>。该行修改后的样子如下
</span><span class='line'>git:x:1000:1000::/home/git:/usr/bin/git-shell
</span><span class='line'>
</span><span class='line'>// Step 4:现在 git 用户只能用 SSH 连接来推送和获取 Git 仓库,而不能直接使用主机 shell。
</span><span class='line'>// 尝试登录的话,你会 看到下面这样的拒绝信息
</span><span class='line'><span class="nv">$ </span>ssh git@gitserver
</span><span class='line'>fatal: What <span class="k">do </span>you think I am? A shell? <span class="o">(</span>你以为我是个啥?shell吗?<span class="o">)</span>
</span><span class='line'>Connection to gitserver closed. <span class="o">(</span>gitserver 连接已断开。<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Git基础</h3>

<p>为了和其他人愉快地的合作开发，我们要掌握Git的基本命令。你不会想看到人民群众仇恨你。  <br/>
1)Git基础要点; <br/>
2)配置Git; <br/>
3)Git分支;
4)记录每次更新到仓库;  <br/>
5)撤消操作; <br/>
6)远程仓库的使用;  <br/>
7)打标签;  <br/>
8)查看提交历史。</p>

<h4>Git基础要点</h4>

<p>对于任何一个文件,在 Git 内都只有三种状态:已提交 (committed),已修改(modified)和已暂存(staged)。已提交表示该文件已经被安全地保存在本地数据 库中了;已修改表示修改了某个文件,但还没有提交保存;已暂存表示把已修改的文件放在下次提交时要保存 的清单中。
由此我们看到 Git 管理项目时,文件流转的三个工作区域:Git 的本地数据目录,工作目录以及暂存区域。</p>

<p>每个项目都有一个 git 目录,它是 Git 用来保存元数据和对象数据库的地方。该目录非常重要,每次克隆 镜像仓库的时候,实际拷贝的就是这个目录里面的数据。
从项目中取出某个版本的所有文件和目录,用以开始后续工作的叫做工作目录。这些文件实际上都是从 git 目录中的压缩对象数据库中提取出来的,接下来就可以在工作目录中对这些文件进行编辑。
所谓的暂存区域只不过是个简单的文件,一般都放在 git 目录中。有时候人们会把这个文件叫做索引文件,不过标准说法还是叫暂存区域。</p>

<p>基本的 Git 工作流程如下:  <br/>
a)在工作目录中修改某些文件;  <br/>
b)对这些修改了的文件作快照,并保存到暂存区域;  <br/>
c)提交更新,将保存在暂存区域的文件快照转储到 git 目录中.</p>

<h5>配置Git</h5>

<p>一般在新的系统上,我们都需要先配置下自己的 Git 工作环境。配置工作只需一次,以后升级时还会沿用 现在的配置。当然,如果需要,你随时可以用相同的命令修改已有的配置。</p>

<p>Git 提供了一个叫做 git config 的工具(译注:实际是 git-config 命令,只不过可以通过 git 加一个 名字来呼叫此命令。),专门用来配置或读取相应的工作环境变量。而正是由这些环境变量,决定了 Git 在 各个环节的具体工作方式和行为。这些变量可以存放在以下三个不同的地方:  <br/>
1)/etc/gitconfig文件:系统中对所有用户都普遍适用的配置。若使用 git config 时用 &mdash;system 选项,读写 的就是这个文件。  <br/>
2)~/.gitconfig文件:用户目录下的配置文件只适用于该用户。若使用 git config 时用 &mdash;global 选项,读写 的就是这个文件。 <br/>
3)当前项目的 git 目录中的配置文件(也就是工作目录中的 .git/config 文件):这里的配置仅仅针对当前 项目有效。每一个级别的配置都会覆盖上层的相同配置,所以 .git/config 里的配置会覆盖 /etc/gitconfig 中的同名变量。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>// Quilk config
</span><span class='line'>// 用户信息
</span><span class='line'><span class="nv">$ </span>git config --global user.name <span class="s2">&quot;John Doe&quot;</span>
</span><span class='line'><span class="nv">$ </span>git config --global user.email johndoe@example.com
</span><span class='line'>
</span><span class='line'>// 文本编辑器
</span><span class='line'><span class="nv">$ </span>git config --global core.editor emacs
</span><span class='line'>
</span><span class='line'>// 差异分析工具
</span><span class='line'><span class="nv">$ </span>git config --global merge.tool vimdiff
</span><span class='line'>
</span><span class='line'>// 查看配置信息
</span><span class='line'><span class="nv">$ </span>git config --list
</span></code></pre></td></tr></table></div></figure>


<h5>Git分支</h5>

<p>几乎每一种版本控制系统都以某种形式支持分支。使用分支意味着你可以从开发主线上分离开来,然后在不影响主线的同时继续工作。
1)新建分支;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>// 新建本地分支
</span><span class='line'>git branch <span class="o">[</span>--set-upstream | --track | --no-track<span class="o">]</span> <span class="o">[</span>-l<span class="o">]</span> <span class="o">[</span>-f<span class="o">]</span> &lt;branchname&gt; <span class="o">[</span>&lt;start-point&gt;<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>--set-upstream
</span><span class='line'>如果指定的分支不存在，或者指定了--force参数，作用和--track一样。
</span><span class='line'>否则当创建分支时建立像--track一样的配置，除了分支的指向没有改变。
</span><span class='line'>
</span><span class='line'>--track
</span><span class='line'>
</span><span class='line'>当创建新的分支，从新分支建立branch.&lt;name&gt;.remote和branch.&lt;name&gt;.merge的配置入口
</span><span class='line'>去标记start-point 分支作为“upstream”。
</span><span class='line'>这个配置会告诉git在git status和git branch -v中显示两个分支的关系。
</span><span class='line'>而且，当新的分支被检出时，它会引导git pull在没带参数时去从upstream拉代码。
</span><span class='line'>
</span><span class='line'>当我们的start point是remote-tracking分支时，这一行为是默认的。
</span><span class='line'>如果你想让git checkout和git branch总是像给定--no-track一样执行，设置branch.autosetupmerge 配置变量为false。
</span><span class='line'>当start-point是local或remote-tracking分支时，上述行为是你想要的，那么设置它为always。
</span><span class='line'>
</span><span class='line'>--no-track
</span><span class='line'>不建立<span class="s2">&quot;upstream&quot;</span>配置，即使branch.autosetupmerge配置变量的值是true。
</span><span class='line'>
</span><span class='line'>-l
</span><span class='line'>创建分支的引用日志。它会激活对分支引用所有改变模式的记录，开启使用基于sha1表达式的日期，
</span><span class='line'>如<span class="s2">&quot;&lt;branchname&gt;@{yesterday}&quot;</span>。
</span><span class='line'>注意在non-bare仓库中，引用日志由于core.logallrefupdates配置选项默认都开启的。
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>-f
</span><span class='line'>如果&lt;branchname&gt;已经存在，重置&lt;branchname&gt;到&lt;startpoint&gt;。没有-f git branch将会拒绝改变。
</span><span class='line'>
</span><span class='line'>&lt;branchname&gt;
</span><span class='line'>要创建或删除分支的名称。新分支的名称必须通过git-check-ref-format<span class="o">(</span>1<span class="o">)</span>定义的所有检查。
</span><span class='line'>有些检查会限制分支名称中能使用的字符。
</span><span class='line'>
</span><span class='line'>&lt;start-point&gt;
</span><span class='line'>已经存在的分支名，对它应用和&lt;branchname&gt;相同的限制。
</span><span class='line'>
</span><span class='line'>如果我们没有指定&lt;start-point&gt;,它默认是HEAD。
</span><span class='line'><span class="nv">$git</span> branch &lt;branchname&gt; &lt;start-point&gt;
</span><span class='line'>
</span><span class='line'>// 新建远程仓库分支
</span><span class='line'>git push <span class="o">[</span>远程名<span class="o">]</span> <span class="o">[</span>本地分支<span class="o">]</span>:<span class="o">[</span>远程分支<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>2)删除分支;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>// 删除本地分支
</span><span class='line'><span class="nv">$ </span>git branch -d &lt;branchname&gt;
</span><span class='line'>
</span><span class='line'>// 删除远程分支
</span><span class='line'>// 如果想在服务器上删 除 serverfix 分支,运行下面的命令:
</span><span class='line'><span class="nv">$ </span>git push origin :serverfix
</span><span class='line'>To git@github.com:schacon/simplegit.git
</span><span class='line'>- <span class="o">[</span>deleted<span class="o">]</span> serverfix
</span></code></pre></td></tr></table></div></figure>


<p>3)切换分支;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git checkout &lt;branchname&gt;
</span></code></pre></td></tr></table></div></figure>


<p>4)合并分支;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>// 将sourceBranchname合并到destinationBranchname
</span><span class='line'><span class="nv">$git</span> checkout destinationBranchname
</span><span class='line'><span class="nv">$git</span> merge sourceBranchname
</span></code></pre></td></tr></table></div></figure>


<p>5)衍合分支。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>// 把一个分支整合到另一个分支的办法有两种:merge<span class="o">(</span>合并<span class="o">)</span> 和 rebase<span class="o">(</span>衍合<span class="o">)</span>。
</span><span class='line'>// 把在 branchA 里产生的变化补丁重新在 branchB 的基础上打一遍。在 Git 里,这种 操作叫做衍合<span class="o">(</span>rebase<span class="o">)</span>。
</span><span class='line'>// 有了 rebase 命令,就可以把在一个分支里提交的改变在另一个分支里重放一遍。
</span><span class='line'>// 例如将experiment衍合到master分支:
</span><span class='line'><span class="nv">$ </span>git checkout experiment
</span><span class='line'><span class="nv">$ </span>git rebase master
</span><span class='line'>First, rewinding head to replay your work on top of it... Applying: added staged <span class="nb">command</span>
</span></code></pre></td></tr></table></div></figure>


<p>关于如何进行分支管理，可以看看阮一峰老师的<a href="http://www.ruanyifeng.com/blog/2012/07/git.html">这篇博文</a>。</p>

<h5>记录每次更新到仓库</h5>

<p>版本控制的主要作用就是记录我们的更新，如果我们不将更新记录到远程仓库就失去意义了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>// 检查当前文件状态
</span><span class='line'><span class="nv">$ </span>git status
</span><span class='line'><span class="c"># On branch master</span>
</span><span class='line'>nothing to commit <span class="o">(</span>working directory clean<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>// 跟踪新文件
</span><span class='line'><span class="nv">$ </span>git add newFilename
</span><span class='line'>
</span><span class='line'>// 暂存已修改文件
</span><span class='line'><span class="nv">$ </span>git add trackedFilename
</span><span class='line'>
</span><span class='line'>// 忽略某些文件
</span><span class='line'>//一般我们总会有些文件无需纳入 Git 的管理,也不希望它们总出现在未跟踪文件列表。
</span><span class='line'>通常都是些自动生成的文件,像是日志或者编译过程中创建的等等。
</span><span class='line'>我们可以创建一个名为 .gitignore 的文件,列出要忽略的 文件模式。
</span><span class='line'>
</span><span class='line'>// 文件 .gitignore 的格式规范如下:
</span><span class='line'>// 1<span class="o">)</span>所有空行或者以注释符号 <span class="c"># 开头的行都会被 Git 忽略。</span>
</span><span class='line'>// 2<span class="o">)</span>可以使用标准的 glob 模式匹配, 所谓的 glob 模式是指 shell 所使用的简化了的正则表达式。
</span><span class='line'>// 3<span class="o">)</span>匹配模式最后跟反斜杠<span class="o">(</span>/<span class="o">)</span>说明要忽略的是目录。
</span><span class='line'>/*
</span><span class='line'><span class="c"># 此为注释 – 将被 Git 忽略</span>
</span><span class='line'>*.a <span class="c"># 忽略所有 .a 结尾的文件</span>
</span><span class='line'>!lib.a <span class="c"># 但 lib.a 除外</span>
</span><span class='line'>/TODO <span class="c"># 仅仅忽略项目根目录下的 TODO 文件,不包括 subdir/TODO build/ # 忽略 build/ 目录下的所有文件</span>
</span><span class='line'>doc/*.txt <span class="c"># 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span>
</span><span class='line'>*/
</span><span class='line'>
</span><span class='line'>// 查看已暂存和未暂存的更新
</span><span class='line'>// 实际上 git status 的显示比较简单,仅仅是列出了修改过的文件,如果要查看具体修改了什么地方,可以用 git diff 命令。
</span><span class='line'><span class="nv">$ </span>git diff
</span><span class='line'>diff --git a/benchmarks.rb b/benchmarks.rb index 3cb747f..da65585 100644
</span><span class='line'>--- a/benchmarks.rb
</span><span class='line'>+++ b/benchmarks.rb
</span><span class='line'>@@ -36,6
</span><span class='line'>+ + + +
</span><span class='line'>+36,10 @@ def main @commit.parents<span class="o">[</span>0<span class="o">]</span>.parents<span class="o">[</span>0<span class="o">]</span>.parents<span class="o">[</span>0<span class="o">]</span>
</span><span class='line'>end
</span><span class='line'>run_code<span class="o">(</span>x, <span class="s1">&#39;commits 1&#39;</span><span class="o">)</span> <span class="k">do </span>git.commits.size
</span><span class='line'>end
</span><span class='line'>run_code<span class="o">(</span>x, <span class="s1">&#39;commits 2&#39;</span><span class="o">)</span> <span class="k">do</span>
</span><span class='line'><span class="nv">log</span> <span class="o">=</span> git.commits<span class="o">(</span><span class="s1">&#39;master&#39;</span>, 15<span class="o">)</span> log.size
</span><span class='line'>
</span><span class='line'>// 若要看已经暂存起来的文件和上次提交时的快照之间的差异,可以用 git diff --cached 命令。
</span><span class='line'>
</span><span class='line'>// 提交更新
</span><span class='line'><span class="nv">$ </span>git commit
</span><span class='line'>
</span><span class='line'>// 跳过使用暂存区域
</span><span class='line'>// 尽管使用暂存区域的方式可以精心准备要提交的细节,但有时候这么做略显繁琐。
</span><span class='line'>Git 提供了一个跳过使用 暂存区域的方式,只要在提交的时候,给 git commit 加上 -a 选项,
</span><span class='line'>Git 就会自动把所有已经跟踪过的文件暂存起来一并提交,从而跳过 git add 步骤:
</span><span class='line'><span class="nv">$ </span>git commit -a -m <span class="s1">&#39;added new benchmarks&#39;</span>
</span><span class='line'><span class="o">[</span>master 83e38c7<span class="o">]</span> added new benchmarks
</span><span class='line'>1 files changed, 5 insertions<span class="o">(</span>+<span class="o">)</span>, 0 deletions<span class="o">(</span>-<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>// 移除文件
</span><span class='line'>// 要从 Git 中移除某个文件,就必须要从已跟踪文件清单中移除<span class="o">(</span>确切地说,是从暂存区域移除<span class="o">)</span>,然后提交。
</span><span class='line'>可以用 git rm 命令完成此项工作,并连带从工作目录中删除指定的文件,这样以后就不会出现在未跟踪 文件清单中了。
</span><span class='line'>// 如果只是简单地从工作目录中手工删除文件,运行 git status 时就会在 “Changed but not updated” 部分<span class="o">(</span>也就是_未暂存_清单<span class="o">)</span>看到。
</span><span class='line'>
</span><span class='line'>// 移动文件
</span><span class='line'><span class="nv">$ </span>git mv file_from file_to
</span></code></pre></td></tr></table></div></figure>


<h5>撤消操作</h5>

<p>任何时候,你都有可能需要撤消刚才所做的某些操作。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>// 修改最后一次提交
</span><span class='line'>// 有时候我们提交完了才发现漏掉了几个文件没有加,或者提交信息写错了。想要撤消刚才的提交操作,可以 使用 --amend 选项重新提交:
</span><span class='line'><span class="nv">$ </span>git commit --amend
</span><span class='line'>
</span><span class='line'>// 取消已经暂存的文件
</span><span class='line'>git reset HEAD &lt;file&gt;...
</span><span class='line'>
</span><span class='line'>// 取消对文件的修改
</span><span class='line'>use <span class="s2">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes in working directory
</span></code></pre></td></tr></table></div></figure>


<h5>远程仓库的使用</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>// 查看当前的远程库
</span><span class='line'>git remote <span class="o">[</span>-v<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>// 添加远程仓库
</span><span class='line'>git remote add <span class="o">[</span>shortname<span class="o">]</span> <span class="o">[</span>url<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>// 从远程仓库抓取数据
</span><span class='line'><span class="nv">$ </span>git fetch <span class="o">[</span>remote-name<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>// 推送数据到远程仓库
</span><span class='line'>git push <span class="o">[</span>remote-name<span class="o">]</span> <span class="o">[</span>branch-name<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>// 查看远程仓库信息
</span><span class='line'>git remote show <span class="o">[</span>remote-name<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>// 远程仓库的删除和重命名
</span><span class='line'>// 可以用 git remote rename 命令修改某个远程仓库的简短名称,比如想把 pb 改成 paul,可以这么运行:
</span><span class='line'><span class="nv">$ </span>git remote rename pb paul <span class="nv">$ </span>git remote
</span><span class='line'>origin
</span><span class='line'>paul
</span><span class='line'>
</span><span class='line'>// 移除 对应的远端仓库,可以运行 git remote rm 命令:
</span><span class='line'><span class="nv">$ </span>git remote rm paul <span class="nv">$ </span>git remote
</span><span class='line'>origin
</span></code></pre></td></tr></table></div></figure>


<h5>打标签</h5>

<p>人们在发布某个软件版本(比如 v1.0 等等)的时候,经常会打上一标签。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>// 列显已有的标签
</span><span class='line'><span class="nv">$ </span>git tag v0.1
</span><span class='line'>v1.3
</span><span class='line'>
</span><span class='line'>// 新建标签
</span><span class='line'>// Git 使用的标签有两种类型:轻量级的<span class="o">(</span>lightweight<span class="o">)</span>和含附注的<span class="o">(</span>annotated<span class="o">)</span>。
</span><span class='line'>轻量级标签就像是个不 会变化的分支,实际上它就是个指向特定提交对象的引用。
</span><span class='line'>而含附注标签,实际上是存储在仓库中的一个独立 对象,它有自身的校验和信息,
</span><span class='line'>包含着标签的名字,电子邮件地址和日期,以及标签说明,标签本身也允许使 用 GNU Privacy Guard <span class="o">(</span>GPG<span class="o">)</span> 来签署或验证。
</span><span class='line'>一般我们都建议使用含附注型的标签,以便保留相关信息;
</span><span class='line'>当然,如果只是临时性加注标签,或者不需要旁注额外信息,用轻量级标签也没问题。
</span><span class='line'>
</span><span class='line'>// 创建一个含附注类型的标签非常简单,用 -a <span class="o">(</span>译注:取 annotated 的首字母<span class="o">)</span>指定标签名字即可:
</span><span class='line'><span class="nv">$ </span>git tag -a v1.4 -m <span class="s1">&#39;my version 1.4&#39;</span>
</span><span class='line'>
</span><span class='line'>// 可以使用 git show 命令查看相应标签的版本信息,并连同显示打标签时的提交对象。
</span><span class='line'><span class="nv">$ </span>git show v1.4
</span><span class='line'>tag v1.4
</span><span class='line'>Tagger: Scott Chacon &lt;schacon@gee-mail.com&gt; Date: Mon Feb 9 14:45:11 2009 -0800
</span><span class='line'>my version 1.4
</span><span class='line'>commit 15027957951b64cf874c3557a0f3547bd83b3ff6 Merge: 4a447f7... a6b4c97...
</span><span class='line'>Author: Scott Chacon &lt;schacon@gee-mail.com&gt; Date: Sun Feb 8 19:02:46 2009 -0800
</span><span class='line'>Merge branch <span class="s1">&#39;experiment&#39;</span>
</span><span class='line'>
</span><span class='line'>// 签署标签
</span><span class='line'>//如果你有自己的私钥,还可以用 GPG 来签署标签,只需要把之前的 -a 改为 -s <span class="o">(</span>译注: 取 Signed 的首
</span><span class='line'>字母<span class="o">)</span>即可:
</span><span class='line'><span class="nv">$ </span>git tag -s v1.5 -m <span class="s1">&#39;my signed 1.5 tag&#39;</span>
</span><span class='line'>You need a passphrase to unlock the secret key <span class="k">for </span>user: <span class="s2">&quot;Scott Chacon &lt;schacon@gee-mail.com&gt;&quot;</span>
</span><span class='line'>1024-bit DSA key, ID F721C45A, created 2009-02-09
</span><span class='line'>
</span><span class='line'>// 轻量级标签
</span><span class='line'>// 轻量级标签实际上就是一个保存着对应提交对象的校验和信息的文件。
</span><span class='line'>要创建这样的标签,一个 -a,-s 或 -m 选项都不用,直接给出标签名字即可:
</span><span class='line'><span class="nv">$ </span>git tag v1.4-lw
</span><span class='line'>
</span><span class='line'>// 验证标签
</span><span class='line'>// 可以使用 git tag -v <span class="o">[</span>tag-name<span class="o">]</span> <span class="o">(</span>译注:取 verify 的首字母<span class="o">)</span>的方式验证已经签署的标签。
</span><span class='line'>此命令会调用 GPG 来验证签名,所以你需要有签署者的公钥,存放在 keyring 中,才能验证:
</span><span class='line'><span class="nv">$ </span>git tag -v v1.4.2.1
</span><span class='line'>object 883653babd8ee7ea23e6a5c392bb739348b1eb61
</span><span class='line'><span class="nb">type </span>commit
</span><span class='line'>tag v1.4.2.1
</span><span class='line'>tagger Junio C Hamano &lt;junkio@cox.net&gt; 1158138501 -0700
</span><span class='line'>GIT 1.4.2.1
</span><span class='line'>Minor fixes since 1.4.2, including git-mv and git-http with alternates.
</span><span class='line'>gpg: Signature made Wed Sep 13 02:08:25 2006 PDT using DSA key ID F3119B9A
</span><span class='line'>gpg: Good signature from <span class="s2">&quot;Junio C Hamano &lt;junkio@cox.net&gt;&quot;</span>
</span><span class='line'>gpg: aka <span class="s2">&quot;[jpeg image of size 1513]&quot;</span>
</span><span class='line'>Primary key fingerprint: 3565 2A26 2040 E066 C9A7 4A7D C0C6 D9A4 F311 9B9A
</span><span class='line'>
</span><span class='line'>// 后期加注标签
</span><span class='line'>// 比如在下面展示的提交历史中:
</span><span class='line'><span class="nv">$ </span>git log --pretty<span class="o">=</span>oneline
</span><span class='line'>15027957951b64cf874c3557a0f3547bd83b3ff6 Merge branch <span class="s1">&#39;experiment&#39;</span>
</span><span class='line'>a6b4c97498bd301d84096da251c98a07c7723e65 beginning write support
</span><span class='line'>0d52aaab4479697da7686c15f77a3d64d9165190 one more thing
</span><span class='line'>6d52a271eda8725415634dd79daabbc4d9b6008e Merge branch <span class="s1">&#39;experiment&#39;</span>
</span><span class='line'>0b7434d86859cc7b8c3d5e1dddfed66ff742fcbc added a commit <span class="k">function </span>
</span><span class='line'>4682c3261057305bdd616e23b64b0857d832627b added a todo file
</span><span class='line'>166ae0c4d3f420721acbb115cc33848dfcc2121a started write support
</span><span class='line'>9fceb02d0ae598e95dc970b74767f19372d61af8 updated rakefile
</span><span class='line'>964f16d36dfccde844893cac5b347e7b3d44abbc commit the todo
</span><span class='line'>8a5cbc430f1a9c3d00faaeffd07798508422908a updated readme
</span><span class='line'>
</span><span class='line'>// 我们忘了在提交 “updated rakefile” 后为此项目打上版本号 v1.2,没关系,现在也能做。
</span><span class='line'>只要在打标 签的时候跟上对应提交对象的校验和<span class="o">(</span>或前几位字符<span class="o">)</span>即可:
</span><span class='line'><span class="nv">$ </span>git tag -a v1.2 9fceb02
</span><span class='line'>
</span><span class='line'>// 分享标签
</span><span class='line'>// 默认情况下,git push 并不会把标签传送到远端服务器上,只有通过显式命令才能分享标签到远端仓库。
</span><span class='line'>其命令格式如同推送分支,运行 git push origin <span class="o">[</span>tagname<span class="o">]</span> 即可:
</span><span class='line'><span class="nv">$ </span>git push origin v1.5
</span><span class='line'>Counting objects: 50, <span class="k">done</span>.
</span><span class='line'>Compressing objects: 100% <span class="o">(</span>38/38<span class="o">)</span>, <span class="k">done</span>. Writing objects: 100% <span class="o">(</span>44/44<span class="o">)</span>, 4.56 KiB, <span class="k">done</span>.
</span><span class='line'>Total 44 <span class="o">(</span>delta 18<span class="o">)</span>, reused 8 <span class="o">(</span>delta 1<span class="o">)</span>
</span><span class='line'>To git@github.com:schacon/simplegit.git
</span><span class='line'>* <span class="o">[</span>new tag<span class="o">]</span> v1.5 -&gt; v1.5
</span><span class='line'>
</span><span class='line'>// 如果要一次推送所有<span class="o">(</span>本地新增的<span class="o">)</span>标签上去,可以使用 --tags 选项:
</span><span class='line'><span class="nv">$ </span>git push origin --tags
</span></code></pre></td></tr></table></div></figure>


<h5>查看提交历史</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>// 在提交了若干更新之后,又或者克隆了某个项目,想回顾下提交历史,可以使用 git log 命令。
</span><span class='line'>
</span><span class='line'>// 我们常用 -p 选项展开显示每次提交的内容差异,用 -2 则仅显示最近的两次更新:
</span><span class='line'><span class="nv">$ </span>git log –p -2
</span><span class='line'>
</span><span class='line'>// 还有 许多摘要选项可以用,比如 --stat,仅显示简要的增改行数统计:
</span><span class='line'><span class="nv">$git</span> log --stat
</span><span class='line'>
</span><span class='line'>// 限制输出长度
</span><span class='line'>// 列出所有最近两周内的提交
</span><span class='line'><span class="nv">$ </span>git log --since<span class="o">=</span>2.weeks
</span></code></pre></td></tr></table></div></figure>


<h3>分布式工作流程</h3>

<p>在服务器上布暑好了Git，并建好代码仓库以后，团队成员就可以愉快地合作开发了。由于团队的规模不一样，工作流程也会略有区别，我们先通过最简单的私有的小型团队来掌握基本的流程，其他的情况也就容易理解了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>//一个私有项目,与你一起协作的还有另外一到两位开发者。这里说私有,是指源代码不公开,其他人无法访问项目仓库。
</span><span class='line'>
</span><span class='line'><span class="c"># John&#39;s Machine</span>
</span><span class='line'>// Step 1: 克隆一份项目代码到本地
</span><span class='line'><span class="nv">$ </span>git clone john@githost:simplegit.git
</span><span class='line'>Initialized empty Git repository in /home/john/simplegit/.git/ ...
</span><span class='line'>
</span><span class='line'>// Step 2: 打开项目，编辑，完成属于自己的任务
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>simplegit/
</span><span class='line'><span class="nv">$ </span>vim lib/simplegit.rb
</span><span class='line'>
</span><span class='line'>// Step 3:更新项目，因为在你完成任务的时间窗口中团队其他成员可能提交过代码
</span><span class='line'><span class="nv">$ </span>git fetch origin
</span><span class='line'>...
</span><span class='line'>From john@githost:simplegit
</span><span class='line'>+ 049d078...fbff5bc master -&gt; origin/master
</span><span class='line'>
</span><span class='line'>// Step 4:合并分支，将团队成员的代码和自己的代码合并到一起
</span><span class='line'><span class="nv">$ </span>git merge origin/master Merge made by recursive.
</span><span class='line'>TODO | 1 +
</span><span class='line'>1 files changed, 1 insertions<span class="o">(</span>+<span class="o">)</span>, 0 deletions<span class="o">(</span>-<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>// Step 5:合并分支冲突时
</span><span class='line'><span class="nv">$git</span> status
</span><span class='line'>
</span><span class='line'>index.html: needs merge
</span><span class='line'><span class="c"># # # # # # #</span>
</span><span class='line'>On branch master
</span><span class='line'>Changed but not updated:
</span><span class='line'><span class="o">(</span>use <span class="s2">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed<span class="o">)</span>
</span><span class='line'><span class="o">(</span>use <span class="s2">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes in working directory<span class="o">)</span>
</span><span class='line'>unmerged: index.html
</span><span class='line'>
</span><span class='line'>// 任何包含未解决冲突的文件都会以未合并<span class="o">(</span>unmerged<span class="o">)</span>状态列出。
</span><span class='line'>Git 会在有冲突的文件里加入标准的冲突 解决标记,可以通过它们来手工定位并解决这些冲突。
</span><span class='line'>可以看到此文件包含类似下面这样的部分:
</span><span class='line'><span class="o">&lt;&lt;&lt;&lt;&lt;&lt;</span>&lt; HEAD:index.html
</span><span class='line'>&lt;div <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;footer&quot;</span>&gt;contact : email.support@github.com&lt;/div&gt;
</span><span class='line'><span class="o">=======</span>
</span><span class='line'>&lt;div <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;footer&quot;</span>&gt;
</span><span class='line'>please contact us at support@github.com &lt;/div&gt;
</span><span class='line'>&gt;&gt;&gt;&gt;&gt;&gt;&gt; iss53:index.html
</span><span class='line'>
</span><span class='line'>// 可以看到 <span class="o">=======</span> 隔开的上半部分,是 HEAD<span class="o">(</span>即 master 分支,在运行 merge 命令时检出的分支<span class="o">)</span>中的内 容,
</span><span class='line'>下半部分是在 iss53 分支中的内容。解决冲突的办法无非是二者选其一或者由你亲自整合到一起。
</span><span class='line'>比如你可以通过把这段内容替换为下面这样来解决:
</span><span class='line'>&lt;div <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;footer&quot;</span>&gt;
</span><span class='line'>please contact us at email.support@github.com &lt;/div&gt;
</span><span class='line'>
</span><span class='line'>// Step 6:手动解决冲突，然后运行 git add 将把它们标记为已解决<span class="o">(</span>resolved<span class="o">)</span>,
</span><span class='line'>如果觉得满意了,并且确认所有冲突都已解决,也就是进入了缓存区,就可以用 git commit 来完成这次合并提交。
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>git commit -am <span class="s1">&#39;removed invalid default value&#39;</span>
</span><span class='line'><span class="o">[</span>master 738ee87<span class="o">]</span> removed invalid default value
</span><span class='line'>1 files changed, 1 insertions<span class="o">(</span>+<span class="o">)</span>, 1 deletions<span class="o">(</span>-<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>// Step 7:将完成的代码推送到服务器的代码仓库中
</span><span class='line'><span class="nv">$ </span>git push origin master
</span><span class='line'>...
</span><span class='line'>To jessica@githost:simplegit.git
</span><span class='line'>1edee6b..fbff5bc master -&gt; master
</span></code></pre></td></tr></table></div></figure>


<h4>Reference</h4>

<p><a href="http://git-scm.com/book/zh/v1">Pro Git</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(翻译)Variable-Sized Items in UICollectionView]]></title>
    <link href="http://DamianSheldon.github.io/blog/2014/11/04/variable-sized-items-in-uicollectionview/"/>
    <updated>2014-11-04T11:27:12+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/2014/11/04/variable-sized-items-in-uicollectionview</id>
    <content type="html"><![CDATA[<h3>基本训练</h3>

<p>我们以“Single View Application”为模板新建一个工程。在ViewController.xib上添加一个UICollectionView让它覆盖整个view。</p>

<p><img name="Variable-Sized_Items_in_UICollectionView01" src="http://DamianSheldon.github.io/images/Variable-Sized_Items_in_UICollectionView01.png" width="1110" height="783"></p>

<p>Collection View和它的祖父类似，有delegate和dataSource两个outlet,我们把它们连接到“File’s Owner”,这里的“File’s Owner”是ViewController类。这样Collection View的内容和交互就受ViewController控制。我们也需要一个outlet来引用Collection View,所以用Assistant editor增加一个。刚在ViewController.h中添加的outlet property可以是weak，因为作为ViewController的视图的子视图，它也会被充分的保留。</p>

<h3>单元格</h3>

<p>我们需要设计一个Cell原型来显示内容。如果你的Collection View是在View controller’s XIB ,你必须在先在代码中注册Cell才能使用。如果你是在Storyboard中新建的CollectionView，并在CollectionView的区域内创建的原型Cell,那么你就不需要注册Cell identifier了。因为我们并没有从Storyboard中开始，所以需要手动来创建。</p>

<p>我们在Interface Builder中创建一个原型Cell，设置它的背影为白色，添加一个UILabel，添加Label到父视图边缘的约束，分别是5 points的距离。因为我们想让Label的文字来决定它的尺寸，所以选中Label,然后从Editor menu中选择“Size to Fit Content”。后面我们会看到它是否会按照我们想像的那样工作。</p>

<p><img name="Variable-Sized_Items_in_UICollectionView02" src="http://DamianSheldon.github.io/images/Variable-Sized_Items_in_UICollectionView02.png" width="964" height="400"></p>

<p>我们设置Identifier为“TagCell”以便我们能在设计中引用。</p>

<p>这里我们遇到了第一个问题。如果你没有使用Storyboards,并没有办法让Collection View在相同的NIB文件中使用Collection View Cell。有两种可行的方法注册Cell:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="err">–</span> <span class="nl">registerClass:forCellWithReuseIdentifier:</span>
</span><span class='line'><span class="err">–</span> <span class="nl">registerNib:forCellWithReuseIdentifier:</span>
</span></code></pre></td></tr></table></div></figure>


<p>方法一为指定的Reuse identifier实例化某个特定的类，如果我们是通过代码来创建Cell的视图层级，我们应该使用这个方法；  <br/>
方法二需要一个NIB,而且NIB文件中只有Cell一个元素。在Storyboard中使用Collection Views避免了这个麻烦，这是它工作量更小的第二个重要原因。</p>

<p>为了解决这个问题，我们创建一个“empty Interface Builder Document”，命名为TagCollectionViewCell。感激零涕我们可以简单地CMD+X Cell设计从一个ViewController NIB中，然后CMD+V它到一个空的文档中。</p>

<p><img name="Variable-Sized_Items_in_UICollectionView03" src="http://DamianSheldon.github.io/images/Variable-Sized_Items_in_UICollectionView03.png" width="791" height="229"></p>

<p>下一步我们将试着注册Cell在Collection View中使用，并想看到显示一定数量的元素。</p>

<h3>注册设计的单元格</h3>

<p>任何时候我们想要一个标识符为“TagCell”的Cell都需要注册设计好的NIB文件，所以我们在ViewController.m文件的viewDidLoad中加入如下代码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">UINib</span> <span class="o">*</span><span class="n">cellNib</span> <span class="o">=</span> <span class="p">[</span><span class="n">UINib</span> <span class="nl">nibWithNibName:</span><span class="s">@&quot;TagCollectionViewCell&quot;</span> <span class="nl">bundle:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">collectionView</span> <span class="nl">registerNib:</span><span class="n">cellNib</span> <span class="nl">forCellWithReuseIdentifier:</span><span class="s">@&quot;TagCell&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们仅需要实现的更多方法属于UICollectionViewDataSource协议，这些方法确保单元格正确显示。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#pragma mark - UICollectionView</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nf">collectionView:</span><span class="p">(</span><span class="n">UICollectionView</span> <span class="o">*</span><span class="p">)</span><span class="nv">collectionView</span> <span class="nf">numberOfItemsInSection:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">section</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">return</span> <span class="mi">100</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">UICollectionViewCell</span> <span class="o">*</span><span class="p">)</span><span class="nf">collectionView:</span><span class="p">(</span><span class="n">UICollectionView</span> <span class="o">*</span><span class="p">)</span><span class="nv">collectionView</span> <span class="nf">cellForItemAtIndexPath:</span><span class="p">(</span><span class="n">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="nv">indexPath</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">UICollectionViewCell</span> <span class="o">*</span><span class="n">cell</span> <span class="o">=</span> <span class="p">[</span><span class="n">collectionView</span> <span class="nl">dequeueReusableCellWithReuseIdentifier:</span><span class="s">@&quot;TagCell&quot;</span> <span class="nl">forIndexPath:</span><span class="n">indexPath</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">return</span> <span class="n">cell</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在启动应用，我们看到100个元素全部是使用我们大概还没获奖的设计原型。</p>

<p><img name="Variable-Sized_Items_in_UICollectionView04" src="http://DamianSheldon.github.io/images/Variable-Sized_Items_in_UICollectionView04.png" width="396" height="744"></p>

<p>一眼就看出所有的元素都拥有相同的大小，准确的50x50 points。这是因为我们没有修改Interface Builder的默认值。</p>

<p><img name="Variable-Sized_Items_in_UICollectionView05" src="http://DamianSheldon.github.io/images/Variable-Sized_Items_in_UICollectionView05.png" width="261" height="273"></p>

<p>但是在我们为每个元素指定大小之前，让我们首先来完善一下我们的设计。我们移除白色的背影，新建一个TagCollectionViewCell类，并且将它指定为元素的类。</p>

<h3>漂亮的单元</h3>

<p>与其依赖iOS用单元的背影颜色填充整个矩形，我们想用一个圆角的矩形包围我们的标签。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">drawRect:</span><span class="p">(</span><span class="n">CGRect</span><span class="p">)</span><span class="nv">rect</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="c1">// inset by half line width to avoid cropping where line touches frame edges</span>
</span><span class='line'>   <span class="n">CGRect</span> <span class="n">insetRect</span> <span class="o">=</span> <span class="n">CGRectInset</span><span class="p">(</span><span class="n">rect</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">);</span>
</span><span class='line'>   <span class="n">UIBezierPath</span> <span class="o">*</span><span class="n">path</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIBezierPath</span> <span class="nl">bezierPathWithRoundedRect:</span><span class="n">insetRect</span> <span class="nl">cornerRadius:</span><span class="n">rect</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="o">/</span><span class="mf">2.0</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// white background</span>
</span><span class='line'>   <span class="p">[[</span><span class="n">UIColor</span> <span class="n">whiteColor</span><span class="p">]</span> <span class="n">setFill</span><span class="p">];</span>
</span><span class='line'>   <span class="p">[</span><span class="n">path</span> <span class="n">fill</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// red outline</span>
</span><span class='line'>   <span class="p">[[</span><span class="n">UIColor</span> <span class="n">redColor</span><span class="p">]</span> <span class="n">setStroke</span><span class="p">];</span>
</span><span class='line'>   <span class="p">[</span><span class="n">path</span> <span class="n">stroke</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意：你需要设置单元的contentMode为redraw,否则修改单元的大小不会触发重绘这个漂亮的背影。</p>

<p>结果看起来像下面这样，有部分黑色的背影发光渗透。注意我们需要轻微缩进一点再绘画轮廓，因为Quartz将裁剪红色圆圈靠近视图边界的部分。</p>

<p><img name="Variable-Sized_Items_in_UICollectionView06" src="http://DamianSheldon.github.io/images/Variable-Sized_Items_in_UICollectionView06.png" width="394" height="110"></p>

<p>下一步是让单元的大小适合现在标签的内容。</p>

<h3>逐个元素指定大小</h3>

<p>当然我们并不满足用1）一个静态值指定所有的元素大小，所以2）想让大小随我们单元的内容自动调整。还记得我们指定元素标签依靠文本大小来决定自身大小吗？视图的边缘距离标签的边缘是固定的5 points。因此如果有一种方法能得到元素的实际大小，那将十分酷。更酷的是如果我们能告诉collection view用这些值来指定元素的大小。</p>

<p>LLDB的一个快速测试表明元素返回一个-1，-1的固定内容大小值，这个未定义是一样的。我们在TagCollectionViewCell的头文件中为Label加一个outlet,以便我们能找到UILabel返回它们显示当前文本需要的大小。</p>

<p>因为我们知道约束四周的空白，我们把它们和Label的固定内容大小相加就得到了元素的大小。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// cache for margins configured via constraints in XIB</span>
</span><span class='line'><span class="k">static</span> <span class="n">CGSize</span> <span class="n">_extraMargins</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">TagCollectionViewCell</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">CGSize</span><span class="p">)</span><span class="nf">intrinsicContentSize</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">CGSize</span> <span class="n">size</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">label</span> <span class="n">intrinsicContentSize</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">if</span> <span class="p">(</span><span class="n">CGSizeEqualToSize</span><span class="p">(</span><span class="n">_extraMargins</span><span class="p">,</span> <span class="n">CGSizeZero</span><span class="p">))</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="c1">// quick and dirty: get extra margins from constraints</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">NSLayoutConstraint</span> <span class="o">*</span><span class="n">constraint</span> <span class="k">in</span> <span class="n">self</span><span class="p">.</span><span class="n">constraints</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="k">if</span> <span class="p">(</span><span class="n">constraint</span><span class="p">.</span><span class="n">firstAttribute</span> <span class="o">==</span> <span class="n">NSLayoutAttributeBottom</span> <span class="o">||</span> <span class="n">constraint</span><span class="p">.</span><span class="n">firstAttribute</span> <span class="o">==</span> <span class="n">NSLayoutAttributeTop</span><span class="p">)</span>
</span><span class='line'>         <span class="p">{</span>
</span><span class='line'>            <span class="c1">// vertical spacer</span>
</span><span class='line'>            <span class="n">_extraMargins</span><span class="p">.</span><span class="n">height</span> <span class="o">+=</span> <span class="p">[</span><span class="n">constraint</span> <span class="n">constant</span><span class="p">];</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>         <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">constraint</span><span class="p">.</span><span class="n">firstAttribute</span> <span class="o">==</span> <span class="n">NSLayoutAttributeLeading</span> <span class="o">||</span> <span class="n">constraint</span><span class="p">.</span><span class="n">firstAttribute</span> <span class="o">==</span> <span class="n">NSLayoutAttributeTrailing</span><span class="p">)</span>
</span><span class='line'>         <span class="p">{</span>
</span><span class='line'>            <span class="c1">// horizontal spacer</span>
</span><span class='line'>            <span class="n">_extraMargins</span><span class="p">.</span><span class="n">width</span> <span class="o">+=</span> <span class="p">[</span><span class="n">constraint</span> <span class="n">constant</span><span class="p">];</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// add to intrinsic content size of label</span>
</span><span class='line'>   <span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">+=</span> <span class="n">_extraMargins</span><span class="p">.</span><span class="n">width</span><span class="p">;</span>
</span><span class='line'>   <span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">+=</span> <span class="n">_extraMargins</span><span class="p">.</span><span class="n">height</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">return</span> <span class="n">size</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>该方法从我们在Interface Builder设置的约束中得到实际的留白宽度。它允许我们在IB中调整大小而不需要在代码中改变常量或宏定义。因为我们不打算修改任何约束，只是在方法第一次被调用时懒散的设置一个静态_extraMargins作为常量。</p>

<p>现在困难的部分是从Collection view中出列一个元素并得到大小。它之所以困难是因为方法会调用数据源的collectionView:cellForItemAtIndexPath:，还会调用collectionView:layout:sizeForItemAtIndexPath:方法。这里禁止我们从后一种方法中出列一个元素，否则会导致无限循环。</p>

<p>有些人从模型对象中得到数据，然后cell有一个类方法来计算需要的大小。然而这没有利用我们想要在Interface Builder中设置的约束。对于这个先有鸡还是先有蛋的问题，我能想到的最简便的方法是使用一个单独的元素作为模板，然后使用它新鲜出炉的intrinsicContentSize方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@implementation</span> <span class="nc">ViewController</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">TagCollectionViewCell</span> <span class="o">*</span><span class="n">_sizingCell</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">viewDidLoad</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">UINib</span> <span class="o">*</span><span class="n">cellNib</span> <span class="o">=</span> <span class="p">[</span><span class="n">UINib</span> <span class="nl">nibWithNibName:</span><span class="s">@&quot;TagCollectionViewCell&quot;</span> <span class="nl">bundle:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>   <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">collectionView</span> <span class="nl">registerNib:</span><span class="n">cellNib</span> <span class="nl">forCellWithReuseIdentifier:</span><span class="s">@&quot;TagCell&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// get a cell as template for sizing</span>
</span><span class='line'>   <span class="n">_sizingCell</span> <span class="o">=</span> <span class="p">[[</span><span class="n">cellNib</span> <span class="nl">instantiateWithOwner:</span><span class="nb">nil</span> <span class="nl">options:</span><span class="nb">nil</span><span class="p">]</span> <span class="nl">objectAtIndex:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark - UICollectionView</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nl">collectionView:</span><span class="p">(</span><span class="n">UICollectionView</span> <span class="o">*</span><span class="p">)</span><span class="n">collectionView</span> <span class="nl">numberOfItemsInSection:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="n">section</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">return</span> <span class="mi">100</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">_configureCell:</span><span class="p">(</span><span class="n">TagCollectionViewCell</span> <span class="o">*</span><span class="p">)</span><span class="n">cell</span> <span class="nl">forIndexPath:</span><span class="p">(</span><span class="n">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="n">indexPath</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">if</span> <span class="p">(</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="o">%</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="n">cell</span><span class="p">.</span><span class="n">label</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">@&quot;A&quot;</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>   <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="o">%</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="n">cell</span><span class="p">.</span><span class="n">label</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">@&quot;longer&quot;</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>   <span class="k">else</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="n">cell</span><span class="p">.</span><span class="n">label</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">@&quot;much longer&quot;</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="n">UICollectionViewCell</span> <span class="o">*</span><span class="p">)</span><span class="nl">collectionView:</span><span class="p">(</span><span class="n">UICollectionView</span> <span class="o">*</span><span class="p">)</span><span class="n">collectionView</span> <span class="nl">cellForItemAtIndexPath:</span><span class="p">(</span><span class="n">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="n">indexPath</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">TagCollectionViewCell</span> <span class="o">*</span><span class="n">cell</span> <span class="o">=</span> <span class="p">[</span><span class="n">collectionView</span> <span class="nl">dequeueReusableCellWithReuseIdentifier:</span><span class="s">@&quot;TagCell&quot;</span> <span class="nl">forIndexPath:</span><span class="n">indexPath</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>   <span class="p">[</span><span class="n">self</span> <span class="nl">_configureCell:</span><span class="n">cell</span> <span class="nl">forIndexPath:</span><span class="n">indexPath</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">return</span> <span class="n">cell</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="n">CGSize</span><span class="p">)</span><span class="nl">collectionView:</span><span class="p">(</span><span class="n">UICollectionView</span> <span class="o">*</span><span class="p">)</span><span class="n">collectionView</span> <span class="nl">layout:</span><span class="p">(</span><span class="n">UICollectionViewLayout</span><span class="o">*</span><span class="p">)</span><span class="n">collectionViewLayout</span> <span class="nl">sizeForItemAtIndexPath:</span><span class="p">(</span><span class="n">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="n">indexPath</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="p">[</span><span class="n">self</span> <span class="nl">_configureCell:</span><span class="n">_sizingCell</span> <span class="nl">forIndexPath:</span><span class="n">indexPath</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">return</span> <span class="p">[</span><span class="n">_sizingCell</span> <span class="n">intrinsicContentSize</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>为Collection view注册了NIB之后，我创建了个元素实例并赋值给了我的实例变量 <em>sizingCell。为了得到实际元素单元，我们有一个 </em>configureCell:forIndexPath:方法，它作用于出列可复用的实例上。为了计算大小，我们应用这个相同的方法到我们的sizing cell,以便我们得到正确的intrinsicContentSize。</p>

<h3>Once More With Auto Layout</h3>

<p>当我救助我的推友们关于如何得到基于约束的元素的大小，<a href="https://twitter.com/pilky">Martin Pilkington</a>迅速将我指向-systemLayoutSizeFittingSize:。一开始在应用中失败了，得到的全是{0,0}。但是当我写完上述解决办法，沉下心来又试了一次。</p>

<p>这一次它正常工作了。所需要做的是替换下面方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">CGSize</span><span class="p">)</span><span class="nf">collectionView:</span><span class="p">(</span><span class="n">UICollectionView</span> <span class="o">*</span><span class="p">)</span><span class="nv">collectionView</span> <span class="nf">layout:</span><span class="p">(</span><span class="n">UICollectionViewLayout</span><span class="o">*</span><span class="p">)</span><span class="nv">collectionViewLayout</span> <span class="nf">sizeForItemAtIndexPath:</span><span class="p">(</span><span class="n">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="nv">indexPath</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="p">[</span><span class="n">self</span> <span class="nl">_configureCell:</span><span class="n">_sizingCell</span> <span class="nl">forIndexPath:</span><span class="n">indexPath</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">return</span> <span class="p">[</span><span class="n">_sizingCell</span> <span class="nl">systemLayoutSizeFittingSize:</span><span class="n">UILayoutFittingCompressedSize</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个方法决定一个最接近传入大小的布局大小。两个标准值都可行，UILayoutFittingCompressedSize得到基于布局的最小大小，UILayoutFittingExpandedSize得到最大大小。</p>

<p>有了它我们可以很愉快地利用我们之前在intrinsicContentSize做的工作。我们也可以完全使用布局约束来进一步限制元素各个部分的大小。例如说：你可能想要短标签不要窄于某个宽度；如果某个标签太长了就让它截断。</p>

<p><img name="Variable-Sized_Items_in_UICollectionView07" src="http://DamianSheldon.github.io/images/Variable-Sized_Items_in_UICollectionView07.png" width="394" height="214"></p>

<p>结果如下，证明确实是我们想要的。</p>

<p><img name="Variable-Sized_Items_in_UICollectionView08" src="http://DamianSheldon.github.io/images/Variable-Sized_Items_in_UICollectionView08.png" width="396" height="744"></p>

<p>是不是很酷？让我们再强调一次：你不需要在Cell方法中计算大小，本质是重复了auto layout将要执行的计算。你只需要向系统要。</p>

<h3>总结</h3>

<p>在这篇博文中，我向你展示了如何为Collection view创建一个来自NIB的Cell。备选方法是在Storyboard中使用Collection view，它在某些方面更方便。这些Cell没有放在单独的XIB文件中，但是是在Collection view的结构层级中。探索如何得到一个sizing cell就作为练习留给读者了。</p>

<p>我们发现UILabel暴露一个intrinsicContentSize方法十分方便，如果你在Interface Builder指定了auto layout，它会用来计算大小。我们探索了一种方法，它使用一个cell实例作为模板来决定最佳的元素大小。然后我们更进一步运用了一个方法告诉我们基于布局约束和固定内容大小的完美尺寸。</p>

<p>例子的代码放在GitHub的<a href="https://github.com/Cocoanetics/Examples">Cocoanetics Examples</a> 仓库中。</p>

<h3>原文</h3>

<p><a href="http://www.cocoanetics.com/2013/08/variable-sized-items-in-uicollectionview/">http://www.cocoanetics.com/2013/08/variable-sized-items-in-uicollectionview/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iTunes 歌曲信息乱码的解决办法]]></title>
    <link href="http://DamianSheldon.github.io/blog/2014/11/03/music-import-from-windows-text-display-garbled-in-itunes/"/>
    <updated>2014-11-03T10:23:29+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/2014/11/03/music-import-from-windows-text-display-garbled-in-itunes</id>
    <content type="html"><![CDATA[<p>从Windows迁移过来的歌曲在iTunes中乱码显示，按照Apple support里面的方法添加语言并没有解决问题，因此，我推测问题应该不是出在这。经过查找，发现问题是由于歌曲的ID3中的Enconding by字段的影响，也就是说，编码格式不一样。解决办法： <br/>
1)下载<a href="https://bitbucket.org/lazka/mutagen">Mutagen</a>; <br/>
2)安装Mutagen;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>path_to_mutagen/setup.py build
</span><span class='line'><span class="nv">$ </span>sudo path_to_mutagen/setup.py install
</span></code></pre></td></tr></table></div></figure>


<p>3)先将所有歌曲备份，防止操作出错；<br/>
4)将目录下的所有MP3歌曲的编码转成Unicode;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$find</span> . -iname <span class="s2">&quot;*.mp3&quot;</span> -execdir mid3iconv -e gbk <span class="o">{}</span> <span class="se">\;</span>
</span></code></pre></td></tr></table></div></figure>


<p>5)将iTunes中的音乐清空，重新添加。</p>

<p>Reference:<a href="http://floss.zoomquiet.io/data/20070510235547/index.html">http://floss.zoomquiet.io/data/20070510235547/index.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Auto Layout]]></title>
    <link href="http://DamianSheldon.github.io/blog/2014/10/19/auto-layout/"/>
    <updated>2014-10-19T17:43:12+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/2014/10/19/auto-layout</id>
    <content type="html"><![CDATA[<h3>前言</h3>

<p>Auto Layout 早在 iOS 6时就引入了，但由于之前 iPhone 的尺寸不多，而且宽度是一样的; 另一方面 Auto Layout增加了学习成本，大部分开发者仍然使用传统坐标布局做屏幕适配。但是随着 iPhone 6, 6 Plus 大屏 iPhone的发布，继续使用坐标布局做适配显得力不从心了，而且从 Apple 的动作来看，Auto Layout是未来的必然趋势，因此，我们很有必要掌握它。</p>

<h3>Auto Layout 是什么</h3>

<p>  Auto Layout is a system that lets you lay out your app’s user interface by creating a mathematical description of the relationships between the elements. —Apple<br/>
  Auto Layout是一个通过创建元素之间关系的数学描述来布局你应用的用户界面的系统。</p>

<p>  You define these relationships in terms of constraints either on individual elements, or between sets of elements.<br/>
  你可以在单个元素，或一系列元素间以约束的形式来定义这些关系。</p>

<h4>Constraint &mdash; 约束</h4>

<p>  约束是 Auto Layout 的基石，它表达着界面元素布局的规则。我们可以把约束想像成人类语言表述的数学形式。例如，设计师可能会说“这个按钮的左边缘应该与容器视图的左边缘有20个点的偏移。”，它可以转化为button.left = (container.left + 20)，进而抽象出更一般的表达，y = m*x + b，这就是约束。这里的 y 和 x 是View的attributes，m 和 b 是浮点值。<br/>
  * attributes 有left, right, top, bottom, leading, trailing, width, height, centerX, centerY 和 baseline； <br/>
  * b 实际上是 Constant value, 是物理大小的偏移；<br/>
  * =，是 Relation, Auto Layout 支持 &lt;=, = , >= 三种关系；<br/>
  * Priority level, 约束还支持优先级，优先级高的先满足。</p>

<h4>Intrinsic Content Size</h4>

<p>  Intrinsic Content Size 是 Auto Layout 中另一个重要概念，身处视图层级末端的视图会为显示特定内容期望得到一个大小，它就叫做Intrinsic Content Size。</p>

<h3>如何使用Auto Layout</h3>

<p>  Auto Layout 的使用方法有两种：一是通过 Interface Builder, 二是 Code。</p>

<h3>Tips</h3>

<p>1,在实际的项目中，由于3.5 到5.5 Inch跨度还是挺大，建议在 ViewController 的 View 上面加一个 UIScrollView， 然后再在 ScrollView 上加一个 View， 其他的视图都布局在它上面，这样布局会容易点。</p>

<p>2,Xcode 自带布局效果预览的功能，可以按下面的步骤最大化预览编辑窗口查看在各个屏幕上的布局效果：<br/>
  * 在工程导航面板中单击 storyboard/XIB 文件，使它在 Xcode 的主窗口中打开；<br/>
  * 双击上述文件使它在新的窗口中打开； <br/>
  * 将新的窗口移动到新的桌面上，最大化它； <br/>
  * 单击下新窗口，确保它是输入焦点，然后按 Option+Command+Enter 在窗口中打开 assistant editor；  <br/>
  * 在 assistant editor 头部选中 Automatic 展开下拉菜单，在下拉菜单中选中 Preview, 可以在 Preview 中一次些查看多个布局效果图，省的来回启动模拟器。</p>

<h3>Demo</h3>

<p><a href="https://github.com/DamianSheldon/AutoLayout">Auto Layout Demo</a></p>

<h3>Reference</h3>

<p>Auto Layout Guide<br/>
WWDC2012 session 202 – Introduction to Auto Layout for iOS and OS X<br/>
WWDC2012 session 228 – Best Practices for Mastering Auto Layout<br/>
WWDC2012 session 232 – Auto Layout by Example<br/>
<a href="http://www.raywenderlich.com/50317/beginning-auto-layout-tutorial-in-ios-7-part-1  ">http://www.raywenderlich.com/50317/beginning-auto-layout-tutorial-in-ios-7-part-1  </a>
<a href="http://www.raywenderlich.com/50319/beginning-auto-layout-tutorial-in-ios-7-part-2">http://www.raywenderlich.com/50319/beginning-auto-layout-tutorial-in-ios-7-part-2</a>  <br/>
<a href="http://objccn.io/issue-3-5/">http://objccn.io/issue-3-5/</a>  <br/>
<a href="http://studentdeng.github.io/blog/2014/06/13/auto-layout/">http://studentdeng.github.io/blog/2014/06/13/auto-layout/</a>  <br/>
<a href="http://www.onevcat.com/2012/09/autoayout/">http://www.onevcat.com/2012/09/autoayout/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Development--Certificates, Provisioning Profiles]]></title>
    <link href="http://DamianSheldon.github.io/blog/2014/10/09/ios-development-certificates/"/>
    <updated>2014-10-09T16:24:09+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/2014/10/09/ios-development-certificates</id>
    <content type="html"><![CDATA[<p>iOS App开发过程的真机调试和开发完成的发布要用合法的 Signing Identity 进行签名，并且要制作相应的Provising Profile。</p>

<p><img name="LaunchApp" src="http://DamianSheldon.github.io/images/LaunchApp.png" width="697" height="573"></p>

<p>开发过程的真机调试需要：</p>

<pre><code>Private Key -- 私钥
iPhone Development Certificate -- 开发证书
Development Provisioning profile
</code></pre>

<p>发布到 App Store 需要：</p>

<pre><code>私钥
iPhone Distribution Certificate
App Store Distribution Provisioning profile
</code></pre>

<p>通过 Ad Hoc 发布需要：</p>

<pre><code>私钥
iPhone Distribution Certificate
Ad Hoc Distribution Provisioning profile
</code></pre>

<h3>Private Key, Certificate, Provisioning Profile 的作用</h3>

<p>Private Key &mdash;私钥， 在iOS App 开发过程中，Xcode用它来签署应用。</p>

<p>Certificate &mdash;证书，它包含公钥，用来认证已签名的程序，通过认证来确定应用的来源是可信任的，并且代码是完整的， 未经修改的。</p>

<p><img name="Certificate" src="http://DamianSheldon.github.io/images/Certificate.png" width="696" height="471"> </p>

<p>Provisioning Profile &mdash;供应配置文件，它包含证书， App ID, 设备信息，它决定Xcode用哪个证书/私钥组合来签署程序, 开发设备也通过它来决定如何认证安装在设备上的程序。</p>

<p><img name="ProvisioningProfile" src="http://DamianSheldon.github.io/images/ProvisioningProfile.png" width="618" height="377"></p>

<h3>Private Key, Certificate, Provisioning Profile 的制作过程</h3>

<p>使用KeyChain申请 Certificate Signing Request (CSR)，这个过程就能生成代码签名的公、私钥对，私钥会保存在KeyChain中，公钥则包含在Certificate中。</p>

<p>Provisioning Profile的制作要复杂些，它要包含App 相应的Certificate， App ID, Development Provision Profile 还会包含 Device 信息。</p>

<h3>Tips</h3>

<p>团队开发时，我们可以通过邮件等方式分发Private Key，这样只需要制作一次 Private Key, Certificate, Provisioning Profile。</p>

<p>Xcode3.2.3预发布版本加入了新功能Team Provisioning Profile,它包含一个Wildcard App ID(*, 匹配所有应用程序)，Team中所有的Development Certificates和所有开发设备信息，增加新设备后，Xcode会自动更新Team Provisioning Profile, 因此， 团队成员可以通过设置Xcode的Provisioning Profile为Team Provisioning Profile，从而可以在所有的开发设备上调试应用程序。</p>

<p><img name="TeamProvisioningProfile" src="http://DamianSheldon.github.io/images/TeamProvisioningProfile.png" width="712" height="406">  </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Mac OSX Mavericks上安装和配置Openfire]]></title>
    <link href="http://DamianSheldon.github.io/blog/2014/09/11/install-and-configure-openfire-on-mac-osx-mavericks/"/>
    <updated>2014-09-11T09:15:32+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/2014/09/11/install-and-configure-openfire-on-mac-osx-mavericks</id>
    <content type="html"><![CDATA[<h3>安装</h3>

<p>  Openfire的官方安装文档并没有详细说明如何在Mac OSX上安装。经过查找，它安装的路径在/usr/local下面，需要更改下它的所有者和用户组，并且openfire.sh也要加上可执行属性。</p>

<p>  常见问题：用浏览器打开localhost:9090，报错。<br/>
  解决办法：查看openfire的日志发现是因为端口被占用了，使用sudo lsof -i:9090命令，查看占用端口的程序，用kill -9 pid，终止它们，通常是安装完openfire后，它默认以root的权限启动了一个副本。再次重启openfire，应该可以正常运行了。</p>

<h3>配置</h3>

<p>   配置时需要注意，创建用户时的username，只需填写名字即可，不需要加上@domainname,否则客户端会一直提示密码不正确。查找了很久原因，才知道是这么回事。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Core Animation 笔记]]></title>
    <link href="http://DamianSheldon.github.io/blog/2014/09/03/core-animation-bi-ji/"/>
    <updated>2014-09-03T09:59:58+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/2014/09/03/core-animation-bi-ji</id>
    <content type="html"><![CDATA[<h2>Core Animation介绍</h2>

<blockquote><p>Core Animation is a graphics rendering and animation infrastructure available on both iOS and OS X that you use to animate the views and other visual elements of your app. &mdash; Apple</p></blockquote>

<p>Core Animation是iOS和OS X上的图形渲染和动画的基础，你可以用它为视图以及应用的其他可见元素加上动画。</p>

<h2>什么时候使用Core Animation?</h2>

<blockquote><p>In places where you want to perform more sophisticated animations, or animations not supported by the UIView class, you can use Core Animation and the view’s underlying layer to create the animation. Because view and layer objects are intricately linked together, changes to a view’s layer affect the view itself.</p></blockquote>

<p>在你想要执行更加复杂的动画，或者UIView类不支持的动画时，你可以使用Core Animation和视图底下的layer去创建动画。因为view和layer复杂地联系在一起，改变视图的layer会影响视图本身。</p>

<p>UIView内置可动画的属性如下表：</p>

<table>
<thead>
<tr>
<th></th>
<th align="center"> Property </th>
<th align="left"> Changes you can make                                                                                       </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="center"> frame    </td>
<td align="left"> Modify this property to change the view’s size and position relative to its superview’s coordinate system. </td>
</tr>
<tr>
<td></td>
<td align="center"> bounds   </td>
<td align="left"> Modify this property to change the view’s size. </td>
</tr>
<tr>
<td></td>
<td align="center"> center   </td>
<td align="left"> Modify this property to change the view’s position relative to its superview’s coordinate system. </td>
</tr>
<tr>
<td></td>
<td align="center"> transform</td>
<td align="left"> Modify this property to scale, rotate, or translate the view relative to its center point. </td>
</tr>
<tr>
<td></td>
<td align="center"> alpha    </td>
<td align="left"> Modify this property to gradually change the transparency of the view. </td>
</tr>
<tr>
<td></td>
<td align="center"> backgroundColor </td>
<td align="left"> Modify this property to change the view’s background color. </td>
</tr>
<tr>
<td></td>
<td align="center"> contentStretch </td>
<td align="left"> Modify this property to change the way the view’s contents are stretched to fill the available space. </td>
</tr>
</tbody>
</table>


<h2>如何使用Core Animation?</h2>

<p>Core Animation提供了不少类供我们在应用中使用，下图反映了这些类的关系：</p>

<div style="text-align:center" markdown="1">

<img name="animations_info_2x" src="http://DamianSheldon.github.io/images/animations_info_2x.png" width="552" height="446">  

</div>


<ul>
<li>CAAnimation是所有动画子类的抽象类。CAAnimation实现了CAMediaTiming协议，它为动画提供duration, speed和repeat count。CAAnimation还实现了CAAction协议，协议提供标准的方法为开始一个动画去响应由layer触发的动作。</li>
</ul>


<p>CAAnimation类还定义了一个动画的timing作为CAMediaTimingFunction的实例。timing函数像简单的Bezier曲线那样描述动画的步调。线性timing function指定动画在整个动画周期内的步调是一致,而ease-in timing function导致动画在开始时会加速。</p>

<ul>
<li><p>CAPropertyAnimation是CAAnimation的一个抽象子类，它为指定key path去动画layer属性提供支持。</p></li>
<li><p>CABasicAnimation是CAPropertyAnimation的子类，它为layer的属性提供简单的插值。</p></li>
<li><p>CAKeyframeAnimation(CAPropertyAnimation的子类)提供关键帧动画支持。你指定要动画的layer属性的key path,数组中的值代表动画每个阶段的值，就像一个包含key frame time和timing function的数组。当动画运行时，数组中的值依次用来插值。</p></li>
<li><p>CATransition提供可以影响整个layer内容的变换效果。当动画时它褪色，推出，或显示layer的内容。在OS X上，股票变化效果可以通过提供你自定义的Core Image filters来扩展。</p></li>
<li><p>CAAnimationGroup允许一个数组的动画对象成一组，同时运行。</p></li>
</ul>


<p>从上述介绍来看，我们日常使用Core Animation就主要和CABasicAnimation, CAKeyframeAnimation, CATransition以及CAAnimationGroup打交道了。在使用它们之前，我们要掌握一些基础知识。</p>

<h3>Core Animation 基础</h3>

<p>Core Animation本身不是绘画系统。它是在硬件中合成和操作你应用内容的基础。这个基础的核心是layer对象，它用来管理和操作你应用的内容。layer捕获你的内容到一个bitmap中，这样它很容易被图形硬件操作。在大多数应用中，layers是视图管理内容的一种方法，但是你也可以根据你的需要创建单独的layer。</p>

<h4>Layer提供绘图和动画的基础</h4>

<p>Layer对象被组织在三维空间的二维表面上并且是你和Core Animation任何交互的核心。像视图，layer管理着它们表面关于几何位置，内容，和可视属性的信息。和视图不同，layer不定义他们自己的外观。layer仅仅管理围绕位图的状态信息。位图自己可以是视图绘制自身的结果，或者是你指定的图片。因为这个原因，你在应用中使用的主图层被认为是模型对象，因为他们主要管理数据。记住这个注解很重要，因为它影响动画的行为。</p>

<h5>基于图层的绘画模型</h5>

<p>你应用中的多数图层并不做任何最终的绘画。相反，图层捕获你应用提供的内容并将它们缓存在位图中，它们有时官能称为后备存储。当你随后改变图层的属性时，你所要做的是改变相应图层的状态信息。当改变触发动画，Core Animation传递图层的位图和状态信息到图形硬件，它用新的信息来渲染位图，像图1-1展示的的那样。在硬件上操作位图可以比软件得到更快的动画。</p>

<p>图1-1，Core Animation是如何绘制内容的。</p>

<div style="text-align:center" markdown="1">
<img name="basics_layer_rendering_2x" src="http://DamianSheldon.github.io/images/basics_layer_rendering_2x.png" width="722" height="270">  
</div>


<p>因为它是操作一张静态位图，所以基于图层的绘画和传统的基于视图的绘画技术有很大的不同。使用基于视图的绘画，视图自身的改变会导致视图的drawRect:方法被调用，它用新的参数重绘内容。但是这种绘画方式十分昂贵，因为它在主线程上用CPU完成的。Core Animation避免了这些开消通过尽可能的在硬件上操作缓存的位图来获得相同或相类似的效果。</p>

<p>虽然Core Animation尽可能的使用缓存的内容，你的应用仍然必须提供初始内容并不停的更新它。有很多方法为你应用的图层对象提供内容，这会在Providing a Layer&rsquo;s Contendts中详细描述。</p>

<h5>基于图层的动画</h5>

<p>图层对象的数据和状态信息是解藕来自屏幕图层内容的可视表示。这种解藕给Core Animation一种方法去干预自己并产生从旧状态值到新状态值的动画。例如，改变图层的位置属性导致Core Animation把图层从当前位置移动到新指定的位置。类似其他属性的改变产生合适的动画。图1-2示例了一些你可以对图层应用的动画。触发动画的图层属性列表，见Animatable Properties。</p>

<p>图1-2 你可以应用到图层的动画实例。</p>

<div style="text-align:center" markdown="1">

<img name="basics_animation_types_2x" src="http://DamianSheldon.github.io/images/basics_animation_types_2x.png" width="627" height="402">

</div>


<p>在动画的过程中,Core Animation在硬件上进行一帧一帧绘画的所有工作。你所要做的是指定动画的起点和终点，让Core Animation做剩下的所有工作。你也可以按需要指定自定义的定时信息和动画参数。而且，如果你不提供，Core Animation会提供合适的默认值。</p>

<h4>图层树反映动画状态的不同方面</h4>

<p>应用使用Core Animation拥有3套图层对象。每套图层在让你应用的内容出现在屏幕上均扮演不同的角色:</p>

<ul>
<li><p>模型图层树（或简称图层树）上的对象是应用交互最多的。树上的模型对象存储着任何动画的目标值。任何时候你改变一个图层的属性，你就使用其中的一个对象。</p></li>
<li><p>表示树上对象包含任何动画的过程值。它不仅包含动画的目标值，还反映屏幕上的当前值。你永远不应该修改这树上的对象。作为替代，你使用这些对象读取当前动画值，也许创建动画开始于某个值。</p></li>
<li><p>渲染树执行最终的动画，它对Core Animation是私有的。</p></li>
</ul>


<p>每套图层对象都被组织成层级结构，就像应用的视图。实际上，对使能了所有视图的图层的应用，每棵树的结构都和视图的层级准备对应。但是，应用也可增加图层对象，图层并不需要和视图中的图层层级相关联。你也许会在优化你应用的内容表现的情境下这么做，它不需要叠加在视图上。图1-9展示了一个简单应用的图层分解。示例中的窗口包含一个内容视图，它自身包含一个按钮视图和两个单独的图层对象。每个视图都有相应的图层对象，它们形成图层层级。</p>

<p>图1-9 窗口关联的图层</p>

<div style="text-align:center" markdown="1">

<img name="sublayer_hierarchy_2x" src="http://DamianSheldon.github.io/images/sublayer_hierarchy_2x.png" width="626" height="380" >

</div>


<p>图层树上的每一个对象，表示树和渲染树上都有相对应的对象，就像图1-10看到的那样。前面提到过，应用主要和图层树上的对象交互，但是有时也会访问表示树上的对象。特别的，访问图层树对象的<strong>presentationLayer</strong>属性可以返回表示树上相应对象。你也许会想访问这些对象去获取动画运行中的当前属性值。</p>

<p>图1-10 窗口的图层树</p>

<div style="text-align:center" markdown="1">

<img name="sublayer_hierarchies_2x" src="http://DamianSheldon.github.io/images/sublayer_hierarchies_2x.png" width="712" height="560" >

</div>


<p>重要提醒：你应该只在动画运行中去访问表示树的对象。当动画在运行中，表示树包含出现在屏幕上的图层的瞬时值。这个行为和图层树是不同的，它只反映你代码设置的最终值，等于动画的最终状态。</p>

<h4>图层和视图之间的关系</h4>

<p>图层不是用来替代你应用的视图的，你不能单独基于图层创建可视界面。图层为你的视图提供基础设施。特别地，图层让绘画更容易和高效，动画视图内容时维持高帧率。然而，有很多事情图层是做不了的。图层不处理事件，绘画内容，参与响应链，还有其他很多事情。出于这个原因，每个应用仍然要有一个或多个视图来处理这种交互。</p>

<p>在iOS中，每个视图都已备份一个相应的图层对象，但是在OS X中，你必须决定哪些视图应该拥有图层。OS X v10.8及以后的版本，为你所有的视图增加图层可能是有意义的。然而，这么做不是必须的，你仍然可以在叠加到视图是不需要的地方禁止图层。图层某种程度上会增加你应用的内存使用，但是它的好处通常会多于坏处，所以在禁用图层之前测试应用的性能是最好的方法。</p>

<p>当你为视图使能了图层支持，你创建的就是所谓的图层后备视图。在图层后备视图中，创建底层的图层对象和保持图层与视图同步是系统的责任。所有的iOS视图以及大多数OS X视图都是图层后备视图。然而，在OS X中，你也可以创建图层托管视图，它是自己为自己提供图层的视图。对于图层托管视图，AppKit提供了便利化的方法去管理图层，并不修改它来响应视图改变。</p>

<p>Note:对于图层后备视图，推荐你任何时候都优先操作视图而不是图层。在iOS中，视图仅仅是图层外面的轻薄包装，所以通常你对图层的操作是能正常工作的。<strong>但是iOS和OS X中都存在操作图层来代替视图时也许不能得到期望结果的地方。</strong>任何可能之处，本文档都会指出这些陷阱并且尝试提供方法帮助你处理它们。</p>

<p><strong>都有哪些地方呢？</strong></p>

<p>除了关联你视图的图层，你也可以创建没有相应视图的图层对象。你可以将这些单独图层嵌入到你应用的其他图层中，包括那些有关联视图的图层。通常使用单独图层作为特定优化路径的一部分。例如，如果你想在多个地方使用同一张图片，你可以加载一次这张图片，把它和多个单独图层对象关联起来，然后把这些对象回到图层树上。每个图层都引用原图而不是在内存中创建自己的副本。</p>

<h3>图层动画</h3>

<p>1)图层本身属性的动画可以通过CABasicAnimation和CAKeyframeAnimation添加；  <br/>
2)图层自定义属性动画可以参看<a href="http://objccn.io/issue-12-2/">Layer 中自定义属性的动画</a>。</p>

<h3>Reference</h3>

<p>Core Animation Programing Guide <br/>
动画解释(<a href="http://objccn.io/issue-12-1/">http://objccn.io/issue-12-1/</a>)  <br/>
Layer 中自定义属性的动画(<a href="http://objccn.io/issue-12-2/">http://objccn.io/issue-12-2/</a>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS App 开发遇到的问题]]></title>
    <link href="http://DamianSheldon.github.io/blog/2014/08/25/gai-bian-uiviewde-frameshi-yu-dao-de-wen-ti/"/>
    <updated>2014-08-25T17:09:49+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/2014/08/25/gai-bian-uiviewde-frameshi-yu-dao-de-wen-ti</id>
    <content type="html"><![CDATA[<p>  问题描述：Storyboard中的ViewController上添加一个自定义的view,声明为IBOutlet然后用代码改变view的Frame,打印输出Frame的值确实改变了，但是模拟器上的视图的Frame还是没有改变。</p>

<p>  解决办法：Google找到Stackoverflow上有人说是选中了Auto layout的原因，取消之后确实生效了。PS:但是不知道问题的原因是什么。</p>

<p>Reference:<br/>
o <a href="http://stackoverflow.com/questions/18263359/setting-the-frame-of-an-uiview-does-not-work">http://stackoverflow.com/questions/18263359/setting-the-frame-of-an-uiview-does-not-work</a></p>

<p>问题描述：在switch语句中，如果在case中要定义变量的话要加上大括号。</p>

<p>原因：Case statements are only &lsquo;labels&rsquo;. This means the compiler will interpret this as a jump directly to the label.The problem here is one of scope. Your curly brackets define the scope as everything inside the &lsquo;switch&rsquo; statement. This means that you are left with a scope where a jump will be performed further into the code skipping the initialization. The correct way to handle this is to define a scope specific to that case statement and define your variable within it.</p>

<p>Reference:<a href="http://stackoverflow.com/questions/92396/why-cant-variables-be-declared-in-a-switch-statement/92439#92439">http://stackoverflow.com/questions/92396/why-cant-variables-be-declared-in-a-switch-statement/92439#92439</a></p>

<p>问题描述：创建Group style的UITalbeView的顶端有很大一块空白。</p>

<p>解决办法：YouStoryboard.storyboard > YouViewController > Attributes inspector > Uncheck &ndash; Adjust scroll view insets</p>

<p>Reference:<a href="http://stackoverflow.com/questions/18880341/why-is-there-extra-padding-at-the-top-of-my-uitableview-with-style-uitableviewst">http://stackoverflow.com/questions/18880341/why-is-there-extra-padding-at-the-top-of-my-uitableview-with-style-uitableviewst</a></p>

<p>问题描述：SVN更新Cocoapods管理的第三方包的Xcode工程报错。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>A  +  C Pods
</span><span class='line'>&gt;   <span class="nb">local </span>edit, incoming delete upon update
</span></code></pre></td></tr></table></div></figure>


<p>解决办法：svn revert &mdash;depth infinity Pods</p>

<p>Reference:<a href="http://stackoverflow.com/questions/4317973/svn-how-to-resolve-local-edit-incoming-delete-upon-update-message">http://stackoverflow.com/questions/4317973/svn-how-to-resolve-local-edit-incoming-delete-upon-update-message</a></p>

<p>问题描述：*** Terminating app due to uncaught exception &lsquo;NSInternalInconsistencyException&rsquo;, reason: &lsquo;&ndash;[UIViewController _loadViewFromNibNamed:bundle:] loaded the &ldquo;loc&rdquo; nib but the view outlet was not set.&rsquo;</p>

<p>解决办法：从输出的日志来看，是说 view 没有设置，事实也确实如此。我先创建了 UIViewController 类文件，然后再创建一个空的同名 xib 文件，我从 Object Library 中拉了一个 UIViewController，问题就出在这里，我应该拉一个 UIView ，并将 File&rsquo;s Owner 设置成正确的类名，最后将 view outlet 联接起来。所以，如果想用 xib 创建 UIViewController，建议在创建类的时候勾选创建相应的 Xib 文件，让 Xcode 做好这些工作。</p>

<p>Reference:<a href="http://www.cnblogs.com/tivonstone/archive/2012/04/20/2460116.html">http://www.cnblogs.com/tivonstone/archive/2012/04/20/2460116.html</a></p>

<p>问题描述：设置swipe gesture的direction为UISwipeGestureRecognizerDirectionLeft | UISwipeGestureRecognizerDirectionRight但是只识别一个方向。</p>

<p>解决办法：为每个方向单独创建一个UISwipeGestureRecognizer。</p>

<p>Reference:<a href="http://stackoverflow.com/questions/7420078/detect-when-uigesturerecognizer-is-up-down-left-and-right-cocos2d/7760927#7760927">http://stackoverflow.com/questions/7420078/detect-when-uigesturerecognizer-is-up-down-left-and-right-cocos2d/7760927#7760927</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(翻译)如何让didUpdateLocation兼容iOS 5和iOS 6]]></title>
    <link href="http://DamianSheldon.github.io/blog/2014/07/28/how-to-make-didupdatelocations-compatible-with-ios-5-and-ios-6/"/>
    <updated>2014-07-28T16:05:38+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/2014/07/28/how-to-make-didupdatelocations-compatible-with-ios-5-and-ios-6</id>
    <content type="html"><![CDATA[<p><code>- (void)locationManager:(CLLocationManager *)manager didUpdateToLocation:(CLLocation *)newLocation fromLocation:(CLLocation *)oldLocation</code>是CLLocationManagerDelegate protocol中的一个常用方法，它让你的应用接收更新位置信息，当检测到任何位置变化。新的位置详情存储在newLocation中，它是一个CLLocation.<br/>
当iOS6启动，上述方法被废弃了，建议使用新版本方法<code>- (void)locationManager:(CLLocationManager *)manager didUpdateLocations:(NSArray *)locations</code>或简称locationManager:didUpdateLocations:.</p>

<p>这个快速教程的的创建目的是为了解释如何处理废弃方法，关于它什么是应该完成的以及你在哪里可以找出关于改变的更多细节。如果你想了解如何使用这个新的locationManager:didUpdateLocations: 方法，看下<a href="http://www.devfright.com/didupdatelocations-ios-example/">didUpdateLocations tutorial</a>，它解释了如何使用方法提供的NSArray.</p>

<h3>当方法被废弃了</h3>

<p>当iOS升级了（这很经常），Apple找到新的或更有效方法。当这发生了，方法可以被标记为废弃并在如何使用的地方给出一个提示。具体到CLLocationManagerDelegate，你可以看到文档中推荐了一个不同的方法。虽然你仍然可以使用废弃的方法，即使是在已经废弃的iOS版本中，Apple在未来某个时间点也许会删除掉这个方法当iOS升级了。在那个时间点，你可能需要修改你的代码，提交到Apple Store通过审核流程。</p>

<h3>如何处理废弃的方法</h3>

<p>已经被废弃的方法在新的iOS版本上仍然可以工作。Apple趋向于让它们在未来的几个新版本中保持可用，然后再将它们从类或协议中删除。与其让你的代码在最后关头更新或重新提交到苹果商店。你可以在改变之前做好准备。</p>

<p>今天的例子，我们会看下 locationManager:didUpdateToLocation:fromLocation:方法以及如何让旧的废弃方法和新的方法在同一份代码中共同工作。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">locationManager:</span><span class="p">(</span><span class="n">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">manager</span> <span class="nf">didUpdateLocations:</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nv">locations</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">CLLocation</span> <span class="o">*</span><span class="n">newLocation</span> <span class="o">=</span> <span class="p">[</span><span class="n">locations</span> <span class="n">lastObject</span><span class="p">];</span>
</span><span class='line'>    <span class="n">CLLocation</span> <span class="o">*</span><span class="n">oldLocation</span> <span class="o">=</span> <span class="p">[</span><span class="n">locations</span> <span class="nl">objectAtIndex:</span><span class="n">locations</span><span class="p">.</span><span class="n">count</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;didUpdateToLocation %@ from %@&quot;</span><span class="p">,</span> <span class="n">newLocation</span><span class="p">,</span> <span class="n">oldLocation</span><span class="p">);</span>
</span><span class='line'>    <span class="n">MKCoordinateRegion</span> <span class="n">userLocation</span> <span class="o">=</span> <span class="n">MKCoordinateRegionMakeWithDistance</span><span class="p">(</span><span class="n">newLocation</span><span class="p">.</span><span class="n">coordinate</span><span class="p">,</span> <span class="mf">1500.0</span><span class="p">,</span> <span class="mf">1500.0</span><span class="p">);</span>
</span><span class='line'>    <span class="p">[</span><span class="n">regionsMapView</span> <span class="nl">setRegion:</span><span class="n">userLocation</span> <span class="nl">animated:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>为了兼容iOS 5,我们可以加入旧的方法<code>- (void)locationManager:(CLLocationManager *)manager didUpdateToLocation:(CLLocation *)newLocation fromLocation:(CLLocation *)oldLocation</code>，并在旧的方法中调用新的方法，代码看起来会像这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">locationManager:</span><span class="p">(</span><span class="n">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">manager</span> <span class="nf">didUpdateLocations:</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nv">locations</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">CLLocation</span> <span class="o">*</span><span class="n">newLocation</span> <span class="o">=</span> <span class="p">[</span><span class="n">locations</span> <span class="n">lastObject</span><span class="p">];</span>
</span><span class='line'>    <span class="n">CLLocation</span> <span class="o">*</span><span class="n">oldLocation</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">locations</span><span class="p">.</span><span class="n">count</span> <span class="o">&gt;=</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">oldLocation</span> <span class="o">=</span> <span class="p">[</span><span class="n">locations</span> <span class="nl">objectAtIndex:</span><span class="n">locations</span><span class="p">.</span><span class="n">count</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">oldLocation</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;didUpdateToLocation %@ from %@&quot;</span><span class="p">,</span> <span class="n">newLocation</span><span class="p">,</span> <span class="n">oldLocation</span><span class="p">);</span>
</span><span class='line'>    <span class="n">MKCoordinateRegion</span> <span class="n">userLocation</span> <span class="o">=</span> <span class="n">MKCoordinateRegionMakeWithDistance</span><span class="p">(</span><span class="n">newLocation</span><span class="p">.</span><span class="n">coordinate</span><span class="p">,</span> <span class="mf">1500.0</span><span class="p">,</span> <span class="mf">1500.0</span><span class="p">);</span>
</span><span class='line'>    <span class="p">[</span><span class="n">regionsMapView</span> <span class="nl">setRegion:</span><span class="n">userLocation</span> <span class="nl">animated:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">locationManager:</span><span class="p">(</span><span class="n">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">manager</span> <span class="nf">didUpdateToLocation:</span><span class="p">(</span><span class="n">CLLocation</span> <span class="o">*</span><span class="p">)</span><span class="nv">newLocation</span> <span class="nf">fromLocation:</span><span class="p">(</span><span class="n">CLLocation</span> <span class="o">*</span><span class="p">)</span><span class="nv">oldLocation</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">locationManager:</span><span class="n">locationManager</span> <span class="nl">didUpdateLocations:</span><span class="p">[[</span><span class="n">NSArray</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithObjects:</span><span class="n">newLocation</span><span class="p">,</span> <span class="nb">nil</span><span class="p">]];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果是iOS5，新的方法不会被调用，它就像自定义的方法，iOS5并不知道locationManager:didUpdateLocations:事实上是什么。旧的方法简单的alloc/init新的名为currentLocation的NSArray并且使用 initWithObjects:newLocation获取一个newLocation,然后NSArray作为信息被传递到locationManager新的方法。</p>

<p>总之，如果设备是iOS5,旧的方法locationManager:didUpdateToLocation:fromLocation: 告诉代理新的位置可用，它把CLLocation加到NSArray中传递给新的方法，但设备的操作系统并不知道新方法。</p>

<p>如果使用的是iOS6,我们从CLLocationManagerDelegate的头文件中了解到如果代码中既有旧方法又有新方法，那么iOS会调用新方法通知代理位置更新了。</p>

<p>虽然这个快速教程提供了一种处理废弃方法的办法，仍然会有其他很多不同的办法。另外，多查看文档和关文件，因为Apple添加了很多信息，它们很有可能会为你手头的任务提供解决办法。</p>

<p>原文<br/>
o <a href="http://www.devfright.com/how-to-make-didupdatelocations-compatible-with-ios-5-and-ios-6/">http://www.devfright.com/how-to-make-didupdatelocations-compatible-with-ios-5-and-ios-6/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift Learning Notes -- Properties]]></title>
    <link href="http://DamianSheldon.github.io/blog/2014/06/24/swift-learning-notes-properties/"/>
    <updated>2014-06-24T15:28:20+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/2014/06/24/swift-learning-notes-properties</id>
    <content type="html"><![CDATA[<h3>Properties</h3>

<p>“Properties associate values with a particular class, structure, or enumeration. ” &mdash; Apple</p>

<h4>Type Properties</h4>

<p>属于类型本身的properties称为Type Property.</p>

<p>1)Value Type Properties (keyword: static)<br/>
structrue, enumeration可以定义Stroed 和Computed type properties.</p>

<p>Stored type properties for value types can be variables or constants.<br/>
NOTE:Unlike stored instance properties, you must always give stored type properties a default value. This is because the type itself does not have an initializer that can assign a value to a stored type property at initialization time.</p>

<p>Computed type properties are always declared as variable properties, in the same way as computed instance properties.</p>

<p>2)Reference Type Properties (keyword: class)<br/>
class只可以定义Computed type properties.</p>

<h4>Instance Properties</h4>

<p>1)Stroed Properties
In its simplest form, a stored property is a constant or variable that is stored as part of an instance of a particular class or structure. Stored properties can be either variable stored properties (introduced by the var keyword) or constant stored properties (introduced by the let keyword).</p>

<p>P.S:A lazy stored property is a property whose initial value is not calculated until the first time it is used. You indicate a lazy stored property by writing the @lazy attribute before its declaration.</p>

<p>2)Computed Properties
computed properties, which do not actually store a value. Instead, they provide a getter and an optional setter to retrieve and set other properties and values indirectly.</p>

<h3>Properties Observer</h3>

<p>Property observers observe and respond to changes in a property’s value.</p>

<p>You have the option to define either or both of these observers on a property:</p>

<p>willSet is called just before the value is stored.<br/>
didSet is called immediately after the new value is stored.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift Learning Notes -- Initialization]]></title>
    <link href="http://DamianSheldon.github.io/blog/2014/06/24/swift-learning-notes-initialization/"/>
    <updated>2014-06-24T11:33:28+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/2014/06/24/swift-learning-notes-initialization</id>
    <content type="html"><![CDATA[<h3>Initialization</h3>

<p>“Initialization is the process of preparing an instance of a class, structure, or enumeration for use. This process involves setting an initial value for each stored property on that instance and performing any other setup or initialization that is required before the new instance is ready to for use.” &mdash; Apple Inc.</p>

<p>从苹果的介绍我们可以得出初始化的两个要点:<br/>
1，为实例的每一个存储属性设置初始值;  <br/>
2，进行其他必要的准备工作.</p>

<p>这里我们主要总结下为实例的存储属性设置初始值。Class, Structure, enumeration的初始化略有不同，主要是因为Class可以继承，而这背后的原因是Class是Reference Type,而Structure, enumeration是Value Type。</p>

<h3>Value Type Initialization</h3>

<p>1)为存储属性设置默认值；</p>

<pre><code>Swift会为设置了所有存储属性默认值而没有提供初始化方法的structure提供Default Initializer。
structure在所有存储属性都设置了默认值的情况下自动接受Memberwise Initializer。
</code></pre>

<p>2)初始化方法。</p>

<pre><code>NOTE: Swift会自动将初始化方法的本地参数名生成外部参数名。
</code></pre>

<h3>Reference Type Initialization</h3>

<p>1)为类引入的存储属性设置初始值;<br/>
2)初始化方法。</p>

<pre><code>Designated initializers must always delegate up.
Convenience initializers must always delegate across.

Swift中子类默认是不继承父类的初始化方法,然而当满足一定条件时例外。
Assuming that you provide default values for any new properties you introduce in a subclass, the following two rules apply:

Rule 1
If your subclass doesn’t define any designated initializers, it automatically inherits all of its superclass designated initializers.

Rule 2
If your subclass provides an implementation of all of its superclass designated initializers—either by inheriting them as per rule 1, or by providing a custom implementation as part of its definition—then it automatically inherits all of the superclass convenience initializers.

These rules apply even if your subclass adds further convenience initializers.

NOTE:子类可以是用Convenience Initializer实现父类的Designated Initializer.
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Core Data 初步]]></title>
    <link href="http://DamianSheldon.github.io/blog/2014/05/22/core-data-chu-bu/"/>
    <updated>2014-05-22T09:53:40+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/2014/05/22/core-data-chu-bu</id>
    <content type="html"><![CDATA[<ol>
<li>Core Data是什么？</li>
<li>为什么使用Core Data?</li>
<li>如何使用Core Data?</li>
</ol>


<h2>Core Data是什么？</h2>

<blockquote><p>The Core Data framework provides generalized and automated solutions to common tasks associated with object life-cycle and object graph management, including persistence.</p></blockquote>

<p>Core Data框架为关联对象生命周期和对象图管理的常见任务提供了通用的和自动的解决方案，包括持久化。</p>

<h2>为什么使用Core Data？</h2>

<p>Core Data是一个对象图管理和持久化框架。它有以下优点：</p>

<ul>
<li>允许你高效地从永久存储中获取模型对象和保存改变。</li>
<li>提供一个记录模型对象改变的架构。它能让你自动支持undo和redo，维护对象之间的关系。</li>
<li>允许你去维护模型对象不相交集合的编辑。不相交集合很有用，例如，让用户在一个可能会被丢弃的视图中编辑而不在另一个视图中显示的数据。</li>
<li>允许你在任何时候只在内存中保持模型对象的一个子集。这对保持你应用尽可能地使用少的内存很有用。</li>
<li>拥有数据存储版本和迁移的架构。该架构让你很容易把旧版本数据文件升级为现在的版本。</li>
</ul>


<blockquote><p>There are a number of reasons why it may be appropriate for you to use Core Data. One of the simplest metrics is that, with Core Data, the amount of code you write to support the model layer of your application is typically 50% to 70% smaller as measured by lines of code. This is primarily due to the features listed above—the features Core Data provides are features you don’t have to implement yourself. Moreover they’re features you don’t have to test yourself, and in particular you don’t have to optimize yourself.</p></blockquote>

<h2>如何使用Core Data?</h2>

<p>Core Data 有相当多可用的组件,下图示意了这些组件之间的关系：
 </p>

<div style="text-align:center" markdown="1">
    <img name="Core Data Stack" src="http://DamianSheldon.github.io/images/CoreDataStack.jpg" width="610" height="418"> 

</div>


<p>其实我们主要就是对数据进行CRUD操作，我们过一遍创建数据的过程，其他操作也就容易理解了。</p>

<p>应用的需求会决定应该创建些什么模型类，通常我们会创建模型文件（后缀为xcdatamodeld，当然也可以纯代码），模型文件对应Managed Object Model（NSManagedObjectModel），它是实体的一个集合，实体和模型类一一对应。</p>

<p>应用启动以后会实例化一个Managed Object Context（NSManagedObjectContext），它相当于一个总入口，所有的数据操作都是通过它进行。Managed Object Context会持有一个Persistent Store Coordinator（NSPersistentStoreCoordinator）。</p>

<p>Persistent Store Coordinator帮我们将固化的文件内容映射成managed model,并且可以管理多个永久存储池（NSPersistentStore），这样managed object context看到的只是单个存储池。</p>

<p>当所有的组件都捆绑到一起的时候，我们把它称作 Core Data 堆栈，这个堆栈有两个主要部分。一部分是关于对象图管理，这正是你需要很好掌握的那一部分，并且知道怎么使用。第二部分是关于持久化，比如，保存你模型对象的状态，然后再恢复模型对象的状态。</p>

<p>在两个部分之间，即堆栈中间，是持久化存储协调器（persistent store coordinator），也被称为中间审查者。它将对象图管理部分和持久化部分捆绑在一起，当它们两者中的任何一部分需要和另一部分交流时，这便需要持久化存储协调器来调节了。</p>

<p>对象图管理是你程序模型层的逻辑存在的地方。模型层的对象存在于一个 context 内。在大多数的设置中，存在一个 context ，并且所有的对象存在于那个 context 中。Core Data 支持多个 contexts，不过对于更高级的使用情况才用。注意每个 context 和其他 context 都是完全独立的，一会儿我们将会谈到。需要记住的是，对象和它们的 context 是相关联的。每个被管理的对象都知道自己属于哪个 context，并且每个 context 都知道自己管理着哪些对象。</p>

<p>堆栈的另一部分就是持久了，即 Core Data 从文件系统中读或写数据。每个持久化存储协调器（persistent store coordinator）都有一个属于自己的持久化存储（persistent store），并且这个 store 在文件系统中与 SQLite 数据库交互。为了支持更高级的设置，Core Data 可以将多个 stores 附属于同一个持久化存储协调器，并且除了存储 SQL 格式外，还有很多存储类型(binary,XML)可供选择。</p>

<h2>代码示例</h2>

<p>纯理论的讲我们可能不容易理解，让我们结合代码来看看。</p>

<h3>创建和加载Managed Object Model</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// 1)You usually create a model in Xcode, as described in Core Data Model Editor Help. 
</span><span class='line'>
</span><span class='line'>[[NSManagedObjectModel alloc] initWithContentsOfURL:[[NSBundle mainBundle] URLForResource:@"NameOfCoreDataResource" withExtension:@"momd"]]
</span><span class='line'>
</span><span class='line'>// Another method
</span><span class='line'>managedObjectModel = [[NSManagedObjectModel mergedModelFromBundles:nil] retain];
</span><span class='line'>
</span><span class='line'>// 2)You can also create a model entirely in code.
</span><span class='line'>NSManagedObjectModel *mom = [[NSManagedObjectModel alloc] init];
</span><span class='line'>NSEntityDescription *runEntity = [[NSEntityDescription alloc] init];
</span><span class='line'>[runEntity setName:@"Run"];
</span><span class='line'>[runEntity setManagedObjectClassName:@"Run"];
</span><span class='line'>[mom setEntities:@[runEntity]];
</span><span class='line'> 
</span><span class='line'>NSMutableArray *runProperties = [NSMutableArray array];
</span><span class='line'> 
</span><span class='line'>NSAttributeDescription *dateAttribute = [[NSAttributeDescription alloc] init];
</span><span class='line'>[runProperties addObject:dateAttribute];
</span><span class='line'>[dateAttribute setName:@"date"];
</span><span class='line'>[dateAttribute setAttributeType:NSDateAttributeType];
</span><span class='line'>[dateAttribute setOptional:NO];
</span><span class='line'> 
</span><span class='line'>NSAttributeDescription *idAttribute= [[NSAttributeDescription alloc] init];
</span><span class='line'>[runProperties addObject:idAttribute];
</span><span class='line'>[idAttribute setName:@"processID"];
</span><span class='line'>[idAttribute setAttributeType:NSInteger32AttributeType];
</span><span class='line'>[idAttribute setOptional:NO];
</span><span class='line'>[idAttribute setDefaultValue:@0];
</span><span class='line'> 
</span><span class='line'>NSPredicate *validationPredicate = [NSPredicate predicateWithFormat:@"SELF &gt;= 0"];
</span><span class='line'>NSString *validationWarning = @"Process ID &lt; 0";
</span><span class='line'>[idAttribute setValidationPredicates:@[validationPredicate]
</span><span class='line'>    withValidationWarnings:@[validationWarning]];
</span><span class='line'> 
</span><span class='line'>[runEntity setProperties:runProperties];
</span><span class='line'> 
</span><span class='line'>NSDictionary *localizationDictionary = @{
</span><span class='line'>    @"Property/processID/Entity/Run" : @"Process ID",
</span><span class='line'>    @"Property/date/Entity/Run" : @"Date"
</span><span class='line'>    @"ErrorString/Process ID &lt; 0" : @"Process ID must not be less than 0" };
</span><span class='line'>[mom setLocalizationDictionary:localizationDictionary];</span></code></pre></td></tr></table></div></figure>


<h3>创建Managed Object Context</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Assume we have a persistent store coordinator
</span><span class='line'>        managedObjectContext = [[NSManagedObjectContext alloc] init];
</span><span class='line'>        [managedObjectContext setPersistentStoreCoordinator: coordinator];</span></code></pre></td></tr></table></div></figure>


<h3>创建Persistent Store Coordinator</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSURL *storeUrl = [NSURL fileURLWithPath: [[self applicationDocumentsDirectory] stringByAppendingPathComponent: @"Locations.sqlite"]];
</span><span class='line'>
</span><span class='line'>NSError *error;
</span><span class='line'>persistentStoreCoordinator = [[NSPersistentStoreCoordinator alloc] initWithManagedObjectModel: [self managedObjectModel]];
</span><span class='line'>if (![persistentStoreCoordinator addPersistentStoreWithType:NSSQLiteStoreType configuration:nil URL:storeUrl options:nil error:&error]) {
</span><span class='line'>    // Handle the error.
</span><span class='line'>} </span></code></pre></td></tr></table></div></figure>


<h3>创建Persistent Store</h3>

<p>我们不直接创建persistent object store。当我们给persistent store coordinator发送addPersistentStoreWithType:configuration:URL:options:error:, Core Data为我们创建合适的store.</p>

<h2>完整示例</h2>

<p>上面是分解开来的示例，我们最后来看过完整的实例，我稍稍修改下苹果的官方示例<a href="https://github.com/DamianSheldon/Locations">Locations</a>.</p>

<h2>Reference</h2>

<p>Core Data Programming Guide  <br/>
<a href="http://objccn.io/issue-4-1/">Core Data 概述</a> <br/>
<a href="http://blog.csdn.net/kesalin/article/details/6739319">深入浅出 Cocoa 之 Core Data</a>  <br/>
<a href="http://www.cnblogs.com/kenshincui/p/4077833.html#CoreData">iOS开发系列&mdash;数据存取</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Concurrency Programming--GCD]]></title>
    <link href="http://DamianSheldon.github.io/blog/2014/05/21/ios-concurrency-programming-gcd/"/>
    <updated>2014-05-21T11:40:27+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/2014/05/21/ios-concurrency-programming-gcd</id>
    <content type="html"><![CDATA[<h2>GCD是什么？</h2>

<p>GCD是Grand Central Dispatch的缩写，它是用来执行自定义的任务的C接口机制。它可以串行或并行地执行任务，并大大简化了相应的线程代码。它的优点有：<br/>
* 直接简单的编程接口；<br/>
* 自动、整体的线程池管理；<br/>
* 高效的内存管理；<br/>
* 负载时不干扰内核；<br/>
* 异步分发任务到分派队列不会造成死锁；<br/>
* 优雅地处理竞争；<br/>
* 串行分派队列为锁和其他同步操作提供了更高效选择；</p>

<h2>如何使用GCD？</h2>

<p>GCD抽象出来了几组高效的的API,我们使用这些API来完成我们的工作。</p>

<h3>1）单个任务；</h3>

<p>我们通常是通过调用以下API来执行任务：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">dispatch_async</span>
</span><span class='line'><span class="n">dispatch_async_f</span>
</span><span class='line'><span class="n">dispatch_sync</span>
</span><span class='line'><span class="n">dispatch_sync_f</span>
</span><span class='line'><span class="n">dispatch_after</span>
</span><span class='line'><span class="n">dispatch_after_f</span>
</span><span class='line'><span class="n">dispatch_apply</span>
</span><span class='line'><span class="n">dispatch_apply_f</span>
</span><span class='line'><span class="n">dispatch_once</span>
</span></code></pre></td></tr></table></div></figure>


<p>调用这些API之前，我们还要准备好dispatch queue.通常可以通过以下的API创建和管理Queues:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">dispatch_get_global_queue</span>
</span><span class='line'><span class="n">dispatch_get_main_queue</span>
</span><span class='line'><span class="n">dispatch_queue_create</span>
</span><span class='line'><span class="n">dispatch_get_current_queue</span>
</span><span class='line'><span class="n">dispatch_queue_get_label</span>
</span><span class='line'><span class="n">dispatch_set_target_queue</span>
</span><span class='line'><span class="n">dispatch_main</span>
</span></code></pre></td></tr></table></div></figure>


<p>dispatch queues主要有三大类：main queue, Concurrent queue, Serial queue;</p>

<p>i)main queue:通过dispatch_get_main_queue(void)可以取到main queue;</p>

<p>ii)Concurrent queue:通过dispatch_queue_t dispatch_get_global_queue(long priority,unsigned long flags)可以取得全局的并发队列。总共有四个优先级的全局队列：
 DISPATCH_QUEUE_PRIORITY_HIGH      <br/>
 DISPATCH_QUEUE_PRIORITY_DEFAULT
 DISPATCH_QUEUE_PRIORITY_LOW      <br/>
 DISPATCH_QUEUE_PRIORITY_BACKGROUND</p>

<p>iii）Serial queue:可以使用dispatch_queue_create创建串行或并行队列。</p>

<p>代码示例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// i) main queue</span>
</span><span class='line'><span class="n">dispatch_queue_t</span> <span class="n">mainQueue</span> <span class="o">=</span> <span class="n">dispatch_get_main_queue</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ii)Concurrent Queue</span>
</span><span class='line'><span class="n">dispatch_queue</span> <span class="n">defaultGlobalConcurrentQueue</span> <span class="o">=</span> <span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">DISPATCH_QUEUE_PRIORITY_DEFAULT</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// iii)Serial queue</span>
</span><span class='line'><span class="n">dispatch_queue_t</span> <span class="n">myCustomSerialQueue</span> <span class="o">=</span> <span class="n">dispatch_queue_create</span><span class="p">(</span><span class="s">&quot;com.example.MyCustomSerialQueue&quot;</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// async</span>
</span><span class='line'><span class="n">dispatch_async</span><span class="p">(</span><span class="n">myCustomSerialQueue</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Do some work here.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// sync</span>
</span><span class='line'><span class="n">dispatch_sync</span><span class="p">(</span><span class="n">myCustomSerialQueue</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Do some more work here.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;Both blocks have completed.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// apply</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">count</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%u</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// equlivent implement</span>
</span><span class='line'>
</span><span class='line'><span class="n">dispatch_apply</span><span class="p">(</span><span class="n">count</span><span class="p">,</span> <span class="n">defaultGlobalConcurrentQueue</span><span class="p">,</span> <span class="o">^</span><span class="p">(</span><span class="n">size_t</span> <span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%u</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2）组任务；</h3>

<p>可以使用以下API进行组操作：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">dispatch_group_async</span>
</span><span class='line'><span class="n">dispatch_group_async_f</span>
</span><span class='line'><span class="n">dispatch_group_create</span>
</span><span class='line'><span class="n">dispatch_group_enter</span>
</span><span class='line'><span class="n">dispatch_group_leave</span>
</span><span class='line'><span class="n">dispatch_group_notify</span>
</span><span class='line'><span class="n">dispatch_group_notify_f</span>
</span><span class='line'><span class="n">dispatch_group_wait</span>
</span></code></pre></td></tr></table></div></figure>


<p>代码示例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// Example 1</span>
</span><span class='line'><span class="n">dispatch_queue_t</span> <span class="n">queue</span> <span class="o">=</span> <span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">DISPATCH_QUEUE_PRIORITY_DEFAULT</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">dispatch_group_t</span> <span class="n">group</span> <span class="o">=</span> <span class="n">dispatch_group_create</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Add a task to the group</span>
</span><span class='line'><span class="n">dispatch_group_async</span><span class="p">(</span><span class="n">group</span><span class="p">,</span> <span class="n">queue</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>   <span class="c1">// Some asynchronous work</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Do some other work while the tasks execute.</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// When you cannot make any more forward progress,</span>
</span><span class='line'><span class="c1">// wait on the group to block the current thread.</span>
</span><span class='line'><span class="n">dispatch_group_wait</span><span class="p">(</span><span class="n">group</span><span class="p">,</span> <span class="n">DISPATCH_TIME_FOREVER</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Release the group when it is no longer needed.</span>
</span><span class='line'><span class="n">dispatch_release</span><span class="p">(</span><span class="n">group</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Example 2</span>
</span><span class='line'><span class="n">dispatch_queue_t</span> <span class="n">queue</span> <span class="o">=</span> <span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">DISPATCH_QUEUE_PRIORITY_DEFAULT</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="n">dispatch_group_t</span> <span class="n">group</span> <span class="o">=</span> <span class="n">dispatch_group_create</span><span class="p">();</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="kt">id</span> <span class="n">obj</span> <span class="k">in</span> <span class="n">array</span><span class="p">)</span>
</span><span class='line'>    <span class="n">dispatch_group_async</span><span class="p">(</span><span class="n">group</span><span class="p">,</span> <span class="n">queue</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="nl">doWorkOnItem:</span><span class="n">obj</span><span class="p">];</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="n">dispatch_group_wait</span><span class="p">(</span><span class="n">group</span><span class="p">,</span> <span class="n">DISPATCH_TIME_FOREVER</span><span class="p">);</span>
</span><span class='line'><span class="n">dispatch_release</span><span class="p">(</span><span class="n">group</span><span class="p">);</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span> <span class="nl">doWorkOnArray:</span><span class="n">array</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3）使用Dispatch Semaphores调控有效的资源使用；</h3>

<p>Dispatch Semaphores相关的API如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">dispatch_semaphore_create</span>
</span><span class='line'><span class="n">dispatch_semaphore_signal</span>
</span><span class='line'><span class="n">dispatch_semaphore_wait</span>
</span></code></pre></td></tr></table></div></figure>


<p>代码示例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// Create the semaphore, specifying the initial pool size</span>
</span><span class='line'><span class="n">dispatch_semaphore_t</span> <span class="n">fd_sema</span> <span class="o">=</span> <span class="n">dispatch_semaphore_create</span><span class="p">(</span><span class="n">getdtablesize</span><span class="p">()</span> <span class="o">/</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Wait for a free file descriptor</span>
</span><span class='line'><span class="n">dispatch_semaphore_wait</span><span class="p">(</span><span class="n">fd_sema</span><span class="p">,</span> <span class="n">DISPATCH_TIME_FOREVER</span><span class="p">);</span>
</span><span class='line'><span class="n">fd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="s">&quot;/etc/services&quot;</span><span class="p">,</span> <span class="n">O_RDONLY</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Release the file descriptor when done</span>
</span><span class='line'><span class="n">close</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>
</span><span class='line'><span class="n">dispatch_semaphore_signal</span><span class="p">(</span><span class="n">fd_sema</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Reference</h2>

<p>o Concurrency Programming Guide<br/>
o iOS多线程编程Part 3/3 &ndash; GCD;<a href="http://www.hrchen.com/2013/07/multi-threading-programming-of-ios-part-3/">http://www.hrchen.com/2013/07/multi-threading-programming-of-ios-part-3/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS的绘图系统]]></title>
    <link href="http://DamianSheldon.github.io/blog/2014/05/19/iosde-hui-tu-xi-tong/"/>
    <updated>2014-05-19T16:47:22+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/2014/05/19/iosde-hui-tu-xi-tong</id>
    <content type="html"><![CDATA[<h2>iOS的绘图框架</h2>

<p>1)UIKit是Objective-C形式的API，提供基本的2D图形绘制，图片处理，和一些实现用户界面元素动画的方法；</p>

<p>2)Core Graphics是C形式的API，支持向量图形，位图和PDF内容；</p>

<p>3)Core Animation是另一个Objective-C形式的API,它能为用户界面增加流畅的移动和动态的反馈效果；</p>

<p>4)OpenGL ES 是移动端版本的OpenGL,它能实现高性能的2D和3D图形绘制。</p>

<h2>Drawing Destinations(iOS-Only)</h2>

<p>1)View Graphics Context<br/>
2)Layer<br/>
3)Bitmap<br/>
4)PDF<br/>
5)Printer</p>

<h2>Drawing to a View Graphics Context in iOS</h2>

<p>1)Implement drawRect:method;<br/>
2)Mark the view you want update by invocate setNeedDisplay;<br/>
3)Obtain Graphic context by Call UIGraphicsGetCurrentContext method;<br/>
4)Use UIKit provides functions, UIBezierPath or Core Graphics to meet your need.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// 1) UIKit method</span>
</span><span class='line'><span class="n">UIBezierPath</span> <span class="o">*</span><span class="n">path</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIBezierPath</span> <span class="n">bezierPath</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">path</span> <span class="nl">moveToPoint:</span><span class="n">CGPointMake</span><span class="p">(</span><span class="mf">16.72</span><span class="p">,</span> <span class="mf">7.22</span><span class="p">)];</span>
</span><span class='line'><span class="p">[</span><span class="n">path</span> <span class="nl">addLineToPoint:</span><span class="n">CGPointMake</span><span class="p">(</span><span class="mf">3.29</span><span class="p">,</span> <span class="mf">20.83</span><span class="p">)];</span>
</span><span class='line'><span class="p">[</span><span class="n">path</span> <span class="nl">addLineToPoint:</span><span class="n">CGPointMake</span><span class="p">(</span><span class="mf">0.4</span><span class="p">,</span> <span class="mf">18.05</span><span class="p">)];</span>
</span><span class='line'><span class="p">[</span><span class="n">path</span> <span class="nl">addLineToPoint:</span><span class="n">CGPointMake</span><span class="p">(</span><span class="mf">18.8</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.47</span><span class="p">)];</span>
</span><span class='line'><span class="p">[</span><span class="n">path</span> <span class="nl">addLineToPoint:</span><span class="n">CGPointMake</span><span class="p">(</span><span class="mf">37.21</span><span class="p">,</span> <span class="mf">18.05</span><span class="p">)];</span>
</span><span class='line'><span class="p">[</span><span class="n">path</span> <span class="nl">addLineToPoint:</span><span class="n">CGPointMake</span><span class="p">(</span><span class="mf">34.31</span><span class="p">,</span> <span class="mf">20.83</span><span class="p">)];</span>
</span><span class='line'><span class="p">[</span><span class="n">path</span> <span class="nl">addLineToPoint:</span><span class="n">CGPointMake</span><span class="p">(</span><span class="mf">20.88</span><span class="p">,</span> <span class="mf">7.22</span><span class="p">)];</span>
</span><span class='line'><span class="p">[</span><span class="n">path</span> <span class="nl">addLineToPoint:</span><span class="n">CGPointMake</span><span class="p">(</span><span class="mf">20.88</span><span class="p">,</span> <span class="mf">42.18</span><span class="p">)];</span>
</span><span class='line'><span class="p">[</span><span class="n">path</span> <span class="nl">addLineToPoint:</span><span class="n">CGPointMake</span><span class="p">(</span><span class="mf">16.72</span><span class="p">,</span> <span class="mf">42.18</span><span class="p">)];</span>
</span><span class='line'><span class="p">[</span><span class="n">path</span> <span class="nl">addLineToPoint:</span><span class="n">CGPointMake</span><span class="p">(</span><span class="mf">16.72</span><span class="p">,</span> <span class="mf">7.22</span><span class="p">)];</span>
</span><span class='line'><span class="p">[</span><span class="n">path</span> <span class="n">closePath</span><span class="p">];</span>
</span><span class='line'><span class="n">path</span><span class="p">.</span><span class="n">lineWidth</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">[[</span><span class="n">UIColor</span> <span class="n">redColor</span><span class="p">]</span> <span class="n">setStroke</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">path</span> <span class="n">stroke</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 2) Core Graphics method</span>
</span><span class='line'><span class="n">CGContextBeginPath</span><span class="p">(</span><span class="n">ctx</span><span class="p">);</span>
</span><span class='line'><span class="n">CGContextMoveToPoint</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="mf">16.72</span><span class="p">,</span> <span class="mf">7.22</span><span class="p">);</span>
</span><span class='line'><span class="n">CGContextAddLineToPoint</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="mf">3.29</span><span class="p">,</span> <span class="mf">20.83</span><span class="p">);</span>
</span><span class='line'><span class="n">CGContextAddLineToPoint</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="mf">0.4</span><span class="p">,</span> <span class="mf">18.05</span><span class="p">);</span>
</span><span class='line'><span class="n">CGContextAddLineToPoint</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="mf">18.8</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.47</span><span class="p">);</span>
</span><span class='line'><span class="n">CGContextAddLineToPoint</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="mf">37.21</span><span class="p">,</span> <span class="mf">18.05</span><span class="p">);</span>
</span><span class='line'><span class="n">CGContextAddLineToPoint</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="mf">34.31</span><span class="p">,</span> <span class="mf">20.83</span><span class="p">);</span>
</span><span class='line'><span class="n">CGContextAddLineToPoint</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="mf">20.88</span><span class="p">,</span> <span class="mf">7.22</span><span class="p">);</span>
</span><span class='line'><span class="n">CGContextAddLineToPoint</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="mf">20.88</span><span class="p">,</span> <span class="mf">42.18</span><span class="p">);</span>
</span><span class='line'><span class="n">CGContextAddLineToPoint</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="mf">16.72</span><span class="p">,</span> <span class="mf">42.18</span><span class="p">);</span>
</span><span class='line'><span class="n">CGContextAddLineToPoint</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="mf">16.72</span><span class="p">,</span> <span class="mf">7.22</span><span class="p">);</span>
</span><span class='line'><span class="n">CGContextClosePath</span><span class="p">(</span><span class="n">ctx</span><span class="p">);</span>
</span><span class='line'><span class="n">CGContextSetLineWidth</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="n">CGContextSetStrokeColorWithColor</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="p">[</span><span class="n">UIColor</span> <span class="n">redColor</span><span class="p">].</span><span class="n">CGColor</span><span class="p">);</span>
</span><span class='line'><span class="n">CGContextStrokePath</span><span class="p">(</span><span class="n">ctx</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Drawing to a Layer(CGLayer)</h2>

<p>A layer context (CGLayerRef) is an offscreen drawing destination associated with another graphics context. It is designed for optimal performance when drawing the layer to the graphics context that created it. A layer context can be a much better choice for offscreen drawing than a bitmap graphics context.</p>

<p>1)“Create a CGLayer Object Initialized with an Existing Graphics Context”<br/>
2)“Get a Graphics Context for the Layer”<br/>
3)“Draw to the CGLayer Graphics Context”<br/>
4)“Draw the Layer to the Destination Graphics Context”</p>

<h2>Drawing to a BitMap</h2>

<p>A bitmap graphics context accepts a pointer to a memory buffer that contains storage space for the bitmap. When you paint into the bitmap graphics context, the buffer is updated. After you release the graphics context, you have a fully updated bitmap in the pixel format you specify.</p>

<p>1)Creating a Bitmap Graphics Context;<br/>
UIGraphicsBeginImageContextWithOptions() or CGBitmapContextCeate()<br/>
2)Draw code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// 1) Mix call UIKit and Core Graphics</span>
</span><span class='line'>
</span><span class='line'><span class="n">UIGraphicsBeginImageContextWithOptions</span><span class="p">(</span><span class="n">CGSizeMake</span><span class="p">(</span><span class="mi">45</span><span class="p">,</span> <span class="mi">45</span><span class="p">),</span> <span class="n">YES</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="n">CGContextRef</span> <span class="n">ctx</span> <span class="o">=</span> <span class="n">UIGraphicsGetCurrentContext</span><span class="p">();</span>
</span><span class='line'><span class="n">CGContextBeginPath</span><span class="p">(</span><span class="n">ctx</span><span class="p">);</span>
</span><span class='line'><span class="n">CGContextMoveToPoint</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="mf">16.72</span><span class="p">,</span> <span class="mf">7.22</span><span class="p">);</span>
</span><span class='line'><span class="n">CGContextAddLineToPoint</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="mf">3.29</span><span class="p">,</span> <span class="mf">20.83</span><span class="p">);</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="n">CGContextStrokePath</span><span class="p">(</span><span class="n">ctx</span><span class="p">);</span>
</span><span class='line'><span class="n">UIGraphicsEndImageContext</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 2) Core Graphics</span>
</span><span class='line'><span class="n">CGContextRef</span> <span class="n">ctx</span> <span class="o">=</span> <span class="n">CGBitmapContextCreate</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">90</span> <span class="o">*</span> <span class="mi">4</span><span class="p">,</span> <span class="n">space</span><span class="p">,</span> <span class="n">bitmapInfo</span><span class="p">);</span>
</span><span class='line'><span class="n">CGContextScaleCTM</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">);</span>
</span><span class='line'><span class="n">UIGraphicsPushContext</span><span class="p">(</span><span class="n">ctx</span><span class="p">);</span>
</span><span class='line'><span class="n">UIBezierPath</span> <span class="o">*</span><span class="n">path</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIBezierPath</span> <span class="n">bezierPath</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">path</span> <span class="nl">moveToPoint:</span><span class="n">CGPointMake</span><span class="p">(</span><span class="mf">16.72</span><span class="p">,</span> <span class="mf">7.22</span><span class="p">)];</span>
</span><span class='line'><span class="p">[</span><span class="n">path</span> <span class="nl">addLineToPoint:</span><span class="n">CGPointMake</span><span class="p">(</span><span class="mf">3.29</span><span class="p">,</span> <span class="mf">20.83</span><span class="p">)];</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="p">[</span><span class="n">path</span> <span class="n">stroke</span><span class="p">];</span>
</span><span class='line'><span class="n">UIGraphicsPopContext</span><span class="p">(</span><span class="n">ctx</span><span class="p">);</span>
</span><span class='line'><span class="n">CGContextRelease</span><span class="p">(</span><span class="n">ctx</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Concurrency Drawing</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">UIImageView</span> <span class="o">*</span><span class="n">view</span><span class="p">;</span> <span class="c1">// assume we have this</span>
</span><span class='line'><span class="n">NSOperationQueue</span> <span class="o">*</span><span class="n">renderQueue</span><span class="p">;</span> <span class="c1">// assume we have this</span>
</span><span class='line'><span class="n">CGSize</span> <span class="n">size</span> <span class="o">=</span> <span class="n">view</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="n">renderQueue</span> <span class="nl">addOperationWithBlock:</span><span class="o">^</span><span class="p">(){</span>
</span><span class='line'>        <span class="n">UIImage</span> <span class="o">*</span><span class="n">image</span> <span class="o">=</span> <span class="p">[</span><span class="n">renderer</span> <span class="nl">renderInImageOfSize:</span><span class="n">size</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[[</span><span class="n">NSOperationQueue</span> <span class="n">mainQueue</span><span class="p">]</span> <span class="nl">addOperationWithBlock:</span><span class="o">^</span><span class="p">(){</span>
</span><span class='line'>            <span class="n">view</span><span class="p">.</span><span class="n">image</span> <span class="o">=</span> <span class="n">image</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}];</span>
</span><span class='line'><span class="p">}];</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">UIImage</span> <span class="o">*</span><span class="p">)</span><span class="nf">renderInImageOfSize:</span><span class="p">(</span><span class="n">CGSize</span><span class="p">)</span><span class="nv">size</span><span class="p">;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">UIGraphicsBeginImageContextWithOptions</span><span class="p">(</span><span class="n">size</span><span class="p">,</span> <span class="n">NO</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// do drawing here</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">UIImage</span> <span class="o">*</span><span class="n">result</span> <span class="o">=</span> <span class="n">UIGraphicsGetImageFromCurrentImageContext</span><span class="p">();</span>
</span><span class='line'>    <span class="n">UIGraphicsEndImageContext</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Reference</h2>

<p>o Quartz 2D Programming Guide<br/>
o 绘制像素到屏幕上 <a href="http://objccn.io/issue-3-1/">http://objccn.io/issue-3-1/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS UIWebView与JavaScript交互]]></title>
    <link href="http://DamianSheldon.github.io/blog/2014/05/14/ios-uiwebviewyu-javascriptjiao-hu/"/>
    <updated>2014-05-14T11:05:53+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/2014/05/14/ios-uiwebviewyu-javascriptjiao-hu</id>
    <content type="html"><![CDATA[<h2>1.UIWebView调用JavaScript</h2>

<h3>1.1调用html中已有的JavaScript function</h3>

<p>假设html中的JavaScript有名为JSFunction(arg)的函数，可用如下方法调用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">js</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;JSFunction(&#39;OC---Call--&gt;JS&#39;)&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">result</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">webView</span> <span class="nl">stringByEvaluatingJavaScriptFromString:</span><span class="n">js</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h3>1.2注入JavaScript function,然后调用</h3>

<p>我们还可以先向html中注入JavaScript function,然后调用。
通常可以在UIWebViewDelegate中注入。示例如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">webViewDidFinishLoad:</span><span class="p">(</span><span class="n">UIWebView</span> <span class="o">*</span><span class="p">)</span><span class="nv">webView</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">webView</span> <span class="nl">stringByEvaluatingJavaScriptFromString:</span><span class="s">@&quot;function injectJSFunction (parameter) { return parameter + 1;}&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Call injectJSFunction from somewhere else</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">result</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">webView</span> <span class="nl">stringByEvaluatingJavaScriptFromString:</span><span class="s">@&quot;injectJSFunction(1)&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h2>2.JavaScript调用Objective-C Method</h2>

<p>JavaScript调用Objective-C方法的原理是利用UIWebView的重定向请求，传一些命令到我们的UIWebView,在UIWebView的delegate的方法中接收这些命令，并根据命令执行相应的Objc方法。示例如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">sendCommand</span><span class="p">(</span><span class="nx">cmd</span><span class="p">,</span><span class="nx">param</span><span class="p">){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">url</span><span class="o">=</span><span class="s2">&quot;objc:&quot;</span><span class="o">+</span><span class="nx">cmd</span><span class="o">+</span><span class="s2">&quot;:&quot;</span><span class="o">+</span><span class="nx">param</span><span class="p">;</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">location</span> <span class="o">=</span> <span class="nx">url</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">clickLink</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">sendCommand</span><span class="p">(</span><span class="s2">&quot;alert&quot;</span><span class="p">,</span><span class="s2">&quot;hello objective-c method&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#pragma mark --  </span>
</span><span class='line'><span class="cp">#pragma mark UIWebViewDelegate  </span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">webView:</span><span class="p">(</span><span class="n">UIWebView</span> <span class="o">*</span><span class="p">)</span><span class="nv">webView</span> <span class="nf">shouldStartLoadWithRequest:</span><span class="p">(</span><span class="n">NSURLRequest</span> <span class="o">*</span><span class="p">)</span><span class="nv">request</span> <span class="nf">navigationType:</span><span class="p">(</span><span class="n">UIWebViewNavigationType</span><span class="p">)</span><span class="nv">navigationType</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">requestString</span> <span class="o">=</span> <span class="p">[[</span><span class="n">request</span> <span class="n">URL</span><span class="p">]</span> <span class="n">absoluteString</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSArray</span> <span class="o">*</span><span class="n">components</span> <span class="o">=</span> <span class="p">[</span><span class="n">requestString</span> <span class="nl">componentsSeparatedByString:</span><span class="s">@&quot;:&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">components</span> <span class="n">count</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="p">[(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)[</span><span class="n">components</span> <span class="nl">objectAtIndex:</span><span class="mi">0</span><span class="p">]</span> <span class="nl">isEqualToString:</span><span class="s">@&quot;objc&quot;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">([(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)[</span><span class="n">components</span> <span class="nl">objectAtIndex:</span><span class="mi">1</span><span class="p">]</span> <span class="nl">isEqualToString:</span><span class="s">@&quot;alert&quot;</span><span class="p">])</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">UIAlertView</span> <span class="o">*</span><span class="n">alert</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIAlertView</span> <span class="n">alloc</span><span class="p">]</span>
</span><span class='line'>                                  <span class="nl">initWithTitle:</span><span class="s">@&quot;Alert from Cocoa Touch&quot;</span> <span class="nl">message:</span><span class="p">[</span><span class="n">components</span> <span class="nl">objectAtIndex:</span><span class="mi">2</span><span class="p">]</span>
</span><span class='line'>                                  <span class="nl">delegate:</span><span class="n">self</span> <span class="nl">cancelButtonTitle:</span><span class="nb">nil</span>
</span><span class='line'>                                  <span class="nl">otherButtonTitles:</span><span class="s">@&quot;OK&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>            <span class="p">[</span><span class="n">alert</span> <span class="n">show</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>3.相互传值</h2>

<h2>3.1UIWebView传值给JavaScript</h2>

<p>1）最简单的方法是将参数作为URL的一部分，然后在delegate方法里截取出来。这种方法只能传简单的参数，如果是一个很复杂的对象，那么URL的编解码会很复杂。
2）PhoneGap的解决方法是把要传递的参数放到队列里，然后通知Native去取。</p>

<h2>3.2JavaScript传值给UIWebView</h2>

<p>UIWebView调用JavaScript接口方法的返回值就是JavaScript传给UIWebView的值。示例如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">result</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">webView</span> <span class="nl">stringByEvaluatingJavaScriptFromString:</span><span class="s">@&quot;injectJSFunction(1)&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Property Values]]></title>
    <link href="http://DamianSheldon.github.io/blog/2014/05/10/property-values/"/>
    <updated>2014-05-10T14:41:40+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/2014/05/10/property-values</id>
    <content type="html"><![CDATA[<p>  Property是Objective-C中对象封装数据的重要方法，熟练掌握它是一项基本功。</p>

<p> Property的attribute关键字有以下几类：<br/>
 1）API Control；</p>

<pre><code>getter = methodname
setter = mehtodname:
</code></pre>

<p> 2）Write Serialization(not general thread safety);</p>

<pre><code>nonatomic
atomic (default)
</code></pre>

<p> 3) Mutability;</p>

<pre><code>readonly
readwrite (default)
</code></pre>

<p> 4) Memory Management(ARC);</p>

<pre><code>copy
strong (default)
weak
unsafe_unretained
assign
</code></pre>

<p> 5) Memory Management(Traditional)</p>

<pre><code>copy
retain
assign (default)
</code></pre>

<h2>API Control</h2>

<p>@property声明实际上是存取方法的快速声明。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">readwrite</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">NSObject</span> <span class="o">*</span><span class="n">propertyName</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>编辑器最终会合成存取方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSObject</span> <span class="o">*</span><span class="p">)</span><span class="nf">propertyName</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setPropertyName:</span><span class="p">(</span><span class="n">NSObject</span> <span class="o">*</span><span class="p">)</span><span class="nv">anObject</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>默认的getter和setter方法名分别是propertyName,setPropertyName。可以通过API Control提供的关键字指定存取方法名。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span><span class="n">getter</span><span class="o">=</span><span class="n">isEnabled</span><span class="p">)</span> <span class="kt">BOOL</span> <span class="n">enabled</span><span class="p">;</span>                                  <span class="c1">// default is YES. if NO, ignores touch events and subclasses may draw differently</span>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span><span class="n">getter</span><span class="o">=</span><span class="n">isSelected</span><span class="p">)</span> <span class="kt">BOOL</span> <span class="n">selected</span><span class="p">;</span>                                <span class="c1">// default is NO may be used by some subclasses or by application</span>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span><span class="n">getter</span><span class="o">=</span><span class="n">isHighlighted</span><span class="p">)</span> <span class="kt">BOOL</span> <span class="n">highlighted</span><span class="p">;</span>                          <span class="c1">// default is NO. this gets set/cleared </span>
</span></code></pre></td></tr></table></div></figure>


<h2>Write Serialization(not general thread safety)</h2>

<p>atomic是指存在竞争赋值时，我们会得到某次完整的赋值，而nonatomic则可能是几次赋值共同组合，它并不是通常所指的线程安全。访问atomic修饰的property会比atomic修饰的property慢，这也很明显，因为要做一些额外的操作确保赋值操作是串行的。</p>

<h2>Mutability</h2>

<p>readonly和readwrite容易理解，就是限定property的访问权限。</p>

<h2>Memory Management(ARC)</h2>

<p>1)assign，普通赋值，不更改引用计数。适用于标量等非对象数据类型，如char, int ,float, double, NSUinteger, NSInteger等。</p>

<p>2)copy,在内存分配一块全新的地址来存放传入的数据内容，即创建一份新的数据副本用来赋值。适用于实现了NSCoping协议的对象，其他类型的对象声明copy无效。</p>

<p>3)strong(=retain)，强引用，ARC下对象默认内存管理声明关键字，对象引用计数+1。</p>

<p>4)weak,弱引用，持有对象引用计数不变，持有对象释放时，指向的地址为nil。</p>

<p>5)unsafe_unretained,和weak类似，区别是持有对象释放时成为野指针,访问它会造成程序crash(iOS5.0 Or higher不要使用它)。</p>

<h2>Memory Management(Traditional)</h2>

<h2>Reference</h2>

<p>o Property Values <a href="http://www.bignerdranch.com/blog/property-values/?replytocom=740600">http://www.bignerdranch.com/blog/property-values/?replytocom=740600</a></p>
]]></content>
  </entry>
  
</feed>
