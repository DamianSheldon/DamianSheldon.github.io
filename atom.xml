<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hello World]]></title>
  <link href="http://DamianSheldon.github.io/atom.xml" rel="self"/>
  <link href="http://DamianSheldon.github.io/"/>
  <updated>2022-03-08T15:21:57+08:00</updated>
  <id>http://DamianSheldon.github.io/</id>
  <author>
    <name><![CDATA[Sheldon]]></name>
    <email><![CDATA[dongmeilianghy@sina.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CentOS 8 迁移到 Rocky Linux 时遇到的问题]]></title>
    <link href="http://DamianSheldon.github.io/blog/how-to-migrate-to-rocky-linux-from-centos-8.html"/>
    <updated>2022-03-08T11:25:32+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/how-to-migrate-to-rocky-linux-from-centos-8</id>
    <content type="html"><![CDATA[<p>虽然 Rocky Linux 专门写了一篇文档介绍如何从 CentOS 8 迁移过来，但实际迁移还是遇到了问题，这里简单记一下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Error: 
</span><span class='line'> Problem 1: cannot install both ibus-libs-1.5.19-14.el8_5.x86_64 and ibus-libs-1.5.19-12.el8.x86_64
</span><span class='line'>  - package ibus-devel-1.5.19-12.el8.x86_64 requires ibus-libs(x86-64) = 1.5.19-12.el8, but none of the providers can be installed
</span><span class='line'>  - cannot install the best update candidate for package ibus-libs-1.5.19-12.el8.x86_64
</span><span class='line'>  - problem with installed package ibus-devel-1.5.19-12.el8.x86_64
</span><span class='line'> Problem 2: cannot install both marisa-0.2.4-36.el8.x86_64 and marisa-0.2.4-4.el7.x86_64
</span><span class='line'>  - package marisa-devel-0.2.4-4.el7.x86_64 requires marisa(x86-64) = 0.2.4-4.el7, but none of the providers can be installed
</span><span class='line'>  - cannot install the best update candidate for package marisa-0.2.4-4.el7.x86_64
</span><span class='line'>  - problem with installed package marisa-devel-0.2.4-4.el7.x86_64
</span><span class='line'>(try to add '--allowerasing' to command line to replace conflicting packages or '--skip-broken' to skip uninstallable packages or '--nobest' to use not only best candidate packages)</span></code></pre></td></tr></table></div></figure>


<p>第一个问题是升级 <code>ibus-devel</code> 失败，这是因为 <code>ibus-devel</code> 在 PowerTools 的仓库中，默认可能没有使能这个仓库，我们可以手动使能安装或升级：<code>sudo dnf --enablerepo=powertools install ibus-devel</code>。</p>

<p>第二个问题是 CentOS 8 上有最新的 <code>marisa-0.2.4-36.el8.x86_64</code>，但是只有<code>marisa-devel-0.2.4-4.el7.x86_64</code>, 这个有点奇怪，不知道为什么两个版本没有同步升级，<code>marisa-devel</code> 一般是用于开发，我们可能暂时用不到，可以先尝试卸载它完成升级：<code>sudo dnf remove marisa-devel</code>。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Syncing packages
</span><span class='line'>
</span><span class='line'>Last metadata expiration check: 0:00:13 ago on Tue Mar  8 12:23:04 2022.
</span><span class='line'>
</span><span class='line'>Error: 
</span><span class='line'> Problem: package kyotocabinet-1.2.77-1.el7.x86_64 requires kyotocabinet-libs(x86-64) = 1.2.77-1.el7, but none of the providers can be installed
</span><span class='line'>  - kyotocabinet-libs-1.2.77-1.el7.x86_64 does not belong to a distupgrade repository
</span><span class='line'>  - problem with installed package kyotocabinet-1.2.77-1.el7.x86_64
</span><span class='line'>(try to add '--skip-broken' to skip uninstallable packages or '--nobest' to use not only best candidate packages)
</span><span class='line'>
</span><span class='line'>Error during distro-sync.
</span><span class='line'>
</span><span class='line'>An error occurred while we were attempting to convert your system to Rocky Linux. Your system may be unstable. Script will now exit to prevent possible damage.</span></code></pre></td></tr></table></div></figure>


<p>第三个问题是 kyotocabinet 的版本问题导致 <code>distro-sync</code> 失败。我查询了一下系统中安装的 kyotocabinet 版本又确实是 <code>1.2.77-1.el7</code>，也可以查询到迁移成功了：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ hostnamectl 
</span><span class='line'>   Static hostname: centos.tenneshop.com
</span><span class='line'>         Icon name: computer-vm
</span><span class='line'>           Chassis: vm
</span><span class='line'>        Machine ID: 2af6da6bd3624e0988bd30e22574b645
</span><span class='line'>           Boot ID: 6edac64aba294e1e9f3b7cfdb7b6970c
</span><span class='line'>    Virtualization: oracle
</span><span class='line'>  Operating System: Rocky Linux 8.5 (Green Obsidian)
</span><span class='line'>       CPE OS Name: cpe:/o:rocky:rocky:8:GA
</span><span class='line'>            Kernel: Linux 4.18.0-240.15.1.el8_3.x86_64
</span><span class='line'>      Architecture: x86-64</span></code></pre></td></tr></table></div></figure>


<p>通过 <code>Syncing packages</code> 搜索 migrate2rocky 脚本，这已经是最后三步了，于是尝试手动完成剩下的工作。  先 <code>dnf --allowerasing distro-sync</code>，然后查看会删除哪些软件，我这里是会删除 kyotocabinet，根据情况确认是否接受删除软件同步。</p>

<p>最后的 Disable Stream repos 和移除 <code>subscription-manage</code>，因为是 CentOS 8, 所以并不需要。</p>

<h2>Reference:</h2>

<ul>
<li><a href="https://docs.rockylinux.org/guides/migrate2rocky/">How to Migrate to Rocky Linux from CentOS Stream, CentOS, Alma Linux, RHEL, or Oracle Linux</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VirtualBox 搭建 CentOS 7 集群]]></title>
    <link href="http://DamianSheldon.github.io/blog/cluster-virtualbox-centos-7.html"/>
    <updated>2021-10-21T15:57:18+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/cluster-virtualbox-centos-7</id>
    <content type="html"><![CDATA[<p>软件开发时我们可能需要集群环境，特别是现在微服务很流行的情况下。如果我们手里的电脑配置不错就可以用 来搭建集群，用于学习或开发还是很不错，性价比很高。</p>

<p>我这里是用 VirtualBox 搭建 CentOS 7 集群，宿主机是内存 16 GB 加 SSD 1 TB 的 MacBook Pro。集群的核心是选择网络模式，VirtualBox 的网络模式概况如下:</p>

<table>
<thead>
<tr>
<th> Mode </th>
<th> VM -> Host </th>
<th> VM &lt;- Host </th>
<th> VM1 <-> VM2 </th>
<th> VM -> Net/LAN </th>
<th> VM &lt;- Net/LAN </th>
</tr>
</thead>
<tbody>
<tr>
<td> Host-only </td>
<td> + </td>
<td> + </td>
<td> + </td>
<td> - </td>
<td> - </td>
</tr>
<tr>
<td> Internal </td>
<td> - </td>
<td> - </td>
<td> + </td>
<td> - </td>
<td> - </td>
</tr>
<tr>
<td> Bridged </td>
<td> + </td>
<td> + </td>
<td> + </td>
<td> + </td>
<td> + </td>
</tr>
<tr>
<td> NAT </td>
<td> + </td>
<td> Port forward </td>
<td> - </td>
<td> + </td>
<td> Port forward </td>
</tr>
<tr>
<td> NAT service </td>
<td> + </td>
<td> Port forward </td>
<td> + </td>
<td> + </td>
<td> Port forward </td>
</tr>
</tbody>
</table>


<p>我希望集群的机器可以互相访问并能访问网络，从上面的列表可知，我们可以选择 Bridged，或者 NAT service 搭配 Port forward。在搭建之初，我搜索了相关的资料，但是并没找到特别理想的，这篇 <a href="https://subscription.packtpub.com/book/web-development/9781785288685/1/ch01lvl1sec09/setting-up-centos-7-nodes">Setting up CentOS 7 nodes</a> 勉强还凑合，于是我主要参考它来搭建，网络模式也同样是选择的 Bridged，它还使用了双网卡，虚拟机之间通信使用的 Internal Networking， 感觉上性能可能会好点，没实测。双网卡并不是必须的，VirtualBox 对 Internal Networking 的说明是其在安全方面更有优势:</p>

<blockquote><p>Even though technically, everything that can be done using internal networking can also be done using bridged networking, there are security advantages with internal networking. In bridged networking mode, all traffic goes through a physical interface of the host system. It is therefore possible to attach a packet sniffer such as Wireshark to the host interface and log all traffic that goes over it. If, for any reason, you prefer two or more VMs on the same machine to communicate privately, hiding their data from both the host system and the user, bridged networking therefore is not an option.</p></blockquote>

<p>由于 CentOS 主要是运行服务，我们可以使用 Minimal 安装，这样可以减少资源开销，安装好后，默认是没有启用网络的， 网络相关的配置是在 <code>/etc/sysconfig/network-scripts</code> 目录下，配置文件的命令惯例是 <code>ifcfg-enp0sX</code> ， <code>X</code> 是整数，我这里是 <code>ifcfg-enp0s3</code> 和 <code>ifcfg-enp0s8</code>，将 <code>/etc/sysconfig/network-scripts/ifcfg-enp0s3</code> 和 <code>/etc/sysconfig/network-scripts/ifcfg-enp0s8</code> 中的 <code>ONBOOT</code> 改成 <code>yes</code>。</p>

<p>构建 Internal Network 时，手动去指定 ip 会很麻烦，VirtualBox 给了我们另一个选择:</p>

<blockquote><p>Unless you configure the virtual network cards in the guest operating systems that are partici- pating in the internal network to use static IP addresses, you may want to use the DHCP server that is built into Oracle VM VirtualBox to manage IP addresses for the internal network.</p></blockquote>

<p>我们可以 <code>10.0.0.0/8</code>, <code>172.16.0.0/12</code> 和 <code>192.168.0.0/16</code> 选择一个合适的私有 ip 地址范围来构建 Internal Network，我这里选择 <code>172.16.0.0/12</code>。</p>

<p>在宿主机下运行命令 <code>/Applications/VirtualBox.app/Contents/MacOS/VBoxManage dhcpserver add --netname=intnet --server-ip=172.16.0.1 --netmask=255.240.0.0 --lower-ip=172.16.0.2 --upper-ip=172.16.255.255 --enable</code> 创建好 DHCP server。</p>

<p>之后我们可以利用 VirtualBox 的克隆功能来扩展我们的集群节点。</p>

<h1>修改记录</h1>

<ul>
<li>2021/10/21：第一次完成</li>
</ul>


<h1>Reference</h1>

<ul>
<li><a href="https://subscription.packtpub.com/book/web-development/9781785288685/1/ch01lvl1sec09/setting-up-centos-7-nodes">Setting up CentOS 7 nodes</a></li>
<li><a href="https://54m4ri74n.medium.com/building-an-internal-network-in-virtualbox-d0a4974882d0">Building an Internal Network in VirtualBox</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[记一次 docker 网络问题排查]]></title>
    <link href="http://DamianSheldon.github.io/blog/remembering-a-docker-network-issue-troubleshooting.html"/>
    <updated>2021-03-30T14:40:26+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/remembering-a-docker-network-issue-troubleshooting</id>
    <content type="html"><![CDATA[<p>最近在学 docker，虽然很早之前就简单体验过一次，但限于时间没有深入，最近有点空余时间，于是准备深入学习一下。但没想到一开始就遇到了拦路虎，照着官方文档 Get Started 一步一步往下，在构建一个自己的镜像时就遇到了问题，在多容器之间也无法通信，这可愁坏我了，只能硬着头皮来排查问题。</p>

<p>构建镜像时问题表现是牵涉到连接网络的命令会失败，google 一圈之后，找到使用 <code>--network=host</code> 的偏方，成功绕过问题。而多容器之间无法通信却一时措手无策。现在就只有 <code>--network=host</code> 这一个线索，于是就想加上这个参数后有什么区别呢？</p>

<p>在官方文档上搜寻一圈之后我没查到有用信息，于是我想相关的书可能会讲讲 docker 网络这块，在微信读书上找了杨保华、戴王剑和曹亚仑合著的《Docker 技术入门与实战(第3版)》。因为 docker 技术在快速发展，所以书中的命令与当前版本有些许差异，但问题不大，不妨碍理解。这本书有两节专门介绍 docker 网络，于是我便先看了这两节，从这里得到一条重要线索：docker 和宿主机的通信是依靠防火墙转发。<code>--network=host</code> 也验证了这条线索，加上这参数会直接使用宿主机的网络配置，这样 docker 和宿主机的通信就不需要防火墙转发了。</p>

<p>问题现在定位到了防火墙，那么为什么防火墙不转发 docker 的网络数据包呢？是不是哪条防火墙规则没配对？另外我还怀疑是不是我的实践环境有问题？我的实践环境是这样的:物理主机是 macOS，上面安装 virtulbox，使用 virtulbox 创建了一个 CentOS 8 的虚拟机, 虚拟机的网络模式是 NAT。这种情况无疑增加了问题排查的难度，怎么来排查呢？</p>

<p>我先看了一下 virtulbox 的用户手册中的网络模式介绍，NAT 是可以连接到宿主机，而且现在虚拟机是可以访问网络的。如果想快速定位问题，我想还得从网络请求的数据包入手，想办法来跟踪数据包。</p>

<p>于是就来查怎么调试 iptables。查到可以通过 TRACE 和 LOG 来输出日志，看介绍也没看出这俩有什么区别。凭经验觉得 TRACE 好像比 LOG 后出来，看起来也高大上一点，先试着用 TRACE 。Google 了一圈，找到都是 CentOS 6 或 CentOS 7 相关的配置，也只能先将就着用吧。</p>

<p>我先是参考的 <a href="https://www.programmersought.com/article/68601428960/">CentOS implements iptables log output and debugging through raw table</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$sudo modprobe ipt_LOG
</span><span class='line'>$sudo sysctl net.netfilter.nf_log.2
</span></code></pre></td></tr></table></div></figure>


<p>输出的结果是 NONE，于是尝试显示设置 <code>sudo sysctl net.netfilter.nf_log.2=ipt_LOG</code></p>

<!--more-->


<p>结果给我报一个 <code>sysctl: setting key "net.netfilter.nf_log.2": No such file or directory</code>, 为什么没有这个 key 呢？于是我查询一下:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo sysctl -a | grep net.netfilter.nf_log
</span><span class='line'>net.netfilter.nf_log.0 = NONE
</span><span class='line'>net.netfilter.nf_log.1 = NONE
</span><span class='line'>net.netfilter.nf_log.10 = NONE
</span><span class='line'>net.netfilter.nf_log.11 = NONE
</span><span class='line'>net.netfilter.nf_log.12 = NONE
</span><span class='line'>net.netfilter.nf_log.2 = NONE
</span><span class='line'>net.netfilter.nf_log.3 = NONE
</span><span class='line'>net.netfilter.nf_log.4 = NONE
</span><span class='line'>net.netfilter.nf_log.5 = NONE
</span><span class='line'>net.netfilter.nf_log.6 = NONE
</span><span class='line'>net.netfilter.nf_log.7 = NONE
</span><span class='line'>net.netfilter.nf_log.8 = NONE
</span><span class='line'>net.netfilter.nf_log.9 = NONE
</span><span class='line'>net.netfilter.nf_log_all_netns = 0</span></code></pre></td></tr></table></div></figure>


<p>明明有这个 key 啊, Google 一圈不得要领。继续搜索, 找到这篇 <a href="https://vocon-it.com/2020/03/30/tracing-iptables-on-centos-cheat-sheet/">Tracing iptables on CentOS – Cheat sheet</a>, 它提到的方法如下:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>modprobe nf_log_ipv4
</span><span class='line'>sudo sysctl net.netfilter.nf_log.2=nf_log_ipv4</span></code></pre></td></tr></table></div></figure>


<p>因为我对 linux 模块相关命令还是有点了解，知道 <code>modprobe</code> 是用来加载模块， <code>modinfo</code> 可以查看模块的信息,我发现 <code>nf_log_ipv4</code> 这个模块在我的系统中已经加载，所以我就直接尝试 <code>sudo sysctl net.netfilter.nf_log.2=nf_log_ipv4</code>, 得到的仍然是 <code>sysctl: setting key "net.netfilter.nf_log.2": No such file or directory</code>，不得不说这很迷，为什么会一直报这么一个不相关的错误。</p>

<p>没办法，继续搜索, 找到 <a href="https://forums.centos.org/viewtopic.php?t=54411">IPTables. Setting nf_log kernel parameter</a>,它其中提到：</p>

<blockquote><p>I think they split the xt_LOG code in newer kernel versions and you need to modprobe nf_log_ipv4 now and sysctl net.netfilter.nf_log.2=nf_log_ipv4 (assuming you want to trace ipv4 packets)</p></blockquote>

<p>很奇怪，为什么其他人都可以设置，我这里却不行，而且这三篇文章用的方法都类似，不至于啊，google 到的也就这几篇文章，于是我回过头去再次研读第一篇文章，在想要不要试下作者提供 CentOS 7 系列的配置方法，毕竟版本更接近，而且这三篇文章都提到用 <code>nf_log_ipv4</code>, 这时我发现他的方法里 <code>modprobe nf_log_ipv4</code> 之后并不需要设置， <code>net.netfilter.nf_log.2</code> 的值便设置了,于是我也照做，终于配置成功。我觉得这里可能是 CentOS 8 有 bug，因为明明有 key 却设置不上，现在设置成功，也就不管那么多了，继续解决问题要紧。</p>

<p>我到 <code>/etc/rsyslog.conf</code> 中开启内核日志输出：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>kern.*                                                 /var/log/messages</span></code></pre></td></tr></table></div></figure>


<p>重启日志输出服务 <code>sudo systemctl restart rsyslog.service</code>,往防火墙里添加 TRACE 规则:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo iptables -t raw -A OUTPUT     -p tcp -j TRACE
</span><span class='line'>sudo iptables -t raw -A PREROUTING -p tcp -j TRACE</span></code></pre></td></tr></table></div></figure>


<p>监视系统日志 <code>sudo tail -f /var/log/messages</code></p>

<p>重启 docker 服务 <code>sudo systemctl restart docker.service</code>, 运行容器 <code>sudo docker run -it busybox</code>, 然后在 busybox 容器中触发网络请求:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /tmp/
</span><span class='line'>wget http://www.bing.com/</span></code></pre></td></tr></table></div></figure>


<p>系统日志并没有输出， 查看 <code>sudo dmesg</code> 也没有日志输出。真是让挫败啊，没办法，只能退而求其次改用 LOG。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 删除 TRACE 规则
</span><span class='line'>sudo iptable -t raw -D PREROUTING 1
</span><span class='line'>sudo iptable -t raw -D OUTPUT 1
</span><span class='line'>
</span><span class='line'>## 添加 LOG 规则
</span><span class='line'>sudo iptables -t raw -A OUTPUT     -p tcp -j LOG --log-level debug
</span><span class='line'>sudo iptables -t raw -A PREROUTING     -p tcp -j LOG --log-level debug</span></code></pre></td></tr></table></div></figure>


<p>同样重启日志服务 <code>sudo systemctl restart rsyslog.service</code>, 监视系统日志 <code>sudo tail -f /var/log/messages</code>，重启 docker 服务 <code>sudo systemctl restart docker.service</code>, 运行容器 <code>sudo docker run -it busybox</code>, 然后在 busybox 容器中触发网络请求:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /tmp/
</span><span class='line'>wget http://www.bing.com/</span></code></pre></td></tr></table></div></figure>


<p>日志是成功输出了，内心着实高兴了一把，但由于我的规则设置太宽泛，输出的太多了，很难找到有用的信息，脑中闪过一个念头，那把规则设置更严格一点不就可以了，搓搓小手，兴奋地实践起来，于是我把规则调整成容器发出的网络数据包：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo iptables -t raw -A OUTPUT     -p tcp -s 172.17.0.0/16 -j LOG --log-level debug
</span><span class='line'>sudo iptables -t raw -A PREROUTING     -p tcp -s 172.17.0.0/16 -j LOG --log-level debug</span></code></pre></td></tr></table></div></figure>


<p>果然，相关日志输出少多了，只有两条,具体如下:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Mar 29 15:51:46 centos kernel: IN=docker0 OUT= PHYSIN=vethfeab609 MAC=02:42:5d:dd:2d:af:02:42:ac:11:00:02:08:00 SRC=172.17.0.2 DST=222.246.1
</span><span class='line'>29.80 LEN=60 TOS=0x00 PREC=0x00 TTL=64 ID=30005 DF PROTO=TCP SPT=60366 DPT=80 WINDOW=29200 RES=0x00 SYN URGP=0 
</span><span class='line'>Mar 29 15:51:47 centos kernel: IN=docker0 OUT= PHYSIN=vethfeab609 MAC=02:42:5d:dd:2d:af:02:42:ac:11:00:02:08:00 SRC=172.17.0.2 DST=222.246.1
</span><span class='line'>29.80 LEN=60 TOS=0x00 PREC=0x00 TTL=64 ID=30006 DF PROTO=TCP SPT=60366 DPT=80 WINDOW=29200 RES=0x00 SYN URGP=0 </span></code></pre></td></tr></table></div></figure>


<p>这对解决问题帮助不大，摔！这几乎要击垮我了，但还是心有不甘。于是只能把希望再次寄托给 TRACE，我在 CentOS 8 上直接 <code>man iptables</code>，发现它和网络上找到的 man page 内容确实有些差异, 它的 target 专门独立到 <code>iptables-extensions</code>:</p>

<blockquote><p>iptables  can  use  extended packet matching and target modules.  A list of these is available in the iptables-extensions(8) man‐page.</p></blockquote>

<p>继续 <code>man 8 iptables-extensions</code>，搜索 TRACE, 相关介绍如下:</p>

<blockquote><p>This  target  marks  packets so that the kernel will log every rule which match the packets as those traverse the tables, chains,rules. It can only be used in the raw table.</p>

<p>With iptables-legacy, a logging backend, such as ip(6)t_LOG or nfnetlink_log, must be loaded for this to be visible.  The packets are  logged  with the string prefix: &ldquo;TRACE: tablename:chainname:type:rulenum &rdquo; where type can be &ldquo;rule&rdquo; for plain rule, &ldquo;return&rdquo; for implicit rule at the end of a user defined chain and &ldquo;policy&rdquo; for the policy of the built in chains.</p>

<p>With iptables-nft, the target is translated into nftables' meta nftrace expression. Hence  the  kernel  sends  trace  events  via netlink to userspace where they may be displayed using xtables-monitor &ndash;trace command. For details, refer to xtables-monitor(8).</p></blockquote>

<p>原来配合 <code>iptables-nft</code> 时, 日志是使用  <code>xtables-monitor --trace</code>, 似乎又看到了一丝曙光,于是赶紧删除 LOG 规则，添加 TRACE 规则:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 删除 LOG 规则
</span><span class='line'>sudo iptable -t raw -D PREROUTING 1
</span><span class='line'>sudo iptable -t raw -D OUTPUT 1
</span><span class='line'>
</span><span class='line'># 添加 TRACE 规则
</span><span class='line'>sudo iptables -t raw -A OUTPUT     -p tcp -j TRACE
</span><span class='line'>sudo iptables -t raw -A PREROUTING -p tcp -j TRACE</span></code></pre></td></tr></table></div></figure>


<p>准备就绪之后就按前面相关的步骤触发网络请求，果然成功输出日志，而且输出了很多日志，我往屏幕下面翻，最后竟然输出的 &ldquo;Failed to received netlink message: No buffer space available&rdquo;,为什么报错了呢？我尝试 <code>man xtables-monitor</code>,文档上明明说的是： xtables-monitor will run until the user aborts execution, typically by using CTRL-C.我这里为什么报错终止了呢？Google 一圈一无所获，想到之前 LOG 因为规则太宽松输出了很多日志，就想是不是这规则太宽松导致日志太多，缓冲区不够用，赶紧调整 TRACE 规则:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 删除 TRACE 规则
</span><span class='line'>sudo iptable -t raw -D PREROUTING 1
</span><span class='line'>sudo iptable -t raw -D OUTPUT 1
</span><span class='line'>
</span><span class='line'># 添加 TRACE 规则
</span><span class='line'>sudo iptables -t raw -A OUTPUT     -p tcp -s 172.17.0.0/16  -j TRACE
</span><span class='line'>sudo iptables -t raw -A PREROUTING -p tcp -s 172.17.0.0/16 -j TRACE</span></code></pre></td></tr></table></div></figure>


<p>这下好了，日志正常输出，也没有报错了。于是仔细查看日志，终于找到： <code>firewalld:filter_FORWARD:rule:0x93:DROP</code>,原来是 firewall 将包丢掉了。可是对 firewall 一点也不熟，先找了一遍 firewall 教程看了一下，但是还不知道怎么在 firewall 中添加规则，要学会添加规则也得花点力气，这时脑海中冒出另一个想法：我何不直接停止 firewall，确认下是不是 firewall 导致的问题。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo systemctl stop firewalld.service
</span><span class='line'>sudo systemctl stop docker.service
</span><span class='line'>sudo systemctl start docker.service
</span><span class='line'>sudo docker run -it busybox</span></code></pre></td></tr></table></div></figure>


<p>尝试一下,发现可以了，确定确实是 firewall 导致的问题。那么现在是自己研究 firewall 添加规则吗？有点复杂啊，我在想是不是我 docker 版本太低了，检查一下确实比最新的版本要低，新版本可能解决了。在文档也确实找到了对应描述:</p>

<blockquote><p>If you are running Docker version 20.10.0 or higher with firewalld on your system with &ndash;iptables enabled, Docker automatically creates a firewalld zone called docker and inserts all the network interfaces it creates (for example, docker0) into the docker zone to allow seamless networking.</p></blockquote>

<p>于是升级新版本，新版本也确实解决了这个问题，嗯，这下暂时不用研究 firewall 添加规则了。</p>

<p>这次能成功排查 docker 的网络问题还是挺开心的，说实话一开始我是没信心的，毕竟才开始接触 docker，另一方面 linux 网络这块牵涉到的知识非常多，甚至在心里想实在解决不了就算了,直接在 macOS 上来学好了。得到的启发是不管有没有解决问题，首先解决问题的方法要对，方法对了之后还得要坚持；其次是注意自己软件使用的版本，相关的命令参数可能需要查看对应版本的文档去核实；最后是虽然项目的官方文档是入门的不错材料，但很多时候官方文档写得很浅或者对新手不友好，这时候如果觉得项目值得投入时间学习的话，看相关的书籍是一个很好的选择，对系统学习和精进大有禆益。</p>

<h1>Reference</h1>

<ul>
<li><a href="https://www.programmersought.com/article/68601428960/">CentOS implements iptables log output and debugging through raw table</a></li>
<li><a href="https://vocon-it.com/2020/03/30/tracing-iptables-on-centos-cheat-sheet/">Tracing iptables on CentOS – Cheat sheet</a></li>
<li><a href="https://forums.centos.org/viewtopic.php?t=54411">IPTables. Setting nf_log kernel parameter</a></li>
<li><a href="https://stackoverflow.com/questions/37536687/what-is-the-relation-between-docker0-and-eth0">What is the relation between docker0 and eth0?</a></li>
<li><a href="https://serverfault.com/questions/78240/debugging-rules-in-iptables">Debugging rules in Iptables</a></li>
<li><a href="https://unix.stackexchange.com/questions/199966/how-to-configure-centos-7-firewalld-to-allow-docker-containers-free-access-to-th">How to configure Centos 7 firewallD to allow docker containers free access to the host&rsquo;s network ports?</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-a-firewall-using-firewalld-on-centos-8">How To Set Up a Firewall Using firewalld on CentOS 8</a></li>
<li><a href="https://firewalld.org/documentation/howto/enable-and-disable-firewalld.html">Enable and Disable firewalld</a></li>
<li></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UI 设计与屏幕适配]]></title>
    <link href="http://DamianSheldon.github.io/blog/ui-design-and-screen-adaptation.html"/>
    <updated>2021-03-17T15:12:26+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/ui-design-and-screen-adaptation</id>
    <content type="html"><![CDATA[<p>目前移动设备的尺寸很多，所以前端 (iOS, Android, Web, 小程序等)开发需要适配多种尺寸屏幕。在适配时我们可能会有困惑，设计稿通常是 px 来表示尺寸，设备的分辨率也是以 px 来表示，它们之间是一样的吗？还是存在什么关系？iOS 开发者用 point 来表示视图的尺寸； Android 开发者用 dp 来表示视图尺寸； Web 开发者用 px 来表示尺寸？它们和设计稿的 px 是什么关系？设计师应该以什么基准尺寸来设计会有利于屏幕适配？应该输出几套切图？除了切图，设计师还可以做些什么来配合开发者做屏幕适配？要搞清楚这些问题，我们需要翻翻历史了。</p>

<p>Tim Chien 和 Robert Nyman 的这篇 <a href="https://hacks.mozilla.org/2013/09/css-length-explained/">CSS Length Explained</a> 帮了我的大忙，本文就是基于它而写成。</p>

<h2>英寸</h2>

<p>我们经常是用英寸为度量单位来表示手机屏幕尺寸，一英寸相当于2.54厘米或0.0254米。</p>

<h2>设备像素(device pixel)</h2>

<p>计算机屏幕显示事物的单位是像素。显示屏上的单个物理 &ldquo;光点"，能够独立于它的邻居显示出完整的颜色，被称为像素（图片元素）。我们把屏幕上的物理像素称为 "设备像素"。</p>

<h2>DPI, PPI</h2>

<p>DPI 是 dots per inch 的英文缩写，即每英寸点数； PPI 是 pixels per inch 的缩写，即每英寸像素。 它们都用来表示显示像素密度 (Display pixel density)。</p>

<p>计算机屏幕是由大量发光二极管整齐排列构成的集成电路，由于屏幕制造商工艺水平差异，每英寸集成电路上排列的二极管的数量会不一样，屏幕出厂时我们可以从厂商那里得知屏幕的 PPI。</p>

<p>于是我们可以知道:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>width or height of one device pixel = 1 / device's DPI  </span></code></pre></td></tr></table></div></figure>


<p>例如 MacBook Air(2011) 的 DPI 为 125 ， 所以：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(width or height of one device pixel) = 1/125 inch = 0.008 inch = 0.02032 cm</span></code></pre></td></tr></table></div></figure>


<!--more-->


<h2>The CSS pixel (px)</h2>

<p>CSS像素的尺寸大致可以看成是人的肉眼能够舒适地看到的尺寸，不要太小，这样你就得眯着眼睛，也不要大到让你看到像素化。"看得很舒服 &ldquo; 的定义比较笼统，<a href="http://www.w3.org/TR/CSS2/syndata.html%23length-units">W3C CSS规范</a>中给我们一个推荐的参考。</p>

<blockquote><p>The reference pixel is the visual angle of one pixel on a device with a pixel density of 96 DPI and a distance from the reader of an arm’s length.</p></blockquote>

<h2>The viewing distance</h2>

<p>如前所述，观看距离因人而异，因设备而异，这就是为什么我们必须将设备按外形因素分类的原因。推荐的参考观看距离(&ldquo;一臂之长&rdquo;)和参考像素密度(&ldquo;96 DPI&rdquo;)其实是历史数据。</p>

<p>对于21世纪的日常设备，我们有不同的参考建议:</p>

<table>
<thead>
<tr>
<th> Device </th>
<th> Baseline pixel density </th>
<th> Width/height of one CSS pixel </th>
<th> Viewing distance</th>
</tr>
</thead>
<tbody>
<tr>
<td> A 20th century PC with CRT display </td>
<td> 96 DPI </td>
<td> ~0.2646 mm (1/96in) </td>
<td> 28 in (71.12cm) </td>
</tr>
<tr>
<td> Modern laptop with LCD </td>
<td> 125 DPI </td>
<td> 0.2032 mm (1/125in) </td>
<td> 21.5 in (54.61cm)</td>
</tr>
<tr>
<td> Smartphones/Tablets </td>
<td> 160 DPI </td>
<td> ~0.159mm (1/160 in) </td>
<td> 16.8in (42.672cm) </td>
</tr>
</tbody>
</table>


<p>因此，我们在 CSS 的世界里建立了一个基本的事实：一个 CSS 像素会以不同的物理尺寸显示，但它总是以正确的尺寸显示，让浏览者感到舒适。</p>

<h2>Device pixel ratio (DPPX)</h2>

<p>随着我们步入未来，现在很多智能手机在出厂时都采用了高密度的显示屏。为了保证 CSS 像素在每一个访问网络的设备(即一切有屏幕和网络连接的设备)上的尺寸一致，设备制造商不得不将多个设备像素映射到一个 CSS 像素上，以弥补它相对更大的物理尺寸。CSS 像素相对于设备像素的尺寸比就是设备像素比(DPPX)。</p>

<p>我们以 iPhone 4 为最著名的例子。它配备了一块 326 DPI 的显示屏。根据我们上面的表格，作为一款智能手机，它的典型观看距离是 16.8 英寸，它的基准像素密度是 160DPI。为了创建一个 CSS 像素，苹果选择将设备像素比设置为 2，这就等于让 iOS Safari 显示网页的方式和 163 DPI 手机上一样。</p>

<p>在我们继续之前，先回头看看上面的数字。其实我们可以做得更好，不把设备像素比设置为2，而是设置为<code>326/160=2.0375</code>，让一个 CSS 像素与参考尺寸相比完全一样。不幸的是，这样的比例会导致一个意想不到的结果：由于每个 CSS 像素并不是由整个设备像素来显示的，所以浏览器不得不对所有的位图图像、边框等进行反锯齿，因为它们几乎总是被当作整个 CSS 像素来显示。浏览器很难利用2.0375个设备像素来绘制你的1个CSS像素宽的边框：如果比例是简单的2，那就容易多了。</p>

<p>顺带一提，163 DPI恰好是上一代 iPhone 的像素密度，所以网页的工作方式也是一样的，不需要开发者对自己的网站进行任何特殊的"升级"。</p>

<p>设备制造商通常选择1.5，或2，或其他整数作为 DPPX 值。偶尔，有些设备决定不这么玩了，发货时使用1.325 DPPX这样的值；作为开发者，我们也许应该忽略这些设备。</p>

<p>现在我们就比较清楚 CSS pixel 和 device pixel 的关系了。接下来我们看下 iOS 的 point 和 device pixel 的关系。</p>

<h2>point</h2>

<blockquote><p>The coordinate system iOS uses to place content onscreen is based on measurements in points, which map to pixels in the display. A standard-resolution display has a <code>1:1</code> pixel density (or <code>@1x</code>), where one pixel is equal to one point. High-resolution displays have a higher pixel density, offering a scale factor of 2.0 or 3.0 (referred to as <code>@2x</code> and <code>@3x</code>). As a result, high-resolution displays demand images with more pixels.</p></blockquote>

<p>从 Apple 这段描述可知， scale factor (<code>@1x</code>, <code>@2x</code> 和 <code>@3x</code>) 就是我们上面据说的设备像素比（DPPX)。point 和 css pixel 是对应的。</p>

<h2>dp</h2>

<p>那 dp 和 device pixel 又是什么关系呢？</p>

<blockquote><p>To preserve the visible size of your UI on screens with different densities, you must design your UI using density-independent pixels (dp) as your unit of measurement. One dp is a virtual pixel unit that&rsquo;s roughly equal to one pixel on a medium-density screen (160dpi; the &ldquo;baseline&rdquo; density). Android translates this value to the appropriate number of real pixels for each other density.</p></blockquote>

<p>Google 这段描述更加直接，dp 是一个虚拟的像素单位，大致相当于中密度屏幕上的一个像素(160dpi;&ldquo;基线"密度)，所以 dp 和 css pixel 也是对应的。而 xhdpi, xxhdpi 和 xxxhdpi 是表示设备像素比(DPPX)2、3 和 4。</p>

<p>现在我们还剩下设计稿的 px。我们回忆一下在前端开发时，如果我们不指定图片尺寸而直接去显示设计师的切图，这时图片是有一个固有尺寸的，在设备像素比为1的设备上，这个固有尺寸就是图片的尺寸，而在设备像素比为2上尺寸是图片的尺寸除以2，所以设计稿的 px是对应设备像素(device pixel)的，这也是为什么我们需要提供多套图片来做适配。假设我们不提供多套图片，现在我们有一个 <code>100 x 100 css pixel</code>的图片， 在设备像素比为3的设备上也会去加载 <code>100 x 100 device pixel</code> 尺寸的资源图，按上面的分析，实际它应该加载 <code>300 x 300 device pixel</code> 尺寸的资源图，那么相当于资源图上一个像素点会对应显示三个设备像素点，这样可能会出现模糊或锯齿的情况。</p>

<p>理清了各平台尺寸单位的关系以及它们与设备像素的关系后，我们来看下设备尺寸。</p>

<h2>设备尺寸</h2>

<p>我们先看下 iOS 设备尺寸分布:</p>

<table>
<thead>
<tr>
<th> 型号 </th>
<th> points </th>
<th> 物理像素 </th>
<th style="text-align:center;"> 设备像素比(DPPX) </th>
</tr>
</thead>
<tbody>
<tr>
<td> 2G,3G,3GS </td>
<td> 320 x 480 </td>
<td> 320 x 480</td>
<td style="text-align:center;"> 1 </td>
</tr>
<tr>
<td> 4,4S </td>
<td> 320 x 480 </td>
<td> 640 x 960 </td>
<td style="text-align:center;"> 2 </td>
</tr>
<tr>
<td> 5,5C,5S,SE </td>
<td> 320 x 568 </td>
<td> 640 x 1136 </td>
<td style="text-align:center;"> 2 </td>
</tr>
<tr>
<td> 6,6S,7,8,SE2</td>
<td> 375 x 667 </td>
<td> 750 x 1334 </td>
<td style="text-align:center;"> 2 </td>
</tr>
<tr>
<td> 6+,6S+,7+,8+ </td>
<td> 414 x 736 </td>
<td> 1080 x 1920 </td>
<td style="text-align:center;"> 3 </td>
</tr>
<tr>
<td> 11Pro,X,Xs </td>
<td> 375 x 812 </td>
<td> 1125 x 2436 </td>
<td style="text-align:center;"> 3 </td>
</tr>
<tr>
<td> 11, Xr </td>
<td> 414 x 896 </td>
<td> 828 x 1792 </td>
<td style="text-align:center;"> 2 </td>
</tr>
<tr>
<td> 11Pro Max,Xs Max </td>
<td> 414 x 896 </td>
<td> 1242 x 2688 </td>
<td style="text-align:center;"> 3 </td>
</tr>
</tbody>
</table>


<p>对于 iOS 来说，现在的主流设备应该是从 <code>6,6S,7,8,SE2</code> 开始，对应的设备像素是<code>750 x 1334 px</code>。</p>

<p>再来看下 android 这边， Google 有一个 <a href="https://developer.android.com/about/dashboards/index.html#Screens">Screen sizes and densities</a> 统计表，本文写作时查询的结果如下:</p>

<table>
<thead>
<tr>
<th> </th>
<th> ldpi </th>
<th> mdpi </th>
<th> tvdpi </th>
<th> hdpi </th>
<th> xhdpi </th>
<th> xxhdpi </th>
<th> Total </th>
</tr>
</thead>
<tbody>
<tr>
<td> Small </td>
<td> 0.1% </td>
<td>  </td>
<td>  </td>
<td> </td>
<td> 0.1% </td>
<td>  </td>
<td> 0.2% </td>
</tr>
<tr>
<td> Normal </td>
<td>  </td>
<td> 0.3% </td>
<td> 0.3% </td>
<td> 14.8% </td>
<td> 41.3% </td>
<td> 26.1% </td>
<td> 82.8% </td>
</tr>
<tr>
<td> Large </td>
<td>  </td>
<td> 1.7% </td>
<td> 2.2% </td>
<td> 0.8% </td>
<td> 3.2% </td>
<td> 2.0% </td>
<td> 9.9%  </td>
</tr>
<tr>
<td> Xlarge </td>
<td>  </td>
<td> 4.2% </td>
<td> 0.2% </td>
<td> 2.3% </td>
<td> 0.4% </td>
<td>  </td>
<td> 7.1% </td>
</tr>
<tr>
<td> Total </td>
<td> 0.1% </td>
<td> 6.2% </td>
<td> 2.7% </td>
<td>  17.9% </td>
<td> 45.0% </td>
<td> 28.1% </td>
<td>  </td>
</tr>
</tbody>
</table>


<p><a href="https://developer.android.google.cn/guide/topics/resources/providing-resources#ScreenSizeQualifier">Small,Normal,Large 和 Xlarge</a> 是屏幕的尺寸分类，具体含义如下:</p>

<blockquote><ul>
<li><p>small: Screens that are of similar size to a low-density QVGA screen. The minimum layout size for a small screen is approximately 320x426 dp units. Examples are QVGA low-density and VGA high density.</p></li>
<li><p>normal: Screens that are of similar size to a medium-density HVGA screen. The minimum layout size for a normal screen is approximately 320x470 dp units. Examples of such screens a WQVGA low-density, HVGA medium-density, WVGA high-density.</p></li>
<li><p>large: Screens that are of similar size to a medium-density VGA screen. The minimum layout size for a large screen is approximately 480x640 dp units. Examples are VGA and WVGA medium-density screens.</p></li>
<li><p>xlarge: Screens that are considerably larger than the traditional medium-density HVGA screen. The minimum layout size for an xlarge screen is approximately 720x960 dp units. In most cases, devices with extra-large screens would be too large to carry in a pocket and would most likely be tablet-style devices. Added in API level 9.</p></li>
</ul>
</blockquote>

<p>从上表的数据可知，目前 android 设备的主流尺寸分布是从 normal-hdpi 这个分类开始，根据 google 对 normal 的解释，它的大小相当于 medium-density HVGA 屏幕上的 <code>320x470 dp</code>，换算成设备像素就是 <code>480x705 px</code>，注意如果我们以这个尺寸去设计的话，那么得到的切图就是对应 hdpi(1.5)，要输出xhdpi(2) 的切图则要放大 1.3333 倍，这就有点不方便了，很容易得到奇数的像素尺寸，所以我们将 <code>480x705 px</code> 换算到 xhdpi(2) 的设备像素，得到 <code>640x940 px</code>。</p>

<p>我们知道宽屏比窄屏能显示更多内容，如果我们以宽屏为其准尺寸设计，那么在窄屏上就可能出现控件放不下、文字截断的情况。反过来，如果我们以窄屏为基准设计，那么在宽屏上布局时会容易处理，控件的宽度增加或者间隔增加就可以了。高度和宽度存在同样的问题，所以也应该选高度小的作为基准。设计时扣除固定元素高度之和后分配给可滚动区域，这样方便界面的元素布局能够动态响应，开发更好做屏幕适配。</p>

<p>所以选择基准尺寸和我们想支持的设备紧密相关，这需要基于多方面的因素考虑。 例如，如果我们希望支持尽可能多的设备，就越有可能获取更多用户，但开发的兼容工作量就相应增加，很多新特性就可能不适合作为应用的主要功能，而只适合作为增强功能。通常可以考虑覆盖 90% 以上，团队资金和人员比较充足的话可以考虑覆盖 95%，98% 甚至更多。</p>

<p>以覆盖 90% 以上为例，如果我们同时支持 iOS 和 android，或只支持 android 时，应该选 <code>640x940 px</code>作为基准尺寸，而如果只支持 iOS ， 我们应该选 <code>750 x 1334 px</code> 作为基准尺寸。</p>

<p>iOS 的设备像素比主要分布在2和3，而 android 这边设备像素比主要分布在 1.5(hdpi), 2(xhdpi)和 3(xxhdpi)，所以 iOS 需要输出<code>@2x</code> 和 <code>@3x</code> 两套切图； android 需要输出 hdpi, xhdpi 和 xxhdpi 三套切图。</p>

<h2>总结</h2>

<p>现在我们知道，设计基准尺寸的选择以及切图的输出是和我们想支持的设备紧密相关，写作本文时：</p>

<h3>基准尺寸</h3>

<ul>
<li>仅支持 iOS ， 应该选 <code>750 x 1334 px</code> 作为基准尺寸，对应的设备像素比是2</li>
<li>仅支持 android 时，应该选 <code>640x940 px</code> 作为基准尺寸，对应的设备像素比是2</li>
<li>支持 iOS 和 android，应该选 <code>640x940 px</code> 作为基准尺寸，对应的设备像素比是2</li>
</ul>


<h3>切图</h3>

<ul>
<li>支持 iOS 需要输出<code>@2x</code> 和 <code>@3x</code> 两套切图</li>
<li>支持 android 需要输出 hdpi, xhdpi 和 xxhdpi 三套切图</li>
</ul>


<p>基准尺寸对应的切图是 <code>@2x</code> 和 xhdpi，输出 hdpi(1.5) 则是切图缩小 0.75, <code>@3x</code> 和 xxhdpi(3) 则是切图放大 1.5 。</p>

<p>我们需要需要注意，随着设备的更新换代，我们的基准尺寸和切图会发生变化，就像以前我们可能需要为 android 提供 mdpi 的切图。</p>

<p>另外想说一下，设计师在设计之初就要把屏幕适配这事放在心上，将界面的元素看成水流一样，尽量让它们能自由流动，这样开发者就能更好地也更容易地做屏幕适配。Apple 在屏幕适配这块提出了 auto layout 的解决方案，这是一个设计师视角的解决方案，也是我们日常的生活中的视角，用界面元素的之间的约束来表达布局，推荐设计师用约束这种方式去做设计并最终输出。可以看到 google 实际上也很认可 auto layout 用约束来布局的想法，在新版本的 android 开发中默认的根布局容器就是 ConstraintLayout，它就是用约束来表达布局。最后我们再看 web 开发布局这边，css 布局的核心就是流，为支持屏幕适配，目前的主流方案是响应式布局，而这种布局的核心我认为仍然是约束。可以看到在屏幕适配这块，各平台最终的想法其实是一样的。</p>

<h1>Reference</h1>

<ul>
<li><a href="https://hacks.mozilla.org/2013/09/css-length-explained/">CSS Length Explained</a></li>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/ios/icons-and-images/image-size-and-resolution/">Image Size and Resolution</a></li>
<li><a href="https://developer.android.google.cn/training/multiscreen/screendensities">Support different pixel densities</a></li>
<li><a href="https://developer.android.google.cn/guide/topics/resources/providing-resources#ScreenSizeQualifier">ScreenSizeQualifier</a></li>
<li><a href="https://developer.android.google.cn/training/multiscreen/screensizes">Support different screen sizes</a></li>
<li><a href="https://developer.android.com/about/dashboards/index.html#Screens">Screen sizes and densities</a></li>
<li><a href="https://www.paintcodeapp.com/news/ultimate-guide-to-iphone-resolutions">The Ultimate Guide To iPhone Resolutions</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL 使用笔记(三)]]></title>
    <link href="http://DamianSheldon.github.io/blog/mysql-usage-notes-part-2.html"/>
    <updated>2020-12-18T08:46:08+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/mysql-usage-notes-part-2</id>
    <content type="html"><![CDATA[<h3>1.How do I see all foreign keys to a table or column?</h3>

<p>A:For a Table:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SELECT 
</span><span class='line'>  TABLE_NAME,COLUMN_NAME,CONSTRAINT_NAME, REFERENCED_TABLE_NAME,REFERENCED_COLUMN_NAME
</span><span class='line'>FROM
</span><span class='line'>  INFORMATION_SCHEMA.KEY_COLUMN_USAGE
</span><span class='line'>WHERE
</span><span class='line'>  REFERENCED_TABLE_SCHEMA = '&lt;database>' AND
</span><span class='line'>  REFERENCED_TABLE_NAME = '&lt;table>';</span></code></pre></td></tr></table></div></figure>


<p>For a Column:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SELECT 
</span><span class='line'>  TABLE_NAME,COLUMN_NAME,CONSTRAINT_NAME, REFERENCED_TABLE_NAME,REFERENCED_COLUMN_NAME
</span><span class='line'>FROM
</span><span class='line'>  INFORMATION_SCHEMA.KEY_COLUMN_USAGE
</span><span class='line'>WHERE
</span><span class='line'>  REFERENCED_TABLE_SCHEMA = '&lt;database>' AND
</span><span class='line'>  REFERENCED_TABLE_NAME = '&lt;table>' AND
</span><span class='line'>  REFERENCED_COLUMN_NAME = '&lt;column>';</span></code></pre></td></tr></table></div></figure>


<p>Reference:</p>

<p><a href="https://stackoverflow.com/questions/201621/how-do-i-see-all-foreign-keys-to-a-table-or-column">How do I see all foreign keys to a table or column?</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何发布自己的 artifacts 到 maven 中央仓库]]></title>
    <link href="http://DamianSheldon.github.io/blog/how-to-publish-your-artifacts-to-maven-central.html"/>
    <updated>2020-10-28T09:16:37+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/how-to-publish-your-artifacts-to-maven-central</id>
    <content type="html"><![CDATA[<p>当我们越来越熟悉 Java 开发，可能也想发布自己的 artifacts 到 maven 中央仓库，那么该如何做呢？</p>

<blockquote><p>The easiest way to upload another project is to use the <a href="http://central.sonatype.org/pages/ossrh-guide.html">Open Source Software Repository Hosting (OSSRH)</a>, which is an approved repository provided by Sonatype for any OSS Project that want to get their artifacts into the Central Repository.</p></blockquote>

<p>从 maven 的官方文档可知是使用 <a href="http://central.sonatype.org/pages/ossrh-guide.html">Open Source Software Repository Hosting (OSSRH)</a>, 于是我们可以参考她的指南。</p>

<p>这份指南勾勒了发布工作的主要流程，分别是：</p>

<ol>
<li>Create a ticket with Sonatype</li>
<li>Review Requirements</li>
<li>Deployment</li>
<li>Releasing to Central</li>
</ol>


<h3>创建 Sonatype 工单</h3>

<p>Sonatype 使用 JIRA 管理请求，所以我们要创建 JIRA 帐号, 然后创建一个新工程工单。</p>

<ol>
<li><a href="https://issues.sonatype.org/secure/Signup!default.jspa">Create your JIRA account</a></li>
<li><a href="https://issues.sonatype.org/secure/CreateIssue.jspa?issuetype=21&amp;pid=10134">Create a New Project ticket</a></li>
</ol>


<h3>复核要求</h3>

<p>为了确保中央仓库库中可用组件的最低质量水平，部署组件必须满足一些要求。这使组件的用户能够从中央仓库中提供的元数据中找到有关组件的所有相关细节。</p>

<p>这些要求是：</p>

<ol>
<li>Supply Javadoc and Sources</li>
<li>Sign Files with GPG/PGP</li>
<li>Sufficient Metadata</li>
</ol>


<!--more-->


<h4>Supply Javadoc and Sources</h4>

<p>我们可以集成 maven 插件来提供 Javadoc 和源文件。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;plugin>
</span><span class='line'>  &lt;groupId>org.apache.maven.plugins&lt;/groupId>
</span><span class='line'>  &lt;artifactId>maven-source-plugin&lt;/artifactId>
</span><span class='line'>  &lt;version>2.2.1&lt;/version>
</span><span class='line'>  &lt;executions>
</span><span class='line'>      &lt;execution>
</span><span class='line'>          &lt;id>attach-sources&lt;/id>
</span><span class='line'>          &lt;goals>
</span><span class='line'>              &lt;goal>jar-no-fork&lt;/goal>
</span><span class='line'>          &lt;/goals>
</span><span class='line'>      &lt;/execution>
</span><span class='line'>  &lt;/executions>
</span><span class='line'>&lt;/plugin>
</span><span class='line'>&lt;plugin>
</span><span class='line'>  &lt;groupId>org.apache.maven.plugins&lt;/groupId>
</span><span class='line'>  &lt;artifactId>maven-javadoc-plugin&lt;/artifactId>
</span><span class='line'>  &lt;version>2.9.1&lt;/version>
</span><span class='line'>  &lt;executions>
</span><span class='line'>      &lt;execution>
</span><span class='line'>          &lt;id>attach-javadocs&lt;/id>
</span><span class='line'>          &lt;goals>
</span><span class='line'>              &lt;goal>jar&lt;/goal>
</span><span class='line'>          &lt;/goals>
</span><span class='line'>      &lt;/execution>
</span><span class='line'>  &lt;/executions>
</span><span class='line'>&lt;/plugin></span></code></pre></td></tr></table></div></figure>


<h4>Sign Files with GPG/PGP</h4>

<p>我们需要用 GPG/PGP 对文件签名，以 macOS 为例：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#1. Install GPG
</span><span class='line'>brew install gpg
</span><span class='line'>
</span><span class='line'>#2. Generate the key pair
</span><span class='line'>gpg --full-gen-key
</span><span class='line'>
</span><span class='line'>###3.Publish the GPG key pair and distribute your key to GPG servers
</span><span class='line'>
</span><span class='line'>gpg --keyserver hkps.pool.sks-keyservers.net  --send-keys your_key_id</span></code></pre></td></tr></table></div></figure>


<p>生成 GPG 公私钥对并发布到 GPG 服务器后，我们还需要将 GPG 提供给 maven, 这是通过 maven settings。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># ~/.m2/settings.xml
</span><span class='line'>&lt;settings>
</span><span class='line'>  &lt;profiles>
</span><span class='line'>    &lt;profile>
</span><span class='line'>      &lt;id>ossrh&lt;/id>
</span><span class='line'>      &lt;activation>
</span><span class='line'>        &lt;activeByDefault>true&lt;/activeByDefault>
</span><span class='line'>      &lt;/activation>
</span><span class='line'>      &lt;properties>
</span><span class='line'>        &lt;gpg.passphrase>the_pass_phrase&lt;/gpg.passphrase>
</span><span class='line'>      &lt;/properties>
</span><span class='line'>    &lt;/profile>
</span><span class='line'>  &lt;/profiles>
</span><span class='line'>&lt;/settings></span></code></pre></td></tr></table></div></figure>


<p>macOS 上我还遇到了 gpg: signing failed: Inappropriate ioctl for device 这个错误，通过在 <code>~/.bash_profile</code> 中加入如下配置解决了:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>GPG_TTY=$(tty)
</span><span class='line'>export GPG_TTY</span></code></pre></td></tr></table></div></figure>


<h4>Sufficient Metadata</h4>

<p>元数据信息要包括：</p>

<ul>
<li>Correct Coordinates</li>
<li>Project Name, Description and URL</li>
<li>License Information</li>
<li>Developer Information</li>
<li>SCM Information</li>
</ul>


<p>对于 Correct Coordinates， 我这里是使用 github 托管代码，于是我们可以按照 maven 官方文档的建议:</p>

<blockquote><p>My project is hosted at a project hosting service like SourceForge or Github, what should I use as groupId?
If your project name is foo at SourceForge, you can use net.sf.foo. If your username is bar on Github, you can use com.github.bar. You can also use another reversed domain name you control. The group ID does not have to reflect the project host.</p></blockquote>

<h3>Deployment</h3>

<p>至此，准备工作就完成了，接下来可以进入部署环节了。先还是要做些相关配置，主要是：</p>

<ul>
<li>Distribution Management and Authentication</li>
<li>Using a Profile</li>
</ul>


<h4>Distribution Management and Authentication</h4>

<p>为了配置 Maven，使其能够通过 Nexus Staging Maven 插件部署到 OSSRH 的 Nexus Repository Manager上，你必须进行如下配置：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;distributionManagement>
</span><span class='line'>  &lt;snapshotRepository>
</span><span class='line'>    &lt;id>ossrh&lt;/id>
</span><span class='line'>    &lt;url>https://oss.sonatype.org/content/repositories/snapshots&lt;/url>
</span><span class='line'>  &lt;/snapshotRepository>
</span><span class='line'>&lt;/distributionManagement>
</span><span class='line'>&lt;build>
</span><span class='line'>  &lt;plugins>
</span><span class='line'>    &lt;plugin>
</span><span class='line'>      &lt;groupId>org.sonatype.plugins&lt;/groupId>
</span><span class='line'>      &lt;artifactId>nexus-staging-maven-plugin&lt;/artifactId>
</span><span class='line'>      &lt;version>1.6.7&lt;/version>
</span><span class='line'>      &lt;extensions>true&lt;/extensions>
</span><span class='line'>      &lt;configuration>
</span><span class='line'>        &lt;serverId>ossrh&lt;/serverId>
</span><span class='line'>        &lt;nexusUrl>https://oss.sonatype.org/&lt;/nexusUrl>
</span><span class='line'>        &lt;autoReleaseAfterClose>true&lt;/autoReleaseAfterClose>
</span><span class='line'>      &lt;/configuration>
</span><span class='line'>    &lt;/plugin>
</span><span class='line'>    ...
</span><span class='line'>  &lt;/plugins>
</span><span class='line'>&lt;/build></span></code></pre></td></tr></table></div></figure>


<p>另外，如果你使用 Maven 部署插件，这是默认行为，你需要添加一个完整的distributionManagement部分。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;distributionManagement>
</span><span class='line'>  &lt;snapshotRepository>
</span><span class='line'>    &lt;id>ossrh&lt;/id>
</span><span class='line'>    &lt;url>https://oss.sonatype.org/content/repositories/snapshots&lt;/url>
</span><span class='line'>  &lt;/snapshotRepository>
</span><span class='line'>  &lt;repository>
</span><span class='line'>    &lt;id>ossrh&lt;/id>
</span><span class='line'>    &lt;url>https://oss.sonatype.org/service/local/staging/deploy/maven2/&lt;/url>
</span><span class='line'>  &lt;/repository>
</span><span class='line'>&lt;/distributionManagement></span></code></pre></td></tr></table></div></figure>


<p>上述配置将从你的Maven settings.xml文件中获取用户账户的详细信息来部署到OSSRH。认证的最小设置是：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;settings>
</span><span class='line'>  &lt;servers>
</span><span class='line'>    &lt;server>
</span><span class='line'>      &lt;id>ossrh&lt;/id>
</span><span class='line'>      &lt;username>your-jira-id&lt;/username>
</span><span class='line'>      &lt;password>&lt;![CDATA[your-jira-pwd]]&gt;&lt;/password>
</span><span class='line'>    &lt;/server>
</span><span class='line'>  &lt;/servers>
</span><span class='line'>&lt;/settings></span></code></pre></td></tr></table></div></figure>


<h4>Using a Profile</h4>

<p>由于生成javadoc和源代码jars以及使用GPG签署组件是一个相当耗时的过程，这些执行通常从正常的构建配置中分离出来，并转移到一个配置文件中。然后，当通过激活配置文件进行部署时，该配置文件又会被使用。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;profiles>
</span><span class='line'>  &lt;profile> 
</span><span class='line'>    &lt;id>release&lt;/id>
</span><span class='line'>    &lt;build>
</span><span class='line'>      ...
</span><span class='line'>      javadoc, source and gpg plugin from above
</span><span class='line'>      ...
</span><span class='line'>    &lt;/build>
</span><span class='line'>  &lt;/profile>
</span><span class='line'>&lt;/profiles></span></code></pre></td></tr></table></div></figure>


<p>这些配置做完之后，最终得到的 pom.xml 类似如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
</span><span class='line'>  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
</span><span class='line'>  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
</span><span class='line'>  &lt;modelVersion>4.0.0&lt;/modelVersion>
</span><span class='line'>  &lt;groupId>com.github.damiansheldon&lt;/groupId>
</span><span class='line'>  &lt;artifactId>treasure&lt;/artifactId>
</span><span class='line'>  &lt;version>0.0.2&lt;/version>
</span><span class='line'>  &lt;build>
</span><span class='line'>      &lt;sourceDirectory>src&lt;/sourceDirectory>
</span><span class='line'>      &lt;plugins>
</span><span class='line'>          &lt;plugin>
</span><span class='line'>              &lt;artifactId>maven-compiler-plugin&lt;/artifactId>
</span><span class='line'>              &lt;version>3.8.1&lt;/version>
</span><span class='line'>              &lt;configuration>
</span><span class='line'>                  &lt;source>1.8&lt;/source>
</span><span class='line'>                  &lt;target>1.8&lt;/target>
</span><span class='line'>              &lt;/configuration>
</span><span class='line'>          &lt;/plugin>
</span><span class='line'>          &lt;plugin>
</span><span class='line'>              &lt;groupId>org.apache.maven.plugins&lt;/groupId>
</span><span class='line'>              &lt;artifactId>maven-deploy-plugin&lt;/artifactId>
</span><span class='line'>              &lt;version>2.8.2&lt;/version>
</span><span class='line'>          &lt;/plugin>
</span><span class='line'>          &lt;plugin>
</span><span class='line'>              &lt;groupId>org.apache.maven.plugins&lt;/groupId>
</span><span class='line'>              &lt;artifactId>maven-release-plugin&lt;/artifactId>
</span><span class='line'>              &lt;version>2.5.3&lt;/version>
</span><span class='line'>              &lt;configuration>
</span><span class='line'>                  &lt;arguments>-Dgpg.passphrase=${gpg.passphrase}&lt;/arguments>
</span><span class='line'>                  &lt;autoVersionSubmodules>true&lt;/autoVersionSubmodules>
</span><span class='line'>                  &lt;useReleaseProfile>false&lt;/useReleaseProfile>
</span><span class='line'>                  &lt;releaseProfiles>release&lt;/releaseProfiles>
</span><span class='line'>                  &lt;goals>deploy&lt;/goals>
</span><span class='line'>              &lt;/configuration>
</span><span class='line'>          &lt;/plugin>
</span><span class='line'>          &lt;plugin>
</span><span class='line'>              &lt;groupId>org.sonatype.plugins&lt;/groupId>
</span><span class='line'>              &lt;artifactId>nexus-staging-maven-plugin&lt;/artifactId>
</span><span class='line'>              &lt;version>1.6.7&lt;/version>
</span><span class='line'>              &lt;extensions>true&lt;/extensions>
</span><span class='line'>              &lt;configuration>
</span><span class='line'>                  &lt;serverId>ossrh&lt;/serverId>
</span><span class='line'>                  &lt;nexusUrl>https://oss.sonatype.org/&lt;/nexusUrl>
</span><span class='line'>                  &lt;autoReleaseAfterClose>true&lt;/autoReleaseAfterClose>
</span><span class='line'>              &lt;/configuration>
</span><span class='line'>          &lt;/plugin>
</span><span class='line'>      &lt;/plugins>
</span><span class='line'>  &lt;/build>
</span><span class='line'>  &lt;dependencies>
</span><span class='line'>      &lt;dependency>
</span><span class='line'>          &lt;groupId>org.springframework&lt;/groupId>
</span><span class='line'>          &lt;artifactId>spring-jdbc&lt;/artifactId>
</span><span class='line'>          &lt;version>5.2.8.RELEASE&lt;/version>
</span><span class='line'>      &lt;/dependency>
</span><span class='line'>  &lt;/dependencies>
</span><span class='line'>  &lt;distributionManagement>
</span><span class='line'>      &lt;repository>
</span><span class='line'>          &lt;id>ossrh&lt;/id>
</span><span class='line'>          &lt;name>OSSRH Staging Repository&lt;/name>
</span><span class='line'>          &lt;url>https://oss.sonatype.org/service/local/staging/deploy/maven2&lt;/url>
</span><span class='line'>      &lt;/repository>
</span><span class='line'>      &lt;snapshotRepository>
</span><span class='line'>          &lt;id>ossrh&lt;/id>
</span><span class='line'>          &lt;name>OSSRH Snapshots&lt;/name>
</span><span class='line'>          &lt;url>https://oss.sonatype.org/content/repositories/snapshots&lt;/url>
</span><span class='line'>      &lt;/snapshotRepository>
</span><span class='line'>  &lt;/distributionManagement>
</span><span class='line'>  &lt;scm>
</span><span class='line'>      &lt;connection>scm:git:https://github.com/DamianSheldon/Treasure.git&lt;/connection>
</span><span class='line'>      &lt;developerConnection>scm:git:https://github.com/DamianSheldon/Treasure.git&lt;/developerConnection>
</span><span class='line'>      &lt;tag>HEAD&lt;/tag>
</span><span class='line'>      &lt;url>https://github.com/DamianSheldon/Treasure&lt;/url>
</span><span class='line'>  &lt;/scm>
</span><span class='line'>  &lt;profiles>
</span><span class='line'>      &lt;profile>
</span><span class='line'>          &lt;id>release&lt;/id>
</span><span class='line'>          &lt;build>
</span><span class='line'>              &lt;plugins>
</span><span class='line'>                  &lt;plugin>
</span><span class='line'>                      &lt;groupId>org.apache.maven.plugins&lt;/groupId>
</span><span class='line'>                      &lt;artifactId>maven-source-plugin&lt;/artifactId>
</span><span class='line'>                      &lt;version>2.2.1&lt;/version>
</span><span class='line'>                      &lt;executions>
</span><span class='line'>                          &lt;execution>
</span><span class='line'>                              &lt;id>attach-sources&lt;/id>
</span><span class='line'>                              &lt;goals>
</span><span class='line'>                                  &lt;goal>jar-no-fork&lt;/goal>
</span><span class='line'>                              &lt;/goals>
</span><span class='line'>                          &lt;/execution>
</span><span class='line'>                      &lt;/executions>
</span><span class='line'>                  &lt;/plugin>
</span><span class='line'>                  &lt;plugin>
</span><span class='line'>                      &lt;groupId>org.apache.maven.plugins&lt;/groupId>
</span><span class='line'>                      &lt;artifactId>maven-javadoc-plugin&lt;/artifactId>
</span><span class='line'>                      &lt;version>2.9.1&lt;/version>
</span><span class='line'>                      &lt;executions>
</span><span class='line'>                          &lt;execution>
</span><span class='line'>                              &lt;id>attach-javadocs&lt;/id>
</span><span class='line'>                              &lt;goals>
</span><span class='line'>                                  &lt;goal>jar&lt;/goal>
</span><span class='line'>                              &lt;/goals>
</span><span class='line'>                          &lt;/execution>
</span><span class='line'>                      &lt;/executions>
</span><span class='line'>                  &lt;/plugin>
</span><span class='line'>                  &lt;plugin>
</span><span class='line'>                      &lt;groupId>org.apache.maven.plugins&lt;/groupId>
</span><span class='line'>                      &lt;artifactId>maven-gpg-plugin&lt;/artifactId>
</span><span class='line'>                      &lt;version>1.5&lt;/version>
</span><span class='line'>                      &lt;executions>
</span><span class='line'>                          &lt;execution>
</span><span class='line'>                              &lt;id>sign-artifacts&lt;/id>
</span><span class='line'>                              &lt;phase>verify&lt;/phase>
</span><span class='line'>                              &lt;goals>
</span><span class='line'>                                  &lt;goal>sign&lt;/goal>
</span><span class='line'>                              &lt;/goals>
</span><span class='line'>                          &lt;/execution>
</span><span class='line'>                      &lt;/executions>
</span><span class='line'>                  &lt;/plugin>
</span><span class='line'>              &lt;/plugins>
</span><span class='line'>          &lt;/build>
</span><span class='line'>      &lt;/profile>
</span><span class='line'>  &lt;/profiles>
</span><span class='line'>
</span><span class='line'>  &lt;!-- More Project Information -->
</span><span class='line'>  &lt;name>Treasure&lt;/name>
</span><span class='line'>  &lt;description>The treasures I have accumulated in my daily java development. It can help other people face the same problem.&lt;/description>
</span><span class='line'>  &lt;url>https://github.com/DamianSheldon/Treasure&lt;/url>
</span><span class='line'>  &lt;licenses>
</span><span class='line'>      &lt;license>
</span><span class='line'>          &lt;name>MIT License&lt;/name>
</span><span class='line'>          &lt;url>http://www.opensource.org/licenses/mit-license.php&lt;/url>
</span><span class='line'>          &lt;distribution>repo&lt;/distribution>
</span><span class='line'>      &lt;/license>
</span><span class='line'>  &lt;/licenses>
</span><span class='line'>  &lt;developers>
</span><span class='line'>      &lt;developer>
</span><span class='line'>          &lt;id>meiliang&lt;/id>
</span><span class='line'>          &lt;name>Meiliang Dong&lt;/name>
</span><span class='line'>          &lt;email>dongmeilianghy@sina.com&lt;/email>
</span><span class='line'>          &lt;url>http://damiansheldon.github.io&lt;/url>
</span><span class='line'>          &lt;roles>
</span><span class='line'>              &lt;role>architect&lt;/role>
</span><span class='line'>              &lt;role>developer&lt;/role>
</span><span class='line'>          &lt;/roles>
</span><span class='line'>          &lt;timezone>Asia/Shanghai&lt;/timezone>
</span><span class='line'>      &lt;/developer>
</span><span class='line'>  &lt;/developers>
</span><span class='line'>&lt;/project></span></code></pre></td></tr></table></div></figure>


<p>做好相关配置之后就可以真正部署了，主要有两种部署方式：</p>

<ul>
<li>Nexus Staging Maven Plugin for Deployment and Release</li>
<li>Performing a Release Deployment with the Maven Release Plugin</li>
</ul>


<p>推荐的方式是使用 Nexus Staging Maven Plugin。</p>

<h4>Nexus Staging Maven Plugin for Deployment and Release</h4>

<p>Performing a Snapshot Deployment</p>

<p>当你的版本以<code>-SNAPSHOT</code>结尾时，会进行快照部署。当执行快照部署时，您不需要满足要求，只需在工程上运行 <code>mvn clean deploy</code></p>

<p>SNAPSHOT版本不同步到中央版本库。如果您希望您的用户使用您的 SNAPSHOT 版本，他们需要将快照库添加到他们的 Nexus Repository Manager、settings.xml 或 pom.xml 中。成功部署的SNAPSHOT版本可以在<code>https://oss.sonatype.org/content/repositories/snapshots/</code>找到。</p>

<p>Performing a Release Deployment</p>

<p>为了执行发布部署，你必须在所有的POM文件中编辑你的版本，以使用发布版本。这意味着它们不能以<code>-SNAPSHOT</code>结尾，此外插件和依赖性声明也不能使用快照版本。这保证了你只能依赖其他发布的组件。理想情况下，它们都在中央仓库中可用。这确保了你的用户可以从中央仓库中检索你的组件以及你的过渡性依赖。</p>

<p>在多模块设置中，可以手动或借助Maven版本插件来更改项目的版本和父级引用。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mvn versions:set -DnewVersion=1.2.3</span></code></pre></td></tr></table></div></figure>


<p>一旦你更新了所有的版本，并确保你的构建没有部署就通过了，你就可以使用发布配置文件进行部署，并使用</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mvn clean deploy -P release</span></code></pre></td></tr></table></div></figure>


<h4>Performing a Release Deployment with the Maven Release Plugin</h4>

<p>Maven发布插件可以用来自动完成对Maven POM文件的修改、健康检查、所需的SCM操作和实际部署执行。</p>

<p>Maven发布插件的配置应该包括禁用Maven super POM 中的发布配置文件，因为我们使用的是我们自己的配置文件，并在激活发布配置文件的同时指定部署目标。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;plugin>
</span><span class='line'>  &lt;groupId>org.apache.maven.plugins&lt;/groupId>
</span><span class='line'>  &lt;artifactId>maven-release-plugin&lt;/artifactId>
</span><span class='line'>  &lt;version>2.5.3&lt;/version>
</span><span class='line'>  &lt;configuration>
</span><span class='line'>    &lt;autoVersionSubmodules>true&lt;/autoVersionSubmodules>
</span><span class='line'>    &lt;useReleaseProfile>false&lt;/useReleaseProfile>
</span><span class='line'>    &lt;releaseProfiles>release&lt;/releaseProfiles>
</span><span class='line'>    &lt;goals>deploy&lt;/goals>
</span><span class='line'>  &lt;/configuration>
</span><span class='line'>&lt;/plugin></span></code></pre></td></tr></table></div></figure>


<p>在SCM连接配置正确的情况下，您可以通过以下方式向OSSRH进行发布部署。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mvn release:clean release:prepare</span></code></pre></td></tr></table></div></figure>


<p>回答版本和标签的提示，然后是</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mvn release:perform</span></code></pre></td></tr></table></div></figure>


<p>由于使用了Nexus Staging Maven Plugin，并将autoReleaseAfterClose设置为true，这个执行将一次性部署到OSSRH并发布到中央仓库。</p>

<h3>Releasing to Central</h3>

<p>在前面的介绍中，我们提到使用 Nexus Staging Maven Plugin，并将autoReleaseAfterClose设置为true，部署到OSSRH后会发布到中央仓库。我们也可以手动执行 <code>mvn nexus-staging:release
</code> 来发布 staging repository。</p>

<h3>Reference</h3>

<ul>
<li><a href="https://central.sonatype.org/pages/ossrh-guide.html">OSSRH Guide</a></li>
<li><a href="https://central.sonatype.org/pages/requirements.html">Requirements</a></li>
<li><a href="https://central.sonatype.org/pages/apache-maven.html#nexus-staging-maven-plugin-for-deployment-and-release">Deploying to OSSRH with Apache Maven</a></li>
<li><a href="https://dzone.com/articles/publish-your-artifacts-to-maven-central">How to Publish Your Artifacts to Maven Central</a></li>
<li><a href="https://stackoverflow.com/questions/57591432/gpg-signing-failed-inappropriate-ioctl-for-device-on-macos-with-maven">“gpg: signing failed: Inappropriate ioctl for device” on MacOS with Maven</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一种构建 JavaScript 库的方法]]></title>
    <link href="http://DamianSheldon.github.io/blog/an-approach-to-building-javascript-libraries.html"/>
    <updated>2020-09-23T15:08:06+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/an-approach-to-building-javascript-libraries</id>
    <content type="html"><![CDATA[<p>最近手头有个项目需要构建 JavaScript 库，核心需求是库既能用于传统的多页面，也能用于 Angular 的单页面。目前网络上暂时好像没有这类详细教程，反而是一些理论阐述的文章较多，经过一番研究后，我得到了一个适合自己的方法。</p>

<p>由于我希望库既能用于多页面，也能用于 Angular 单页面，所以需要支持 UMD 和 ES Harmony。由于 Angular 是使用 TypeScript 开发，最好还能提供用于 TypeScript 的声明文件。最原始的想法自然是手动按要求提供各种文件，但这样工作量比较大，也不容易扩展。那么还有什么容易的办法吗？有的，最核心的想法就是库的源码只写一份，然后用工具生成各种模块系统需要文件。具体的做法可能有差异，但理念是一样的。</p>

<p>从我的需求出发，我最终选择用 TypeScript 来写库的源码，基于脱敏的考虑，这里选择 TypeScript 文档中的示例代码来演示。</p>

<p>首先我们建立好库的源码目录结构并配置好源码管理：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>simple-module-example
</span><span class='line'>├── src
</span><span class='line'>│   ├── LettersOnlyValidator.ts
</span><span class='line'>│   ├── Validation.ts
</span><span class='line'>│   ├── ZipCodeValidator.ts
</span><span class='line'>│   └── index.ts</span></code></pre></td></tr></table></div></figure>


<p>然后使用 <code>npm init</code> 生成 <code>package.json</code> 文件：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "name": "simple-module-example",
</span><span class='line'>  "version": "1.0.0",
</span><span class='line'>  "description": "A simple module example.",
</span><span class='line'>  "main": "index.js",
</span><span class='line'>  "directories": {
</span><span class='line'>    "test": "test"
</span><span class='line'>  },
</span><span class='line'>  "scripts": {
</span><span class='line'>    "test": "echo \"Error: no test specified\" && exit 1"
</span><span class='line'>  },
</span><span class='line'>  "keywords": [
</span><span class='line'>    "module",
</span><span class='line'>    "example"
</span><span class='line'>  ],
</span><span class='line'>  "author": "Meiliang Dong",
</span><span class='line'>  "license": "MIT"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>其次是按需求编辑好 <code>package.json</code> 文件。这是关键步骤，<code>package.json</code> 的 main 字段通常用于指向 UMD 版本的库；module 字段则用于指向 ES 版本的库。我们还需要配置构建脚本生成对应版本的库，最终的 <code>package.json</code> 文件内容如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    "name": "simple-module-example",
</span><span class='line'>    "version": "1.0.0",
</span><span class='line'>    "description": "A simple module example.",
</span><span class='line'>    "main": "dist/umd/simple-module-example.js",
</span><span class='line'>    "module": "dist/esm/index.js",
</span><span class='line'>    "browser": "dist/umd/simple-module-example.js",
</span><span class='line'>    "types": "dist/types/index.d.ts",
</span><span class='line'>    "files": [
</span><span class='line'>        "dist"
</span><span class='line'>    ],
</span><span class='line'>    "directories": {
</span><span class='line'>        "test": "test"
</span><span class='line'>    },
</span><span class='line'>    "scripts": {
</span><span class='line'>        "clean": "rm -rf ./dist",
</span><span class='line'>        "build": "npm run clean && npm run build:es2015 && npm run build:esm && npm run build:cjs && npm run build:umd",
</span><span class='line'>        "build:es2015": "tsc --module es2015 --target es2015 --outDir dist/es2015",
</span><span class='line'>        "build:esm": "tsc --module es2015 --outDir dist/esm",
</span><span class='line'>        "build:umd": "rollup dist/esm/index.js --format umd --name SimpleModuleExample --sourcemap --file dist/umd/simple-module-example.js",
</span><span class='line'>        "build:umd:min": "cd dist/umd && uglifyjs --compress --mangle --source-map --screw-ie8 --comments --o simple-module-example.min.js -- simple-module-example.js && gzip simple-module-example.min.js -c > simple-module-example.min.js.gz"
</span><span class='line'>    },
</span><span class='line'>    "keywords": [
</span><span class='line'>        "module",
</span><span class='line'>        "example"
</span><span class='line'>    ],
</span><span class='line'>    "author": "Meiliang Dong",
</span><span class='line'>    "license": "MIT"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>然后是编写 TypeScript 的配置文件 <code>tsconfig.json</code>， 先使用命令 <code>npm install @tsconfig/recommended --save-dev</code> 安装推荐的配置，之后根据需求定制，最终的内容如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    "extends": "@tsconfig/recommended/tsconfig.json",
</span><span class='line'>    "compilerOptions": {
</span><span class='line'>      "outDir": "./dist",
</span><span class='line'>      "target": "es5",
</span><span class='line'>      "sourceMap": true,
</span><span class='line'>      "declaration": true,
</span><span class='line'>      "declarationDir": "./dist/types"
</span><span class='line'>    },
</span><span class='line'>    "include": ["./src/**/*"]
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<p>其次是测试，测试是库开发的重要环节，它能帮我们验证库是否正常工作，后续迭代重构也要依赖它。通常的做法是使用测试框架，像 Angular 是 <a href="https://karma-runner.github.io/">Karma test runner</a>  搭配<a href="https://jasmine.github.io/">Jasmine test framework</a> ， 我们可以参考选择。</p>

<p>我这里还玩了一下用 rollup 打包, 然后在浏览器里运行测试用例。首先在库工程目录外重新创建一个测试工程，然后使用 <code>npm link</code> 命令来安装我们的开发库，具体目录结构和文件内容如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$mkdir test-simple-module-example
</span><span class='line'>├── Test.ts
</span><span class='line'>├── dist
</span><span class='line'>│   ├── esm
</span><span class='line'>│   └── test-simple-module-example.js
</span><span class='line'>├── index.html
</span><span class='line'>├── package-lock.json
</span><span class='line'>├── package.json
</span><span class='line'>├── rollup.config.js
</span><span class='line'>└── tsconfig.json</span></code></pre></td></tr></table></div></figure>


<p><code>Test.ts</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import { StringValidator, ZipCodeValidator, LettersOnlyValidator } from "simple-module-example";
</span><span class='line'>
</span><span class='line'>// Some samples to try
</span><span class='line'>let strings = ["Hello", "98052", "101"];
</span><span class='line'>
</span><span class='line'>// Validators to use
</span><span class='line'>let validators: { [s: string]: StringValidator } = {};
</span><span class='line'>validators["ZIP code"] = new ZipCodeValidator();
</span><span class='line'>validators["Letters only"] = new LettersOnlyValidator();
</span><span class='line'>
</span><span class='line'>// Show whether each string passed each validator
</span><span class='line'>strings.forEach((s) => {
</span><span class='line'>  for (let name in validators) {
</span><span class='line'>    console.log(
</span><span class='line'>      `"${s}" - ${
</span><span class='line'>        validators[name].isAcceptable(s) ? "matches" : "does not match"
</span><span class='line'>      } ${name}`
</span><span class='line'>    );
</span><span class='line'>  }
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p><code>package.json</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    "name": "test-simple-module-example",
</span><span class='line'>    "version": "1.0.0",
</span><span class='line'>    "description": "A test application for simple module example.",
</span><span class='line'>    "main": ".dist/Test.js",
</span><span class='line'>    "scripts": {
</span><span class='line'>        "clean": "rm -rf ./dist",
</span><span class='line'>        "build": "npm run clean && npm run build:esm && npm run build:bundle",
</span><span class='line'>        "build:esm": "tsc --module es2015 --outDir dist/esm",
</span><span class='line'>        "build:bundle": "rollup -c",
</span><span class='line'>        "test": "echo \"Error: no test specified\" && exit 1"
</span><span class='line'>    },
</span><span class='line'>    "author": "Meiliang Dong",
</span><span class='line'>    "license": "MIT",
</span><span class='line'>    "dependencies": {
</span><span class='line'>        "@tsconfig/recommended": "^1.0.1"
</span><span class='line'>    },
</span><span class='line'>    "devDependencies": {
</span><span class='line'>        "@rollup/plugin-node-resolve": "^9.0.0"
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><code>rollup.config.js</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import resolve from '@rollup/plugin-node-resolve';
</span><span class='line'>
</span><span class='line'>export default {
</span><span class='line'>    input: 'dist/esm/Test.js',
</span><span class='line'>    output: {
</span><span class='line'>        file: 'dist/test-simple-module-example.js',
</span><span class='line'>        format: 'umd'
</span><span class='line'>    },
</span><span class='line'>    plugins: [resolve()]
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>


<p><code>tsconfig.json</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "extends": "@tsconfig/recommended/tsconfig.json",
</span><span class='line'>  "compilerOptions": {
</span><span class='line'>    "outDir": "./dist",
</span><span class='line'>    "target": "es5",
</span><span class='line'>    "sourceMap": true,
</span><span class='line'>    "moduleResolution": "Node"
</span><span class='line'>  },
</span><span class='line'>  "include": ["./*.ts"]
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>最后是根据需要选择发布方式，例如发布到 npm 公有仓库，具体做法参考官方文档就好了。</p>

<h3>Reference</h3>

<ul>
<li><a href="https://www.freecodecamp.org/news/anatomy-of-js-module-systems-and-building-libraries-fadcd8dbd0e/">Learn the basics of the JavaScript module system and build your own library</a></li>
<li><a href="https://gist.github.com/jayphelps/51bafb4505558736fdba0aaf8bfe69d3">TypeScript output es2015, esm (ES Modules), CJS, UMD, UMD + Min + Gzip.</a></li>
<li><a href="http://ifandelse.com/its-not-hard-making-your-library-support-amd-and-commonjs/">It&rsquo;s Not Hard: Making Your Library Support AMD and CommonJS</a></li>
<li><a href="https://addyosmani.com/writing-modular-js/">Writing Modular JavaScript With AMD, CommonJS &amp; ES Harmony</a></li>
<li><a href="https://yanhaijing.com/javascript/2018/08/17/2020-js-lib/">如何写一个现代的JavaScript库</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux 使用笔记(三)]]></title>
    <link href="http://DamianSheldon.github.io/blog/linux-useful-command-line-part-3.html"/>
    <updated>2020-09-02T11:40:17+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/linux-useful-command-line-part-3</id>
    <content type="html"><![CDATA[<h3>1.系统迁移和备份</h3>

<p>A:为了数据安全，我们需要对系统备份，换新电脑或者更换云服务时我们需要迁移系统。Linux 系统备份和迁移的方法很多，我这里打算使用 tar 。</p>

<h4>系统备份</h4>

<p>首先是根据自己的实际情况列出需要备份的目录，通常有：</p>

<ul>
<li><code>/etc/</code></li>
<li><code>/home/</code></li>
<li><code>/var/spool/mail/</code></li>
<li><code>/var/spool/cron/</code></li>
<li><code>/root</code></li>
<li><code>/usr/local/bin</code></li>
</ul>


<p>然后使用 tar 命令打包：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tar -jcv -f /backups/backup-system-20200902.tar.bz2 \
</span><span class='line'>&gt; --exclude=/root/*.bz2 --exclude=/root/*.gz --exclude=/home/loop* \
</span><span class='line'>&gt; /etc /home /var/spool/mail /var/spool/cron /root /usr/local/bin</span></code></pre></td></tr></table></div></figure>


<h4>系统恢复</h4>

<p>首先可以将备份解压到 <code>/tmp</code> 目录，之后使用 rsync 命令复制到对应目录便可恢复。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tar -jxv -f /backups/backup-system-20200902.tar.bz2 -C /tmp
</span><span class='line'>rsync -avuz /tmp/etc/ /etc
</span><span class='line'>rsync -avuz /tmp/home/ /home
</span><span class='line'>rsync -avuz /tmp/var/spool/mail/ /var/spool/mail
</span><span class='line'>rsync -avuz /tmp/var/spool/cron/ /var/spool/cron
</span><span class='line'>rsync -avuz /tmp/root/ /root
</span><span class='line'>rsync -avuz /tmp/usr/local/bin/ /usr/local/bin</span></code></pre></td></tr></table></div></figure>


<!--more-->


<h4><del>系统迁移</del></h4>

<p><del>换新电脑或者更换云服务时我们可能不想要上面那么麻烦，而可能想直接迁移系统，至少我是这么想的，这时我们可以使用下面的方法：</del></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 全系统备份
</span><span class='line'>tar --create --absolute-names --preserve-permissions --bzip2  --file=/media/sf_Windows10-shared-folder/virtual-box-centos-8.tar.bz2 --exclude=/dev --exclude=/media --exclude=/metainfo --exclude=/mnt --exclude=/proc --exclude=/run --exclude=/sys  --exclude=/tmp --exclude=/var --exclude=/@System.solv /
</span><span class='line'>
</span><span class='line'># 如有需要也可检查备份的文件
</span><span class='line'>tar -tjpPvf /media/sf_Windows10-shared-folder/virtual-box-centos-8.tar.bz2 | less
</span><span class='line'>
</span><span class='line'># 将备份包放到 /tmp 下解压
</span><span class='line'>tar -xjvf virtual-box-centos-8.tar.bz2</span></code></pre></td></tr></table></div></figure>


<p>Reference:</p>

<ul>
<li><a href="https://wiki.archlinux.org/index.php/migrate_installation_to_new_hardware">Migrate installation to new hardware</a></li>
<li><a href="https://www.digitalocean.com/community/tutorial_series/how-to-migrate-to-a-new-linux-server">How To Migrate to a New Linux Server</a></li>
</ul>


<h3>2.dnf list plugins command missing</h3>

<p>A:The information is provided for nearly all command with &ldquo;-v&rdquo; option. See:</p>

<p>Loaded plugins: builddep, changelog, config-manager, copr, debug, debuginfo-install, download, generate_completion_cache, needs-restarting, playground, product-id, repoclosure, repodiff, repograph, repomanage, reposync, subscription-manager, uploadprofile
Updating Subscription Management repositories.</p>

<p>Reference:</p>

<ul>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=1694041">dnf list plugins command missing</a></li>
</ul>


<h3>3.How to add startup application on CentOS 8?</h3>

<p>A:We can add by gnome tweaks. Of course you should install it with Software.</p>

<p>Reference:</p>

<ul>
<li><a href="https://linuxhint.com/tweaking_gnome_desktop_centos8/">Tweaking GNOME Desktop Environment on CentOS 8</a></li>
</ul>


<h3>4.开启 CentOS 8 上 tomcat 9 的注意事项</h3>

<p>A:首先是安装 <code>tomcat-native</code>；其次是注意从日志文件中定位错误。我遇到了证书文件权限导致找不到文件的情况。</p>

<h3>5.man: can&rsquo;t set the locale; make sure <code>$LC_*</code> and <code>$LANG</code> are correct</h3>

<p>A:问题是由于 ssh 终端的 locale 设置导致系统的 locale 设置出现问题，我关闭了 sshd_config 中 locale 相关的设置，使用系统的 locale 设置。</p>

<p>Reference:</p>

<ul>
<li><a href="https://wiki.archlinux.org/index.php/Locale#Make_locale_changes_immediate">Locale</a></li>
<li><a href="https://access.redhat.com/solutions/974273">How to change system locale on RHEL7?</a></li>
</ul>


<h3>6.在 CentOS 8 上使用 alternatives 设置默认的 java</h3>

<p>A: 在 CentOS 8 上安装 java 包之后不知为什么 alternatives 中的配置居然不对，导致提示 java command not found，于是只好手动配置：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 初始情况如下
</span><span class='line'>$ sudo alternatives  --list
</span><span class='line'>libnssckbi.so.x86_64      auto    /usr/lib64/pkcs11/p11-kit-trust.so
</span><span class='line'>python                    manual  /usr/bin/python3
</span><span class='line'>ifup                      auto    /usr/libexec/nm-ifup
</span><span class='line'>cifs-idmap-plugin         auto    /usr/lib64/cifs-utils/cifs_idmap_sss.so
</span><span class='line'>python3                   auto    /usr/bin/python3.6
</span><span class='line'>nmap                      auto    /usr/bin/ncat
</span><span class='line'>java                      manual  /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.262.b10-0.el8_2.x86_64/jre/bin/java
</span><span class='line'>jre_openjdk               auto    /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.262.b10-0.el8_2.x86_64/jre
</span><span class='line'>jre_1.8.0                 auto    /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.262.b10-0.el8_2.x86_64/jre
</span><span class='line'>jre_1.8.0_openjdk         auto    /usr/lib/jvm/jre-1.8.0-openjdk-1.8.0.262.b10-0.el8_2.x86_64
</span><span class='line'>links                     manual  /usr/bin/elinks
</span><span class='line'>javac                     auto    /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.265.b01-0.el8_2.x86_64/bin/javac
</span><span class='line'>java_sdk_openjdk          auto    /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.265.b01-0.el8_2.x86_64
</span><span class='line'>java_sdk_1.8.0            auto    /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.265.b01-0.el8_2.x86_64
</span><span class='line'>java_sdk_1.8.0_openjdk    auto    /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.265.b01-0.el8_2.x86_64
</span><span class='line'>
</span><span class='line'># 确认下正确设置的相关参数
</span><span class='line'>$ alternatives --display java_sdk_openjdk
</span><span class='line'>java_sdk_openjdk - status is auto.
</span><span class='line'> link currently points to /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.265.b01-0.el8_2.x86_64
</span><span class='line'>/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.265.b01-0.el8_2.x86_64 - family java-1.8.0-openjdk.x86_64 priority 1800265
</span><span class='line'>Current `best' version is /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.265.b01-0.el8_2.x86_64.
</span><span class='line'>
</span><span class='line'># 设置默认 java 相关功能的路径
</span><span class='line'>sudo alternatives --install /usr/bin/java java /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.265.b01-0.el8_2.x86_64/jre/bin/java 1800265 --family java-1.8.0-openjdk.x86_64
</span><span class='line'>
</span><span class='line'>sudo alternatives --install /usr/lib/jvm/jre_openjdk jre_openjdk /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.265.b01-0.el8_2.x86_64/jre 1800265 --family java-1.8.0-openjdk.x86_64
</span><span class='line'>
</span><span class='line'>sudo alternatives --install /usr/lib/jvm/jre_1.8.0 jre_1.8.0 /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.265.b01-0.el8_2.x86_64/jre 1800265 --family java-1.8.0-openjdk.x86_64
</span><span class='line'>
</span><span class='line'>sudo alternatives --install /usr/lib/jvm/jre_1.8.0_openjdk jre_1.8.0_openjdk /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.265.b01-0.el8_2.x86_64 1800265 --family java-1.8.0-openjdk.x86_64 
</span><span class='line'>
</span><span class='line'># 确认设置结果
</span><span class='line'>$ alternatives --list
</span><span class='line'>libnssckbi.so.x86_64      auto    /usr/lib64/pkcs11/p11-kit-trust.so
</span><span class='line'>python                    manual  /usr/bin/python3
</span><span class='line'>ifup                      auto    /usr/libexec/nm-ifup
</span><span class='line'>cifs-idmap-plugin         auto    /usr/lib64/cifs-utils/cifs_idmap_sss.so
</span><span class='line'>python3                   auto    /usr/bin/python3.6
</span><span class='line'>nmap                      auto    /usr/bin/ncat
</span><span class='line'>links                     manual  /usr/bin/elinks
</span><span class='line'>javac                     auto    /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.265.b01-0.el8_2.x86_64/bin/javac
</span><span class='line'>java_sdk_openjdk          auto    /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.265.b01-0.el8_2.x86_64
</span><span class='line'>java_sdk_1.8.0            auto    /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.265.b01-0.el8_2.x86_64
</span><span class='line'>java_sdk_1.8.0_openjdk    auto    /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.265.b01-0.el8_2.x86_64
</span><span class='line'>java                      auto    /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.265.b01-0.el8_2.x86_64/jre/bin/java
</span><span class='line'>jre_openjdk               auto    /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.265.b01-0.el8_2.x86_64/jre
</span><span class='line'>jre_1.8.0                 auto    /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.265.b01-0.el8_2.x86_64/jre
</span><span class='line'>jre_1.8.0_openjdk         auto    /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.265.b01-0.el8_2.x86_64</span></code></pre></td></tr></table></div></figure>


<p>另外我们还可以在 <code>/etc/profile.d</code> 目录下新建 <code>java.sh</code> 文件来设置 <code>JAVA_HOME</code> 和 <code>JRE_HOME</code>：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># /etc/profile.d/java.sh
</span><span class='line'>JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.265.b01-0.el8_2.x86_64"
</span><span class='line'>JRE_HOME="/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.265.b01-0.el8_2.x86_64/jre"</span></code></pre></td></tr></table></div></figure>


<p>Reference:</p>

<ul>
<li><a href="https://www.redhat.com/sysadmin/alternatives-command">Introduction to the alternatives command in Linux</a></li>
</ul>


<h3>7. chsh command not available on CentOS 8</h3>

<p>A:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ dnf provides '*/chsh'
</span><span class='line'>Last metadata expiration check: 8 days, 1:03:13 ago on Thu 01 Oct 2020 03:47:40 AM UTC.
</span><span class='line'>util-linux-user-2.32.1-22.el8.x86_64 : libuser based util-linux utilities
</span><span class='line'>Repo        : BaseOS
</span><span class='line'>Matched from:
</span><span class='line'>Filename    : /etc/pam.d/chsh
</span><span class='line'>Filename    : /usr/bin/chsh
</span><span class='line'>Filename    : /usr/share/bash-completion/completions/chsh
</span><span class='line'>
</span><span class='line'>$ rpm -q util-linux-user-2.32.1-22.el8.x86_64
</span><span class='line'>package util-linux-user-2.32.1-22.el8.x86_64 is not installed
</span><span class='line'>
</span><span class='line'>$ sudo dnf install util-linux-user-2.32.1-22.el8.x86_64</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="https://forums.centos.org/viewtopic.php?t=73864">CentOS 8.0.1905 - &lsquo;chsh&rsquo; : command not found</a></li>
</ul>


<h3>8. rsync 同步目录时产生了很多以 <code>~</code> 结尾的文件</h3>

<p>A:原因是加上了 b 选项，会对文件做备份</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rsync -avuzb treasure-workspace/dist/treasure/ treasure-lib-dist</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Reference:</p>

<ul>
<li><a href="https://unix.stackexchange.com/questions/76189/what-does-the-tilde-mean-at-the-end-of-a-filename">What does the tilde (~) mean at the end of a filename? </a></li>
<li><a href="https://unix.stackexchange.com/questions/132669/what-is-bitwise-c?noredirect=1&amp;lq=1">What is bitwise.c~? </a></li>
</ul>


<h3>9. systemd 服务停止后邮件通知管理员</h3>

<p>A: 我们可以利用 ExecStopPost 设置，以 mysql 为例，先准备好邮件发送程序，这里我们可以参考 <a href="https://wiki.archlinux.org/index.php/Systemd/Timers#MAILTO">Arch linux 的做法</a>：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/usr/local/bin/systemd-email
</span><span class='line'>#!/bin/sh
</span><span class='line'>
</span><span class='line'>/usr/bin/sendmail -t &lt;&lt;ERRMAIL
</span><span class='line'>To: $1
</span><span class='line'>From: systemd &lt;root@$HOSTNAME&gt;
</span><span class='line'>Subject: $2
</span><span class='line'>Content-Transfer-Encoding: 8bit
</span><span class='line'>Content-Type: text/plain; charset=UTF-8
</span><span class='line'>
</span><span class='line'>$(systemctl status --full "$2")
</span><span class='line'>ERRMAIL
</span><span class='line'>
</span><span class='line'>/etc/systemd/system/status_email_user@.service
</span><span class='line'>[Unit]
</span><span class='line'>Description=status email for %i to user
</span><span class='line'>
</span><span class='line'>[Service]
</span><span class='line'>Type=oneshot
</span><span class='line'>ExecStart=/usr/local/bin/systemd-email address %i
</span><span class='line'>User=nobody
</span><span class='line'>Group=systemd-journal
</span></code></pre></td></tr></table></div></figure>


<p>还要配置一下 mysql，还要给 mysql 加上合适执行权限</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/etc/systemd/system/mysqld.service.d/override.conf
</span><span class='line'>[Service]
</span><span class='line'>ExecStopPost=/usr/bin/sudo systemctl start status_email_user@mysqld.service
</span><span class='line'>
</span><span class='line'>/etc/sudoers
</span><span class='line'>mysql           ALL = (ALL) NOPASSWD: ALL</span></code></pre></td></tr></table></div></figure>


<p>这里应该对 msql 的权限作更小的限制，但是设置单个命令的 sudo 规则没有生效，限于时间关系先暂时这样配置。</p>

<p>Referece:</p>

<ul>
<li><a href="https://superuser.com/questions/1360346/how-to-send-an-email-alert-when-a-linux-service-has-stopped">How to send an email alert when a linux service has stopped?</a></li>
<li><a href="https://serverfault.com/questions/876233/how-to-send-an-email-if-a-systemd-service-is-restarted">How to send an email if a systemd service is restarted?</a></li>
</ul>


<h3>10. error running non-shared postrotate script for</h3>

<p><code>/var/log/mysql/mysqld.log of '/var/log/mysql/mysqld.log '</code></p>

<p>A:In case the root user has a password, then you
have to create a <code>/root/.my.cnf</code> configuration file
with the following content:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[mysqladmin]
</span><span class='line'>password = &lt;secret&gt;
</span><span class='line'>user= root</span></code></pre></td></tr></table></div></figure>


<p>where <code>"&lt;secret&gt;"</code> is the password.</p>

<p>ATTENTION: The <code>/root/.my.cnf</code> file should be readable <code>_ONLY_</code> by root !</p>

<p>Reference:</p>

<ul>
<li><a href="https://centosfaq.org/centos/centos-82-error-running-non-shared-postrotate-script-for-varlogmysqlmysqldlog/">CentOS 8.2: Error Running Non-shared Postrotate Script For /var/log/mysql/mysqld.log</a></li>
</ul>


<h3>11. 设置服务器上用户能打开的最大文件描述符数量</h3>

<p>A:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// /etc/security/limits.d/100-limits.conf
</span><span class='line'># hard limit for max opened files for user
</span><span class='line'>*      hard    nofile          65536
</span><span class='line'># soft limit for max opened files for user
</span><span class='line'>*       soft    nofile         20480
</span></code></pre></td></tr></table></div></figure>


<p>Reference:</p>

<ul>
<li><a href="https://www.linuxtechi.com/set-ulimit-file-descriptors-limit-linux-servers/">How to set ulimit and file descriptors limit on Linux Servers</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL 使用笔记(二)]]></title>
    <link href="http://DamianSheldon.github.io/blog/using-mysql-note-part-two.html"/>
    <updated>2020-07-18T15:57:24+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/using-mysql-note-part-two</id>
    <content type="html"><![CDATA[<h3>1.如何查看数据库中所有的存储过程?</h3>

<p>A: <code>mysql&gt; show procedure status where db = 'db_for_mysql_crash_course'\G;</code>;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web API 的设计与开发--读书笔记]]></title>
    <link href="http://DamianSheldon.github.io/blog/notes-of-web-api-the-good-parts.html"/>
    <updated>2020-04-29T10:31:16+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/notes-of-web-api-the-good-parts</id>
    <content type="html"><![CDATA[<p>Web API 的设计与开发是开发者日常工作的重要内容，我们该如何来做好这项工作呢？我觉得一个务实的方法是先参考前辈们的做法，也就是站在巨人的肩上，理解消化后再尝试去突破，这样可能会事半功倍。经过一番搜索，找到了 <code>&lt;&lt;Web API 的设计与开发&gt;&gt;</code>， 我个人觉得这是一本对 Web API 进行全面、细致和深入剖析的书，对 Web API 的设计与开发很有帮助，值得一读。</p>

<p>书的内容是按照整分的逻辑组织，并依先易后难的顺序来讲解相关知识。下面我按自己的理解尝试对书中内容做个简单的总结。</p>

<p>Web API 是用于完成某种需求，由于需求会变化，所以一次就设计出完美 Web API 的想法是不现实的，所以一开始应该要给 Web API 的更改留有余地，这是很容易忽视的地方。推荐的做法是在 URI 中嵌入版本信息，典型的形式是 <code>http://api.linkedin.com/v1/people</code>。</p>

<p>虽然一次就完美地设计 Web API 的想法不现实，但我们还是想尽量做好，减少 Web API 版本变更的次数，毕竟版本越多维护成本越高，那么我们该如何设计 Web API 呢？</p>

<p>Web API 通过 HTTP 协议来完成通信，在设计时我们应该最大程度地利用 HTTP 协议规范。基于标准协议设计的 API 至少要比使用私有协议设计的 API 更容易理解，还会减少使用时引入的 bug，使你的 API 得到更广泛的使用，提高利用已有的程序库或代码的可能。</p>

<p>有了整体设计原则后，我们来看下具体的请求和响应设计。API 的功能是为了完成项目的需求，最完备的请求会包含请求端点、请求方法、请求参数和请求数据体(Request Body)，我们依次来审视请求的每个部分。</p>

<p>端点是指用于访问 API 的 URI，普适又重要的设计原则有：</p>

<ul>
<li>短小便于输入的 URI</li>
<li>人可以读懂的 URI</li>
<li>没有大小写混用的 URI</li>
<li>不会暴露服务端架构的 URI</li>
<li>规则统一的 URI</li>
</ul>


<p>端点设计的注意事项：</p>

<ul>
<li>使用名词的复数形式</li>
<li>注意所用的单词</li>
<li>不使用空格及需要编码的字符</li>
<li>使用连字符来连接多个单词</li>
</ul>


<p>URI 和 HTTP 方法之间的关系可以认为是操作对象和操作方法的关系。如果把 URI 当作 API(HTTP) 的 “操作对象 = 资源”， HTTP 方法则表示 “进行怎样的操作”。通过用不同方法访问同一个 URI 端点，不但可以获取信息，还能修改信息、删除信息等，这样的思想正成为 Web API 设计的主流方式。</p>

<table>
<thead>
<tr>
<th> 方法名 </th>
<th> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td> GET </td>
<td> 获取资源 </td>
</tr>
<tr>
<td> POST </td>
<td> 新增资源 </td>
</tr>
<tr>
<td> PUT </td>
<td> 覆盖已有资源 </td>
</tr>
<tr>
<td> DELETE </td>
<td> 删除资源 </td>
</tr>
<tr>
<td> PATCH </td>
<td> 更新部分资源 </td>
</tr>
<tr>
<td> HEAD </td>
<td> 获取资源的元信息 </td>
</tr>
</tbody>
</table>


<p>有时请求可能还需要传递参数，在设计 URI 时，必须决定是把特定参数放在查询参数里还是路径里，决策的依据有以下两点：</p>

<ul>
<li>是否是表示唯一资源所需的信息</li>
<li>是否可以省略</li>
</ul>


<p>请求数据体，个人认为可以采用面向对象编程的思想来设计，整个处理过程会轻松很多。</p>

<p>说完请求，让我们来看下响应。首先是正确使用状态码，国内由于历史原因遗留下来无论请求是否成功都一律返回 200 的问题，全站切换到 HTTPS 后，我们还是应该最大程度地利用 HTTP 规范，这样我们能受益于通用的 HTTP 程序库，减轻客户端的负担。</p>

<p>其次是数据格式，这里的数据格式是指该用怎样的形式来描述 API 返回的结构化数据，具体而言就是指 JSON、XML 等数据格式。关于这一点，事实上几乎没有可讨论的，因为我们通常就是使用 JSON 作为默认的数据格式，若有需求 API 也可以支持 XML 的格式，这是最贴近现实的做法。</p>

<p>再次是数据内部结构，我们重点看下数据应该以数组还是对象返回，作者更推荐使用对象来封装数据的方式，因为该方式有如下几个优点:</p>

<ul>
<li>更容易理解响应数据表示什么</li>
<li>响应数据通过对象的封装实现了结构统一</li>
<li>可以避免安全方面的风险</li>
</ul>


<p>从次是各个数据的格式，各个数据项组成了最终的数据，只有掌握了如何处理单个数据项格式才能设计出合理的响应体数据格式。作者重点介绍了如何描述性别数据、日期格式和大整数，受益匪浅。</p>

<p>最后是出错信息的表示，同样，我们需要选择合适的状态码，出误信息建议以消息体的形式返回，出错信息应该包含详细的错误代码、人们能够读懂的相关信息，以及记载有详细说明的文档页面的 URI，如下所示：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "error": {
</span><span class='line'>      "code": 2013,
</span><span class='line'>      "message": "Bad authentication token",
</span><span class='line'>      "info": "http://docs.example.com/api/v1/authentication"
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>如果想支持描述多个错误同时发生，可以返回出错信息数组，</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "errors": [
</span><span class='line'>      {
</span><span class='line'>          "code": 2013,
</span><span class='line'>          "message": "Bad authentication token",
</span><span class='line'>          "info": "http://docs.example.com/api/v1/authentication"
</span><span class='line'>      }
</span><span class='line'>  ]
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>以上是基础内容，作者最后还介绍进阶内容，开发牢固的 Web API，对我们把 Web API 设计和开发提高到新高度有非常大的帮助。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ionic App 使用 cordova hot code push 实现热更新]]></title>
    <link href="http://DamianSheldon.github.io/blog/ionic-app-use-cordova-hot-code-push-achieve-live-update.html"/>
    <updated>2020-01-07T17:02:35+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/ionic-app-use-cordova-hot-code-push-achieve-live-update</id>
    <content type="html"><![CDATA[<p>本文主要记录 Ionic App 使用 cordova hot code push 实现热更新时遇到问题的解决方法，另外也简单记录下使用方法，方便日后查阅。</p>

<p>Cordova hot code push 插件的原作者已经不维护了，我们可以选择一个可能最好的 fork 来使用。 <a href="http://gitpop2.herokuapp.com/">gitpop2</a> 可以帮助我们选择，我从中选择了当前 star 最多的一个 fork。</p>

<p>Ionic App 使用 cordova hot code push 实现热更新的基本步骤如下：</p>

<ol>
<li><p>在 ionic 工程中添加 cordova hot code push plugin</p>

<pre><code class="`"> $ ionic cordova plugin add https://github.com/snipking/cordova-hot-code-push.git
</code></pre></li>
<li><p>安装 Cordova Hot Code Push CLI client</p>

<pre><code class="`"> $ npm install -g cordova-hot-code-push-cli
</code></pre></li>
<li><p>为指定平台编译工程</p>

<pre><code class="`"> $ ionic cordova prepare android
</code></pre></li>
<li><p>执行插件初始化</p>

<pre><code class="`"> $ cd /path/to/project/root
 $ cordova-hcp init
</code></pre></li>
<li><p>生成插件配置文件</p>

<pre><code class="`"> $ cordova-hcp build
</code></pre></li>
<li><p>运行到设备上</p></li>
<li><p>开发和发布应用新版本的 web</p>

<pre><code class="`"> // 1. 开发
 // 2. 为指定平台编译工程生成 web 
 $ ionic build --engine=cordova --platform=android
 // 3. 生成新插件配置文件
 $ cordova-hcp build
 // 4. 部署到服务器
</code></pre></li>
</ol>


<p>在使用的过程中遇到的第一个问题是更新之后白屏。使用 Chrome 的 remote devices 调试 android webview 找到了问题的原因，ionic 应用中 <code>&lt;base href="http://DamianSheldon.github.io/" /&gt;</code>， cordova hot code push 会将 web 代码拷贝到外部存储上，webview 使用形如 <code>file:///data/user/0/com.tenneshop.liveupdatedemo/files/cordova-hot-code-push-plugin/2020.01.07-16.16.39/www/index.html</code> 的路径来加载应用，此时 <code>document.baseURI = /</code>，加载其他相对路径的 js 文件时，是相对这个路径，例如 <code>&lt;script src="cordova.js"&gt;&lt;/script&gt;</code>，就是以 <code>/cordova.js</code> 去加载，于是就会提示找不到文件。从上面的分析我们也知道，解决问题的一个办法是修正 base href 的值，我们可以在 index.html 的 head 元素加入下面的代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;script&gt;
</span><span class='line'>    document.write('&lt;base href="' + document.location.href + '" /&gt;');
</span><span class='line'>&lt;/script&gt;
</span></code></pre></td></tr></table></div></figure>


<p>这样我们就修正文件路径的问题，很不巧，虽然文件的路径是对了，但是 ionic 默认不响应 file schema 的请求，我们需要做些工作，先让 WebViewLocalServer.java 支持响应 file schema，将 createHostingDetails 改成如下实现：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>private void createHostingDetails() {
</span><span class='line'>  final String assetPath = this.basePath;
</span><span class='line'>
</span><span class='line'>  if (assetPath.indexOf('*') != -1) {
</span><span class='line'>    throw new IllegalArgumentException("assetPath cannot contain the '*' character.");
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  PathHandler handler = new PathHandler() {
</span><span class='line'>    @Override
</span><span class='line'>    public InputStream handle(Uri url) {
</span><span class='line'>      InputStream stream = null;
</span><span class='line'>      String path = url.getPath();
</span><span class='line'>      try {
</span><span class='line'>        if (url.getScheme().equals("file")) {
</span><span class='line'>          stream = protocolHandler.openFile(path);
</span><span class='line'>        } else if (path.startsWith(contentStart)) {
</span><span class='line'>          stream = protocolHandler.openContentUrl(url);
</span><span class='line'>        } else if (path.startsWith(fileStart) || !isAsset) {
</span><span class='line'>          if (!path.startsWith(fileStart)) {
</span><span class='line'>            path = basePath + url.getPath();
</span><span class='line'>          }
</span><span class='line'>          stream = protocolHandler.openFile(path);
</span><span class='line'>        } else {
</span><span class='line'>          stream = protocolHandler.openAsset(assetPath + path);
</span><span class='line'>        }
</span><span class='line'>      } catch (IOException e) {
</span><span class='line'>        Log.e(TAG, "Unable to open asset URL: " + url);
</span><span class='line'>        Log.e(TAG, e.getLocalizedMessage());
</span><span class='line'>        return null;
</span><span class='line'>      }
</span><span class='line'>
</span><span class='line'>      return stream;
</span><span class='line'>    }
</span><span class='line'>  };
</span><span class='line'>
</span><span class='line'>  registerUriForScheme(httpScheme, handler, authority);
</span><span class='line'>  registerUriForScheme(httpsScheme, handler, authority);
</span><span class='line'>  if (!customScheme.equals(httpScheme) && !customScheme.equals(httpsScheme)) {
</span><span class='line'>    registerUriForScheme(customScheme, handler, authority);
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  registerUriForScheme("file", handler, "");
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>然后是 isLocalFile 方法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>private boolean isLocalFile(Uri uri) {
</span><span class='line'>  String path = uri.getPath();
</span><span class='line'>  if (path.startsWith(contentStart) || path.startsWith(fileStart) || uri.getScheme().equals("file")) {
</span><span class='line'>    return true;
</span><span class='line'>  }
</span><span class='line'>  return false;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>做完这些工作后 ionic 就可以响应 file schema 请求了。</p>

<p>继续测试，我发现更新后第二次打开还是显示 App bundle asset 中的 web，这有点奇怪。仔细查看日志，确实有加载外部存储的 web , 但却被 <code>http://localhost/</code> 的请求覆盖了，这是什么原因呢？经过对代码逻辑的一番梳理，我发现是 IonicWebViewEngine 中 onPageStarted 方法的原因：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public void onPageStarted(WebView view, String url, Bitmap favicon) {
</span><span class='line'>  super.onPageStarted(view, url, favicon);
</span><span class='line'>  String launchUrl = parser.getLaunchUrl();
</span><span class='line'>  if (!launchUrl.contains(WebViewLocalServer.httpsScheme) && !launchUrl.contains(WebViewLocalServer.httpScheme) && url.equals(launchUrl)) {
</span><span class='line'>    view.stopLoading();
</span><span class='line'>    // When using a custom scheme the app won't load if server start url doesn't end in /
</span><span class='line'>    String startUrl = CDV_LOCAL_SERVER;
</span><span class='line'>    if (!scheme.equalsIgnoreCase(WebViewLocalServer.httpsScheme) && !scheme.equalsIgnoreCase(WebViewLocalServer.httpScheme)) {
</span><span class='line'>      startUrl += "/";
</span><span class='line'>    }
</span><span class='line'>    view.loadUrl(startUrl);
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>MainActivity 触发 webview 加载 <code>file:///android_asset/www/index.html</code>，然后 cordova hot code push plugin 启动工作，它会让 webview 加载外部存储的 web，之后 IonicWebViewEngine 的 onPageStarted 收到 <code>file:///android_asset/www/index.html</code> 的请求的回调，它先停止了 webview 的加载工作，即 cordova hot code push plugin 启动加载外部存储的 web 的请求，再开始 <code>http://localhost/</code> 的请求，也就是打印出来日志的记录。正是这个方法时序的问题导致成功更新之后再重启应用仍然加载 app bundle asset 的 web。一种解决办法是我们直接让 MainActivity 直接加载 <code>http://localhost/</code>，就像下面这样:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public void onCreate(Bundle savedInstanceState)
</span><span class='line'>{
</span><span class='line'>   super.onCreate(savedInstanceState);
</span><span class='line'>
</span><span class='line'>   // enable Cordova apps to be started in the background
</span><span class='line'>   Bundle extras = getIntent().getExtras();
</span><span class='line'>   if (extras != null && extras.getBoolean("cdvStartInBackground", false)) {
</span><span class='line'>       moveTaskToBack(true);
</span><span class='line'>   }
</span><span class='line'>   launchUrl = "http://localhost/";
</span><span class='line'>   // Set by &lt;content src="index.html" /> in config.xml
</span><span class='line'>   loadUrl(launchUrl);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>这样热更新就可以正常工作了。</p>

<p>我继续做了点测试，又发现一个和 ionic icon 相关的问题，ionic 4 使用了 Fetch API 来请求 ionic icon 的 svg 资源，由于现在是使用 file schema 来指定资源路径，由于 Fetch API 不支持 file schema 所以就报错 <code>Fetch API cannot load file:///xxx/www/svg/md-star.svg. URL scheme "file" is not supported.</code> 我们得想办法来解决这个问题，一个办法替换 fetch 方法的实现，如:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;script>
</span><span class='line'>   document.write('&lt;base href="' + document.location.href + '" />');
</span><span class='line'>
</span><span class='line'>   var originalFetch = window.fetch;
</span><span class='line'>
</span><span class='line'>   window.fetch = function() {
</span><span class='line'>       var args = [];
</span><span class='line'>       for (var _i = 0; _i &lt; arguments.length; _i++) {
</span><span class='line'>           args[_i] = arguments[_i];
</span><span class='line'>       }
</span><span class='line'>       var url = args[0];
</span><span class='line'>       if (typeof url === 'string' && url.match(/\.svg/)) {
</span><span class='line'>           return new Promise(function(resolve, reject) {
</span><span class='line'>               var req = new XMLHttpRequest();
</span><span class='line'>               req.open('GET', url, true);
</span><span class='line'>               req.addEventListener('load', function() {
</span><span class='line'>                   resolve({
</span><span class='line'>                       ok: true,
</span><span class='line'>                       status: 200,
</span><span class='line'>                       text: function() {
</span><span class='line'>                           return Promise.resolve(req.responseText);
</span><span class='line'>                       }
</span><span class='line'>                   });
</span><span class='line'>               });
</span><span class='line'>               req.addEventListener('error', reject);
</span><span class='line'>               req.send();
</span><span class='line'>           });
</span><span class='line'>       } else {
</span><span class='line'>           return originalFetch.apply(void 0, args);
</span><span class='line'>       }
</span><span class='line'>   };
</span><span class='line'>&lt;/script></span></code></pre></td></tr></table></div></figure>


<p>在这些测试过程中，我还发现 cordova hot code push 更新时只做了版本字符是否相等的判断，这在服务器端的版本低于本地版本时，插件仍然会做更新，这是有问题的，我们需要严格这里的判断，让它只有在服务端的版本高于本地版本时才做更新。相关代码位于 UpdateLoaderWorker 的 run 方法中。</p>

<p>最后一个要考虑的问题是如何将我们修改的代码和 ionic 的代码很好的整合起来？我现在的想法是创建一个私有的扩展 IonicWebViewEngine 和 WebViewLocalServer，然后借鉴 ionic 通过 config.xml 的 web 偏好设置的方法，像下面的代码:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;preference name="webView" value="com.ionicframework.cordova.webview.IonicWebViewEngine" /&gt;</span></code></pre></td></tr></table></div></figure>


<p>回头测试下这个想法，好了有时间也许可以整理好代码提个 Pull Request。</p>

<p>Reference:</p>

<ul>
<li><a href="https://github.com/angular/angular/issues/13948">Cannot run angular 2+ from file:/// - looks like &lsquo;base href=&ldquo;/&rdquo;&rsquo; is the issue</a></li>
<li><a href="https://github.com/ionic-team/ionicons/issues/572">IONIC v4: Icon won&rsquo;t work in android</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在 macOS 上用 VirtualBox 安装 CentOS]]></title>
    <link href="http://DamianSheldon.github.io/blog/install-centos-8-on-macos-with-virtualbox.html"/>
    <updated>2020-01-04T13:49:46+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/install-centos-8-on-macos-with-virtualbox</id>
    <content type="html"><![CDATA[<p>最近为了更好的实践 Linux，决定在 mac 上使用 VirtualBox 安装一个 CentOS，主要是参考鸟哥的这篇<a href="http://linux.vbird.org/linux_basic/0157installcentos7.php#centos_1">安裝 CentOS7.x</a>。</p>

<p>安装之后打开系统出现闪屏，英语应该是称为 screen flicker，google 之后在 VirtualBox 的论坛找到解决方法:</p>

<ol>
<li><p>进入单用户维护模式</p>

<pre><code class="`"> a. 重启系统
 b. 在菜单选择界面键入 e，进入 grub2 的指令编辑模式
 c. 在指定内核和根文件系统这行最后加上 systemd.unit=rescue.target
 d. 键入 ctrl + x 进入系统
</code></pre></li>
<li><p>强制使用 Xorg</p>

<pre><code class="`">  a. 用 vim 打开 /etc/gdm3/custom.conf
  b. 删除 WaylandEnable=false 前的 # 注释符号
  c. 保存文件后，systemctl default 来进入正常模式 
</code></pre></li>
</ol>


<p>解决了闪屏之后，想通过虚拟机菜单中的调整窗口大小来让系统的屏幕全屏发现无用，想起来应该要安装 VirtualBox Guest Additions，于是插入虚拟机提供的光盘来安装。</p>

<p>首先是提示 kernel headers not found for target kernel 的错误，也提示详细的错误信息位于 /var/log/vboxadd-setup.log，我们可以通过查看该错误日志来找到对应解决方法。于是尝试安装对应的内核头文件，命令为 <code>yum install kernel-headers kernel-devel</code>，之后执行 <code>/sbin/rcvboxadd setup</code>.</p>

<p>仍然提示 kernel headers not found for target kernel，通过 <code>uname -r</code> 和 <code>rpm -q kernel-headers</code> 发现版本不一致，于是重启系统选择最新的内核版本。</p>

<p>再次尝试安装，提示 Error building the module，查看错误日志提示需要安装 <code>libelf-dev, libelf-devel or elfutils-libelf-devel</code> ，CentOS 上只有 elfutils-libelf-devel ，安装之后再次安装 VirtualBox Guest Additions。</p>

<p>提示</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ValueError: File context for /opt/VBoxGuestAdditions-6.0.14/other/mount.vboxsf already defined
</span><span class='line'>VirtualBox Guest Additions: Running kernel modules will not be replaced until
</span><span class='line'>the system is restarted</span></code></pre></td></tr></table></div></figure>


<p>这个问题暂时没找到解决方法，但是可以让 CentOS 全屏了，就暂时先不管这个问题了。</p>

<h3>释放虚拟机硬盘空间</h3>

<p>在虚拟机使用过程中硬盘的空间会慢慢增加，但是即使虚拟机中删除了文件实际占用空间减少，外部的硬盘文件大小仍然没有减少，这对小硬盘电脑可伤不起，于是想办法释放虚拟机磁盘空间。大前提是虚拟机的硬盘类型是 Dynamically allocated storage，主要分为两大步：</p>

<ol>
<li>在虚拟机寄主系统(如 CentOS)中删除文件释放空间并压缩硬盘</li>
<li>在虚拟机宿主系统(如 macOS)中压缩硬盘文件</li>
</ol>


<p>下面以 Windows 10 为例：</p>

<ol>
<li>开始按钮 > 设置 > 系统 > 存储空间 > 根据空间占用选择删除无用的文件释放之间</li>
<li>在左下方搜索框中搜索 Defragment ，然后打开 Defragment and Optimize Drives，选择想要压缩的硬盘进行压缩；</li>
<li>从微软下载 <a href="https://technet.microsoft.com/en-us/sysinternals/bb897443">SDelete</a> 助手</li>
<li>使用 sdelete 填充释放的硬盘空间，假设 SDelete 下载之后的放在 Downloads 目录下，我们想压缩 c 盘</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd "C:\Users\bob\Downloads"
</span><span class='line'>sdelete.exe c: -z</span></code></pre></td></tr></table></div></figure>


<ol>
<li>最后在宿主系统中压缩硬盘文件，例如我是 macOS：</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ /Applications/VirtualBox.app/Contents/MacOS/VBoxManage list hdds
</span><span class='line'># 找到想要压缩的硬盘文件路径 
</span><span class='line'>
</span><span class='line'>$ /Applications/VirtualBox.app/Contents/MacOS/VBoxManage modifymedium disk /Users/meiliang/VirtualBox\ VMs/Windows\ 10/Windows\ 10.vdi --compact</span></code></pre></td></tr></table></div></figure>


<h3>修改记录</h3>

<ul>
<li>2020/10/02：增加释放虚拟机硬盘空间的方法</li>
<li>2020/01/04：第一次完成</li>
</ul>


<p>Reference:</p>

<ul>
<li><a href="http://linux.vbird.org/linux_basic/0157installcentos7.php#centos_1">第三章、安裝 CentOS7.x</a></li>
<li><a href="https://forums.virtualbox.org/viewtopic.php?f=8&amp;t=85110">Ubuntu 1710 screen flicker</a></li>
<li><a href="https://forums.virtualbox.org/viewtopic.php?t=91563">Centos7 Guest Additions fails: kernel headers not found</a></li>
<li><a href="https://www.howtogeek.com/312883/how-to-shrink-a-virtualbox-virtual-machine-and-free-up-disk-space/">How to Shrink a VirtualBox Virtual Machine and Free Up Disk Space</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[创建 Cordova plugin 及其 Ionic Native]]></title>
    <link href="http://DamianSheldon.github.io/blog/create-cordova-plugin.html"/>
    <updated>2019-09-30T09:59:14+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/create-cordova-plugin</id>
    <content type="html"><![CDATA[<p>本文介绍如何创建 Cordova plugin 及其 Ionic Native，主要内容如下：</p>

<ul>
<li>Cordova Plugin 的工作原理</li>
<li>如何创建 Cordova Plugin</li>
<li>如何创建 Cordova Plugin 对应的 Ionic Native</li>
</ul>


<h3>Cordova Plugin 的工作原理</h3>

<p>我们简要介绍下 Cordova Plugin 的工作原理，这样我们才能解决在开发中遇到的问题。</p>

<p>Plugin js 端的入口方法签名形式如下:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>exec(&lt;successFunction&gt;, &lt;failFunction&gt;, &lt;service&gt;, &lt;action&gt;, [&lt;args&gt;]);</span></code></pre></td></tr></table></div></figure>


<p>successFunction, failFunction 是成功和失败的回调函数，args 则是传递给原生端的参数。service, action 则是用来映射到原生端的对象和方法。这个映射是通过 plugin.xml 建立起来的。在 plugin.xml 中我们有如下元数据信息:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;feature name="&lt;service_name&gt;"&gt;
</span><span class='line'>    &lt;param name="android-package" value="&lt;full_name_including_namespace&gt;" /&gt;
</span><span class='line'>&lt;/feature&gt;</span></code></pre></td></tr></table></div></figure>


<p>service 就是对应 service_name 指定的对象，而 action 则是该对象能处理方法。</p>

<p>具体是怎么映射的呢？</p>

<p>以 android 为例，我们安装的 plugin 信息会保存在 config.xml 中，<code>cordova prepare android</code> 命令会将 config.xml 在 android 的资源文件目录中生成一个同名文件，两个文件内容大致相同，plugin 的信息会改成如下形式表示：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;feature name="&lt;service_name&gt;"&gt;
</span><span class='line'>    &lt;param name="android-package" value="&lt;full_name_including_namespace&gt;" /&gt;
</span><span class='line'>&lt;/feature&gt;</span></code></pre></td></tr></table></div></figure>


<p>这个形式就是我们上面见过的形式。</p>

<p>当 js 端调用 exec 方法时，它会通过 webview 建立的通信通道(通常是用 WebView.addJavascriptInterface)调用 PluginManager 的 exec 方法，PluginManager 则根据 service_name 查找或创建 plugin ，然后调用 plugin 的 exec 方法，并将 action 作为参数传入，于是我们便可按需响应 action 请求。</p>

<h3>如何创建 Cordova Plugin</h3>

<h4>安装 plugman</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ npm install -g plugman</span></code></pre></td></tr></table></div></figure>


<h4>创建 cordova plugin</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ plugman create --name &lt;pluginName&gt; --plugin_id &lt;pluginID&gt; --plugin_version &lt;version&gt; [--path &lt;directory&gt;] [--variable NAME=VALUE]
</span><span class='line'>
</span><span class='line'>eg.
</span><span class='line'>$plugman create --name cordova-plugin-onsite-signature --plugin_id cordova-plugin-onsite-signature --plugin_version 0.0.1</span></code></pre></td></tr></table></div></figure>


<h4>添加 platform</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$plugman platform add --platform_name android</span></code></pre></td></tr></table></div></figure>


<h4>创建 package.json 文件</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ plugman createpackagejson &lt;directory&gt;
</span><span class='line'>
</span><span class='line'>eg.
</span><span class='line'>$plugman createpackagejson .</span></code></pre></td></tr></table></div></figure>


<h4>安装 cordova plugin</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// 方法一：这种方式的命令和添加官方的插件类似，个人推荐此方法，可以少记一个命令
</span><span class='line'>$cordova plugin add git+ssh://git@192.168.8.91/git/cordova-plugin-onsite-signature.git
</span><span class='line'>
</span><span class='line'>// 方法二：
</span><span class='line'>$ plugman install --platform android --project platforms/android --plugin ../LogicLinkPlugin/</span></code></pre></td></tr></table></div></figure>


<h4>卸载 cordova plugin</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// 与安装的方法对应有两种卸载方法
</span><span class='line'>// 方法一：$cordova plugin remove cordova-plugin-onsite-signature
</span><span class='line'>
</span><span class='line'>// 方法二：
</span><span class='line'>$ plugman uninstall --platform android --project platforms/android --plugin ../LogicLinkPlugin/</span></code></pre></td></tr></table></div></figure>


<h4>发布</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Create a tag
</span><span class='line'>$git tag &lt;tagname&gt;
</span><span class='line'>
</span><span class='line'>// Push to repository
</span><span class='line'>$git push origin master</span></code></pre></td></tr></table></div></figure>


<h4>升级 cordova plugin</h4>

<p>现在暂时没有直接升级的命令，采用的是先卸载后安装新版本的方法。</p>

<h3>如何创建 Cordova Plugin 对应的 Ionic Native</h3>

<h4>Creating Plugin Wrappers</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Navigate to ionic-native root path
</span><span class='line'>$cd  ionic-native
</span><span class='line'>
</span><span class='line'>// Install dependencies first time
</span><span class='line'>$npm install
</span><span class='line'>
</span><span class='line'>// Create plugin wrapper
</span><span class='line'>// When gulp installed locally
</span><span class='line'>$npx gulp plugin:create -n PluginName
</span><span class='line'>
</span><span class='line'>// When gulp installed globally
</span><span class='line'>$gulp plugin:create -n PluginName</span></code></pre></td></tr></table></div></figure>


<h4>安装</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// You need to run npm run build in the ionic-native project, this will create a dist directory. The dist directory will contain a sub directory @ionic-native with all the packages compiled in there.
</span><span class='line'>$npm run build
</span><span class='line'>
</span><span class='line'>//Copy the package(s) you created/modified to your app's node_modules under the @ionic-native directory.
</span><span class='line'>$cp -r dist/@ionic-native/plugin-name ../my-app/node_modules/@ionic-native/</span></code></pre></td></tr></table></div></figure>


<h3>使用</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Import the plugin in a @NgModule and add it to the list of Providers. 
</span><span class='line'>// app.module.ts
</span><span class='line'>import { APIClient } from '@ionic-native/api-client/ngx';
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>@NgModule({
</span><span class='line'>  ...
</span><span class='line'>
</span><span class='line'>  providers: [
</span><span class='line'>    ...
</span><span class='line'>    APIClient
</span><span class='line'>    ...
</span><span class='line'>  ]
</span><span class='line'>  ...
</span><span class='line'>})
</span><span class='line'>export class AppModule { }
</span><span class='line'>
</span><span class='line'>// After the plugin has been declared, it can be imported and injected like any other service:
</span><span class='line'>
</span><span class='line'>// login.service.ts
</span><span class='line'>import { APIClient } from '@ionic-native/api-client/ngx';
</span><span class='line'>import { ServiceName } from '@ionic-native/api-client/ngx';
</span><span class='line'>
</span><span class='line'>constructor(private apiClient: APIClient) { }
</span><span class='line'>
</span><span class='line'>this.apiClient.get(ServiceName.Login, JSON.stringify(user))
</span><span class='line'>      .then((result: string) =&gt; {
</span><span class='line'>        console.log('api client login:', result);
</span><span class='line'>        //TODO: Parse server return json to UserExt object
</span><span class='line'>        const routePath = this.simulateLogin(username);        
</span><span class='line'>        resolve(routePath);
</span><span class='line'>      })
</span><span class='line'>      .catch((error: string) =&gt; {
</span><span class='line'>        console.log('api client login error:', error);
</span><span class='line'>
</span><span class='line'>        reject(error);
</span><span class='line'>      });</span></code></pre></td></tr></table></div></figure>


<h1>Reference:</h1>

<ul>
<li><a href="https://github.com/RootSoft/Create-a-custom-Cordova-plugin">Create-a-custom-Cordova-plugin</a></li>
<li><a href="https://github.com/ionic-team/ionic-native/blob/master/DEVELOPER.md">Ionic Native Developer Guide</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web 开发问题汇总(四)]]></title>
    <link href="http://DamianSheldon.github.io/blog/web-development-notes-part-four.html"/>
    <updated>2019-07-16T17:24:01+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/web-development-notes-part-four</id>
    <content type="html"><![CDATA[<h3>1.如何实现如下布局：两个元素A和B，其中A的宽度为包裹其内容，B则占用剩余的宽度？</h3>

<p>A:A 元素利用 float 的包裹性，B 元素则利用 BFC。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;div class="container"&gt;
</span><span class='line'>    &lt;div class="right"&gt;&lt;/div&gt;
</span><span class='line'>    &lt;div class="left"&gt;&lt;/div&gt;
</span><span class='line'>&lt;/div&gt;
</span><span class='line'>
</span><span class='line'>.container {
</span><span class='line'>    width:600px;
</span><span class='line'>    height:200px;
</span><span class='line'>    border:1px solid;
</span><span class='line'>}
</span><span class='line'>.left {
</span><span class='line'>    width:auto;
</span><span class='line'>    height:200px;
</span><span class='line'>    background:red;
</span><span class='line'>    overflow:hidden;
</span><span class='line'>}
</span><span class='line'>.right {
</span><span class='line'>    height:200px;
</span><span class='line'>    width:200px;
</span><span class='line'>    background:blue;
</span><span class='line'>    float:left;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Reference:<a href="https://stackoverflow.com/questions/1260122/expand-a-div-to-fill-the-remaining-width">Expand a div to fill the remaining width</a></p>

<h3>2.Meaning of ~ in import of scss files</h3>

<p>A:</p>

<blockquote><p>From documentation on a <code>sass-loader#imports</code> project,</p>

<blockquote><p>webpack provides an advanced mechanism to resolve files. The sass-loader uses node-sass' custom importer feature to pass all queries to the webpack resolving engine. Thus you can import your Sass modules from node_modules. Just prepend them with a ~ to tell webpack that this is not a relative import</p></blockquote>

<p>So if you have a file named foo.css and a module foo then you would use ~ if you want to include the module.</p></blockquote>

<p>Reference:<a href="https://stackoverflow.com/questions/38880187/meaning-of-in-import-of-scss-files">Meaning of ~ in import of scss files</a></p>

<!--more-->


<h3>3.为什么创建 Observable 时传入的函数签名不需要包含 this? 示例如下:</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// API Document:
</span><span class='line'>constructor(subscribe?: (this: Observable&lt;T&gt;, subscriber: Subscriber&lt;T&gt;) =&gt; TeardownLogic)
</span><span class='line'>
</span><span class='line'>// Usage code:
</span><span class='line'>const observable = new Observable(subscriber =&gt; {
</span><span class='line'>  subscriber.next(1);
</span><span class='line'>  subscriber.next(2);
</span><span class='line'>  subscriber.next(3);
</span><span class='line'>  setTimeout(() =&gt; {
</span><span class='line'>    subscriber.next(4);
</span><span class='line'>    subscriber.complete();
</span><span class='line'>  }, 1000);
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>A:Here this is a special syntax in Typescript. It specifies the type of the &ldquo;this&rdquo; the function expects. So here it just means it should be called by a Observable with the same Type T as the Subscriber.</p>

<p>It comes first in the parameter list. It is a fake parameter, and should invoked without it.</p>

<p>More info can be found <a href="https://github.com/Microsoft/TypeScript/wiki/What's-new-in-TypeScript#specifying-the-type-of-this-for-functions">Here</a>.</p>

<p>Reference:<a href="https://stackoverflow.com/questions/54886652/confused-by-rxjs-observable-constructor-and-this-argument">Confused by Rxjs Observable constructor and &lsquo;this&rsquo; argument</a></p>

<h3>4.How to make a div take the remaining height?</h3>

<p>A:</p>

<ol>
<li>Flex</li>
<li>Absolute Positioning</li>
<li>Table</li>
<li>CSS3 cacl</li>
</ol>


<p>Reference:<a href="https://www.whitebyte.info/programming/css/how-to-make-a-div-take-the-remaining-height">How to make a div take the remaining height</a></p>

<h3>5.Dynamic modal height based on content in Ionic4?</h3>

<p>A:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Modal page template:
</span><span class='line'>&lt;div class="inner-content">
</span><span class='line'>  &lt;!-- Construct your view hierarchy here-->
</span><span class='line'>&lt;/div>
</span><span class='line'>
</span><span class='line'>// Present method:
</span><span class='line'>async presentAutoHeightModal() {
</span><span class='line'>  const modal = await this.modalController.create({
</span><span class='line'>      component: AutoHeightModalPage,
</span><span class='line'>      cssClass: 'auto-height'
</span><span class='line'>    });
</span><span class='line'>
</span><span class='line'>    return await modal.present();
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>// app.scss
</span><span class='line'>ion-modal.auto-height {
</span><span class='line'>    flex-direction: column;
</span><span class='line'>    justify-content: flex-end;
</span><span class='line'>    --height: auto;
</span><span class='line'>    
</span><span class='line'>    .ion-page {
</span><span class='line'>        position: relative;
</span><span class='line'>        display: block;
</span><span class='line'>        contain: content;
</span><span class='line'>
</span><span class='line'>        .inner-content {
</span><span class='line'>            max-height: 80vh;
</span><span class='line'>            overflow: auto;
</span><span class='line'>            padding: 10px;
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>6.Invalid Host Header</h3>

<p>A:通过外网访问本地的 ionic 开发服务时提示 Invalid Host Header，原因是 angular 默认会对 host 进行验证，所以我们可以通过传入 <code>--disableHostCheck=true</code> 来关闭验证，由于是 ionic 工程，我们传入的参数需要在 <code>--</code> 之后，也就是类似如下命令: <code>ionic serve --port 8080 -- --disableHostCheck=true</code>.</p>

<blockquote><p>ionic serve uses the Angular CLI. Use ng serve &ndash;help to list all Angular CLI options for serving your app. See the ng serve docs[1] for explanations. Options not listed below are considered advanced and can be passed to the Angular CLI using the &ndash; separator after the Ionic CLI arguments.</p></blockquote>

<p>Reference:<a href="https://community.c9.io/t/ionic-4-angular-invalid-host-header-error/25526">Ionic 4 angular - Invalid Host header error</a></p>

<p>Reference:</p>

<ul>
<li><a href="https://forum.ionicframework.com/t/dynamic-modal-height-based-on-content-in-ionic-v4/139595">Dynamic modal height based on content in Ionic v4</a></li>
<li><a href="https://github.com/ionic-team/ionic/issues/16852">resize modal based on content</a></li>
</ul>


<h3>7.error: illegal character: &lsquo;\ufeff&rsquo; in java</h3>

<p>A:You probably have a Byte Order Marker (BOM) at the start of the file. You can use sed to remove it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sed '1s/^.//' infile &gt;&gt; outfile</span></code></pre></td></tr></table></div></figure>


<p>Reference:</p>

<ul>
<li><a href="https://stackoverflow.com/questions/45697794/error-illegal-character-ufeff-in-java/45698146">error: illegal character: &lsquo;\ufeff&rsquo; in java</a></li>
</ul>


<h3>8.Why super.clone can downcast to subclass?</h3>

<p>A:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>The method clone for class Object performs a specific cloning operation. First, if the class of this object does not implement the interface Cloneable, then a CloneNotSupportedException is thrown. Note that all arrays are considered to implement the interface Cloneable and that the return type of the clone method of an array type T[] is T[] where T is any reference or primitive type. Otherwise, this method creates a new instance of the class of this object and initializes all its fields with exactly the contents of the corresponding fields of this object, as if by assignment; the contents of the fields are not themselves cloned. Thus, this method performs a "shallow copy" of this object, not a "deep copy" operation.</span></code></pre></td></tr></table></div></figure>


<p>Reference:</p>

<ul>
<li><a href="https://stackoverflow.com/questions/19047248/java-downcast-in-clone">Java - downcast in clone</a></li>
</ul>


<h3>9.How to generate MetaModel classes with Spring Data JPA in eclipse?</h3>

<p>A:</p>

<ol>
<li>add maven denpendency</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;dependency&gt;
</span><span class='line'>  &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
</span><span class='line'>  &lt;artifactId&gt;hibernate-jpamodelgen&lt;/artifactId&gt;
</span><span class='line'>&lt;/dependency&gt;</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Maven > Update project</li>
</ol>


<h3>10.Use webroot plugin to obtain certificates</h3>

<p>A:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ certbot-auto certonly --webroot --webroot-path /var/lib/tomcat8/webapps/ROOT -d www.tenneshop.com --webroot-path /var/lib/tomcat8/apiapps/ROOT -d api.tenneshop.com</span></code></pre></td></tr></table></div></figure>


<p>Reference:<br/>
* <a href="https://certbot.eff.org/docs/using.html?highlight=webroot%20path#webroot">User Guide</a></p>

<h3>11.flex 布局下怎样实现text-overflow: ellipsis 效果?</h3>

<p>A:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;div class="flex-parent">
</span><span class='line'>
</span><span class='line'>   &lt;div class="flex-child long-and-truncated">
</span><span class='line'>       1. This is a long string that is OK to truncate please and thank you
</span><span class='line'>   &lt;/div>
</span><span class='line'>
</span><span class='line'>   &lt;div class="flex-child short-and-fixed">
</span><span class='line'>       &lt;div>&lt;/div>
</span><span class='line'>       &lt;div>&lt;/div>
</span><span class='line'>       &lt;div>&lt;/div>
</span><span class='line'>   &lt;/div>
</span><span class='line'>
</span><span class='line'>&lt;/div>
</span><span class='line'>
</span><span class='line'>&lt;div class="flex-parent has-child">
</span><span class='line'>
</span><span class='line'>   &lt;div class="flex-child long-and-truncated-with-child">
</span><span class='line'>       &lt;h2>2. This is a long string that is OK to truncate please and thank you&lt;/h2>
</span><span class='line'>   &lt;/div>
</span><span class='line'>
</span><span class='line'>   &lt;div class="flex-child short-and-fixed">
</span><span class='line'>       &lt;div>&lt;/div>
</span><span class='line'>       &lt;div>&lt;/div>
</span><span class='line'>       &lt;div>&lt;/div>
</span><span class='line'>   &lt;/div>
</span><span class='line'>
</span><span class='line'>&lt;/div>
</span><span class='line'>
</span><span class='line'>&lt;div class="flex-parent has-child">
</span><span class='line'>
</span><span class='line'>   &lt;div class="flex-child long-and-truncated-with-child-corrected">
</span><span class='line'>       &lt;h2>3. This is a long string that is OK to truncate please and thank you&lt;/h2>
</span><span class='line'>   &lt;/div>
</span><span class='line'>
</span><span class='line'>   &lt;div class="flex-child short-and-fixed">
</span><span class='line'>       &lt;div>&lt;/div>
</span><span class='line'>       &lt;div>&lt;/div>
</span><span class='line'>       &lt;div>&lt;/div>
</span><span class='line'>   &lt;/div>
</span><span class='line'>
</span><span class='line'>&lt;/div>
</span><span class='line'>
</span><span class='line'>.flex-parent {
</span><span class='line'>  display: -webkit-box;
</span><span class='line'>  display: flex;
</span><span class='line'>  -webkit-box-align: center;
</span><span class='line'>  align-items: center;
</span><span class='line'>  padding: 10px;
</span><span class='line'>  margin: 30px 0;
</span><span class='line'>}
</span><span class='line'>   
</span><span class='line'>h2 {
</span><span class='line'>  font-size: 1rem;
</span><span class='line'>  font-weight: normal;
</span><span class='line'>}
</span><span class='line'>   
</span><span class='line'>.long-and-truncated {
</span><span class='line'>  -webkit-box-flex: 1;
</span><span class='line'>  flex: 1;
</span><span class='line'>  white-space: nowrap;
</span><span class='line'>  overflow: hidden;
</span><span class='line'>  text-overflow: ellipsis;
</span><span class='line'>}
</span><span class='line'>   
</span><span class='line'>.short-and-fixed {
</span><span class='line'>  white-space: nowrap;
</span><span class='line'>}
</span><span class='line'>   
</span><span class='line'>.short-and-fixed>div {
</span><span class='line'>  width: 30px;
</span><span class='line'>  height: 30px;
</span><span class='line'>  border-radius: 10px;
</span><span class='line'>  background: lightgreen;
</span><span class='line'>  display: inline-block;
</span><span class='line'>}
</span><span class='line'>   
</span><span class='line'>.long-and-truncated-with-child {
</span><span class='line'>  -webkit-box-flex: 1;
</span><span class='line'>  flex: 1;
</span><span class='line'>}
</span><span class='line'>   
</span><span class='line'>.long-and-truncated-with-child h2 {
</span><span class='line'>  white-space: nowrap;
</span><span class='line'>  overflow: hidden;
</span><span class='line'>  text-overflow: ellipsis;
</span><span class='line'>}
</span><span class='line'>   
</span><span class='line'>.long-and-truncated-with-child-corrected {
</span><span class='line'>  -webkit-box-flex: 1;
</span><span class='line'>  flex: 1;
</span><span class='line'>  min-width: 0;
</span><span class='line'>  /* or some value */
</span><span class='line'>}
</span><span class='line'>   
</span><span class='line'>.long-and-truncated-with-child-corrected h2 {
</span><span class='line'>  white-space: nowrap;
</span><span class='line'>  overflow: hidden;
</span><span class='line'>  text-overflow: ellipsis;
</span><span class='line'>}
</span><span class='line'>   
</span><span class='line'>body {
</span><span class='line'>  padding: 40px;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Reference:</p>

<ul>
<li><a href="https://css-tricks.com/flexbox-truncated-text/">Flexbox and Truncated Text</a></li>
</ul>


<h3>12.Disable Hypertext Application Language (HAL) in JSON?</h3>

<p>A:<code>spring.data.rest.default-media-type=application/json</code></p>

<p>Reference:</p>

<ul>
<li><a href="https://stackoverflow.com/questions/23264044/disable-hypertext-application-language-hal-in-json">Disable Hypertext Application Language (HAL) in JSON?</a></li>
<li><a href="https://stackoverflow.com/questions/35205524/how-to-set-the-default-media-type-for-spring-data-rest">How to set the default media type for spring-data-rest?</a></li>
</ul>


<h3>13.What is the speed of each preset option for network throttling?</h3>

<p>A:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Preset,download(kb/s),upload(kb/s),RTT(ms)
</span><span class='line'>GPRS,50,20,500
</span><span class='line'>Regular 2G,250,50,300
</span><span class='line'>Good 2G,450,150,150
</span><span class='line'>Regular 3G,750,250,100
</span><span class='line'>Good 3G, 1000,750,40
</span><span class='line'>Regular 4G, 4000,3000,20
</span><span class='line'>DSL 2000, 1000,5
</span><span class='line'>WiFi 30000,150000,2</span></code></pre></td></tr></table></div></figure>


<p>Reference:</p>

<ul>
<li><a href="https://stackoverflow.com/questions/48367042/in-chrome-dev-tools-what-is-the-speed-of-each-preset-option-for-network-throttl">In chrome dev tools, what is the speed of each preset option for network throttling?</a></li>
</ul>


<h3>14.Allocation failed - JavaScript heap out of memory</h3>

<p>A:<code>export NODE_OPTIONS=--max_old_space_size=8192</code></p>

<p>Reference:</p>

<ul>
<li><a href="https://stackoverflow.com/questions/53421021/ionic-cordova-build-ios-prod-gets-an-javascript-heap-out-of-memory">ionic cordova build ios &ndash;prod gets an JavaScript heap out of memory</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[浅析移动端跨平台开发]]></title>
    <link href="http://DamianSheldon.github.io/blog/an-introduction-to-mobile-cross-platform-development.html"/>
    <updated>2019-04-15T17:04:39+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/an-introduction-to-mobile-cross-platform-development</id>
    <content type="html"><![CDATA[<p>最近几年随着移动端开发日益成熟以及 Web 技术的快速发展，跨平台开发技术如雨后春笋一般冒出来，这是所有从业者不能忽视的现象。这种现象导致很多公司主动或被动去研究相关的技术。我也不例外，对它的研究应该是夹杂着被动和主动。作为原生开发者，本来对日常的开发工作驾轻就熟，恐怕内心本身不会有太多意愿去迁移到新的技术，至少我一开始是这种心态；另一方面，跨平台开发在行业内日益受到关注，倒逼开发者去了解它、研究它。对于变化，我们可能本能的抗拒，但内心理性的声音告诉我们：变化是永恒的不变，我们应该拥抱变化。</p>

<p>在经过一段时间的学习和研究，自己觉得对它的认识更加清晰和深刻，于是决定将它们记下来，以便日后记忆模糊了帮助回忆，也可以验证对于它发展的看法。我这里主要谈谈自己对它的看法，技术选择，以及这种技术的基本使用流程。</p>

<p>跨平台开发不是什么新概念，我觉得这是一种很自然的想法。因为我们总是想减轻自己的工作负担，公司则会想减少成本，提高效率，于是就会想能不能一套代码跑到多个平台，两套代码合并成一套，应该可以删除掉不少重复代码，开发和维护的代码量就少了，可能也不需要那么多开发人员了，应该来说还是很有吸引力的。</p>

<p>不过我觉得问题不像看起来那么简单。上面提到了很多跨平台开发的优点，但它也有自己的缺点。而且看到很多二变为一，很容易认为是在减少，加上业界大厂分享的成功经验，更是验证这种想法。但我想强调具体情况具体分析，这里有一个很重要的点，我们所在的公司开发人员水平和大厂肯定是不一样的，所以它能取得成功，我们不一定能玩得转。所以当两套代码合并成一套，在大厂可能确实减少了开发和维护工作，但我们自己的情况可能就不一定了，因为这对开发人员的技术水平要求要高不少，这是需要考虑的一个问题。当我们在一些项目上使用跨平台技术开发时，如果能本着实事求是的态度，相信会更容易成功。有了这些认识，接下来，我们具体来看看跨平台开发技术。</p>

<p>当我们想跨平台时，我们就会寻找平台的共同之处，应该来讲目光很容易聚焦到 Web 技术上。移动端都可以使用 Web 技术，而且它在桌面端已经实现，可以说是一个不错的选择，于是就可以尝试从这里突破。本质上其实就是 Web 应用，我们要做是将设备的能力提供给 Web，Cordova 则是这方面的一个代表。</p>

<p>我认为移动端 Web 应用的主要问题还是性能，虽然现在硬件性能很强悍，但是很多 Web 应用和原生的体验还是有不小差别，所以这时就要权衡了。那能不能有个完美的解决方案呢？既然性能有问题，我们是不可以想办法优化性能，让它和原生体验一样？我认为 React Native 是顺着这种思路出现的，它使用 javascript 编码，最终设备上运行的是原生代码，即然是运行原生代码，性能自然可以做到和原生一致。虽然性能问题是解决了，但它需要用 javascript 编写多套代码，而且开发人员也要懂原生开发，或者有原生开发支持，不然遇到问题恐怕不好解决。</p>

<!--more-->


<p>除了 Cordova 和 React Native，Google 最近还推出 Flutter，由于技术栈差异很大，以及个人精力有限，暂时不打算研究。我决定在 Cordova 和 React Native 中选择。React Native 虽然性能不错，但各平台需要自己的代码，这和一份代码的初衷不符；另外它动态部署事件的能力也稍逊一筹，框架本身的发展和原生藕合很紧密。基于这些原因，我偏向选择 Cordova。</p>

<p>Cordova 让 Web 访问设备的能力比较方便，屏蔽了很多差异，但是它没有提供 UI 支持，如果我们想做出漂亮的界面，需要自己做，或者更好的办法是找一个好用的 UI 库。而且最好是搭配一个 SPA 框架，因为我们的应用通常不会只有一个界面，SPA 可以帮助我们在单个 WebView 里实现应用的功能。至此我们的脉络应该是比较清晰了，综合这些信息，我觉得 ionic 是个不错的选择。对于原生开发者，我们一开始可能对 Web 技术不是很熟悉，ionic 将相关技术整合在一起，这降低了学习的门槛。说到这里，我想起在前期，在搜索过程中，很多国产的跨平台技术映入眼帘，如 APICloud, DCloud,但我觉得技术群众基础也很重要，这样我们学的技术在其他公司能有用武之地，也容易招到合适的人才，综合考虑便没有选择这些技术。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web 界面布局]]></title>
    <link href="http://DamianSheldon.github.io/blog/web-ui-layout.html"/>
    <updated>2019-03-06T09:27:15+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/web-ui-layout</id>
    <content type="html"><![CDATA[<p>Web 应用程序是用户与软件系统的接口，用户通过她与系统进行交互。在 Web 应用程序的开发过程中，实现交互界面占工作内容的很大一部分比例，界面布局则又是这其中的重要组成部分，所以她值得我们花时间去掌握，以便完成工作任务，进而提高工作效率。</p>

<p>Web 诞生的背景是更好的共享信息，而这信息起初便是文字、图片。为了展示图文信息，涌现出了很多布局方式，一种称为流的布局方式在竞争中胜出了。</p>

<p>在这种布局方式中，界面元素被大体分为两类：一类是块级元素；另一类是是内联元素。块级元素负责结构布局，内联元素负责内容。在默认情况下，块级元素会像水流一样填满容器的宽度，内联元素则是从左至右，从上往下堆叠。很显然完全使用默认的布局行为是不能完成所有的需求的，于是在此基础上通过破坏流演化出新的布局行为，进而来满足我们的各种布局需求。所以总结下来，Web 的布局方法主要是如下几种：</p>

<ul>
<li>默认流布局行为</li>
<li>Float</li>
<li>Positioning</li>
<li>Table layout</li>
<li>Flexbox</li>
<li>Grid</li>
</ul>


<p>界面布局的核心任务是控制界面元素的位置和大小。前面我们说过块级元素负责结构布局，所以位置主要是由她来控制。元素的布局信息是通过盒模型来表达的，下面是她的示意图：</p>

<p><img class="center" src="http://DamianSheldon.github.io/images/css-box-model.png"></p>

<p>margin 控制块元素间的间隙，padding 控制内容与块元素边框的间隙，所以可以用来控制位置。虽然 margin 是用来控制元素间的间隙，但我们通常可能希望将这种影响局部化，不然由于浏览器窗口大小变化，页面布局会受到很大影响，是与我们流布局的理念相挬的。因此她们主要是用在功能块内部。</p>

<p>在页面布局时，通常会将各功能用块元素包裹起来，这样可以简化布局工作。于是页面就由一棵元素树组成，类似下图:</p>

<p><img class="center" src="http://DamianSheldon.github.io/images/html-element-tree.png"></p>

<p>在默认的流布局行为下，块元素的位置很有限，要么从布局容器的左上角开始，要么放在前一个块元素下面，这样恐怕不能完成多样的布局需求。只有拥有能布局到任意位置的能力，才能担此重任。于是需要借助 Positioning 和 Float 布局方法。</p>

<p>Positioning 布局方法是通过改变元素的 position 值来改变她的位置，她可能的值为：<code>static | relative | absolute| fixed</code>，static 是默认值，relative 是相对默认位置定位，absolute 是相对父元素中第一个不为 static 的元素定位，fixed 则是相对 viewport，这些属性大大增强了布局定位能力。</p>

<!--more-->


<p>除了 Positioning 可以改变破坏流，Float 也可以。她本身是用来实现文字环绕图片的效果，但这种特性也可以用来实现布局。这些布局方法在处理某些界面布局时非常困难，甚至不可能，于是 Flexbox, Grid 等的新布局方法出现了。所以总结一下就是，默认流布局行为、Float 和 Positioning 可以控制块元素在容器中的位置，而 Table layout、 Flexbox 和 Grid 主要是控制布局容器内部的布局行为。</p>

<p>梳理完控制位置的方法，我们来看下元素的大小。先看内联非替换元素，它的大小与 font-size 和包含的内容相关。而内联替换元素的大小计算规则要复杂些，基本规则是依次取如下尺寸:</p>

<ul>
<li>CSS 尺寸；</li>
<li>HTML 尺寸；</li>
<li>固有尺寸；</li>
</ul>


<p>祼露的 <code>&lt;img&gt;</code> 元素是个例外，需要留意下，但不影响内在的梳理脉胳。</p>

<p>块级替换元素使用内联替换元素相同的计算规则。所以，我们重点来看下块级非替换元素的尺寸计算。首先，我们肯定可以使用 width 和 height 直接设置她的尺寸，但如果是应用在页面的主体结构布局上是和流布局的理念想违背，我们希望她的宽度是自动填满布局容器，高度是基于她的内容，也就是内联元素。</p>

<p>块元素内部每行内联元素由行框盒子包含，有多少行就有多少个行框盒子，而 <code>line-height</code> 以决定行框盒子的高度，所以块级非替换元素主要由 <code>line-height</code> 决定高度。但是她也受 <code>vertical-align</code> 的影响，这时候由于内联元素和幽灵空白节点的默认基线对齐影响，会造成高度会有些许变化，这是我们需要注意的。</p>

<h2>Reference</h2>

<ul>
<li>CSS 世界</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS App Distribution]]></title>
    <link href="http://DamianSheldon.github.io/blog/ios-app-distribution.html"/>
    <updated>2018-12-04T14:33:49+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/ios-app-distribution</id>
    <content type="html"><![CDATA[<p>iOS App 有不少分发方法，她们散落在 Apple 的文档中，并未归总到一处，所以本文对她们进行了总结，方便查阅。</p>

<p>首先我们简单梳理下这些分发方法，然后重点说明下 ipa 文件的安装方法。 Apple 制作的这张表格将分发方法归纳得很全：</p>

<table>
<thead>
<tr>
<th> Method </th>
<th style="text-align:left;"> Description </th>
</tr>
</thead>
<tbody>
<tr>
<td> App Store </td>
<td style="text-align:left;"> Distributes your app through the App Store, signed with an Apple Developer Program distribution provisioning profile. </td>
</tr>
<tr>
<td> Ad Hoc </td>
<td style="text-align:left;"> Distributes your app to testers with registered devices, signed with an ad hoc provisioning profile.<br>The devices need to be registered in your developer account and are limited to 100 devices per product family per year. If you don’t want to use a portion of these development devices for testing, distribute your app using TestFlight instead.<br>If you are a member of the Apple Developer Enterprise Program, choose this option to test your app. Only members of the Apple Developer Program have access to App Store Connect and TestFlight. </td>
</tr>
<tr>
<td> Development </td>
<td style="text-align:left;"> Distributes your app to testers with registered devices, signed with a development provisioning profile. </td>
</tr>
<tr>
<td> Enterprise </td>
<td style="text-align:left;"> Distributes your app to users in your organization, signed with an Apple Developer Enterprise Program distribution provisioning profile. </td>
</tr>
</tbody>
</table>


<p>虽然分发方法有很多，但可以分为两类：一类是通过 App Store 分发；另一类则是在 App Store 外分发。通过 App Store 分发时的流程很统一，都是上传应用到 iTunes Connection，等待审核发布，所以没有什么好说的。但是在 App Store 外发布时选择就多样了，我们既可以走像 App Store 分发那样流程的 TestFlight，也可以导出 ipa 文件然后安装。</p>

<p>下面我们介绍在 iPhone 上安装 ipa 的方法：</p>

<h2>Install using iTunes</h2>

<blockquote><p>iTunes 12.7 for Mac was released on Tuesday with a major change in the app. Apple has redesign iTunes so that it focuses on sales of music, movies, TV shows, audiobooks, and podcasts. It no longer has an App Store for buying apps for your iPhone or iPad. Therefore, you can no long install your iOS App (.ipa file) through iTunes any longer.</p></blockquote>

<ol>
<li>Download the .ipa file after the build completes.</li>
<li>Open iTunes, go to App library.</li>
<li>Drag and drop the downloaded .ipa file into the App library.</li>
<li>Connect your device to iTunes and go to your device apps.</li>
<li>Click Install button of the app and click Sync button. </li>
</ol>


<!--more-->


<h2>Install using Apple Configurator 2</h2>

<ol>
<li>Install Apple Configurator 2 on your Mac from the App Store.</li>
<li>Connect your device to your Mac.</li>
<li>Open Apple Configurator 2, select your device. If you device doesn’t appear here, please make sure that your device is successfully connected to your Mac.</li>
</ol>


<h2>Install using Xcode</h2>

<ol>
<li>Connect your device to your Mac.</li>
<li>Open Xcode, go to Window > Devices .</li>
<li>Then, the Devices screen will appear. Choose the device you want to install the app on.</li>
<li>Drag and drop your .ipa file into the Installed Apps.</li>
</ol>


<h2>Install using OTA Deployment</h2>

<p>OTA (Over-The-Air) Deployment enables you to install your built apps (ad-hoc build) via HTTPS.</p>

<ol>
<li>Download the .ipa file after the build completes.</li>
<li>Upload the .ipa file to the site you want.</li>
<li>Create a .plist file for this built application. The .plist file should look like this:</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="UTF-8"?>
</span><span class='line'>&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
</span><span class='line'>&lt;plist version="1.0">
</span><span class='line'>&lt;dict>
</span><span class='line'>    &lt;key>items&lt;/key>
</span><span class='line'>    &lt;array>
</span><span class='line'>        &lt;dict>
</span><span class='line'>            &lt;key>assets&lt;/key>
</span><span class='line'>            &lt;array>
</span><span class='line'>                &lt;dict>
</span><span class='line'>                    &lt;key>kind&lt;/key>
</span><span class='line'>                    &lt;string>software-package&lt;/string>
</span><span class='line'>                    &lt;key>url&lt;/key>
</span><span class='line'>                    &lt;string>https://www.anysite.com/application/your_app.ipa&lt;/string>
</span><span class='line'>                &lt;/dict>
</span><span class='line'>            &lt;/array>
</span><span class='line'>            &lt;key>metadata&lt;/key>
</span><span class='line'>            &lt;dict>
</span><span class='line'>                &lt;key>bundle-identifier&lt;/key>
</span><span class='line'>                &lt;string>com.example.helloworld&lt;/string>
</span><span class='line'>                &lt;key>bundle-version&lt;/key>
</span><span class='line'>                &lt;string>1.0.0&lt;/string>
</span><span class='line'>                &lt;key>kind&lt;/key>
</span><span class='line'>                &lt;string>software&lt;/string>
</span><span class='line'>                &lt;key>title&lt;/key>
</span><span class='line'>                &lt;string>HELLO&lt;/string>
</span><span class='line'>            &lt;/dict>
</span><span class='line'>        &lt;/dict>
</span><span class='line'>    &lt;/array>
</span><span class='line'>&lt;/dict>
</span><span class='line'>&lt;/plist></span></code></pre></td></tr></table></div></figure>


<ol>
<li>Upload the <code>.plist</code> file to the site you want. Make sure this file must be accessed via HTTPS protocol. </li>
<li>Create a webpage embedded the link to the uploaded <code>.plist</code> file using special <code>itms-services://</code> protocol. See blow example: </li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;a href="itms-services://?action=download-manifest&url=https://example.com/manifest.plist">Install App&lt;/a></span></code></pre></td></tr></table></div></figure>


<p>使用 OTA 方式部署安装，需要自己架设 Web 服务器，目前市面上也有免费提供此安装服务的产品，如 <a href="https://fir.im/">Fir.im</a>，<a href="https://www.pgyer.com/">蒲公英</a>。</p>

<p>如果我们希望自己架设 Web 服务器来提供 OTA 分发，则相应地需要做些配置工作：</p>

<h2>HTTPS</h2>

<p>保证 ipa 文件是通过 HTTPS 访问，所以网站必须是由 iOS 信任的证书签名的。如果是没有信任锚的自签名证书，并且不能被 iOS 设备验证，那么安装会失败。</p>

<h2>Set server MIME types</h2>

<p>你也许需要配置你的 web 服务器以便清单文件和应用文件能正确传输。</p>

<p>For the server, add the MIME types to the web service’s MIME types settings:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>application/octet-stream ipa 
</span><span class='line'>text/xml plist</span></code></pre></td></tr></table></div></figure>


<p> 
For Microsoft’s Internet Information Server (IIS), use IIS Manager to add the MIME type in the Properties page of the server:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.ipa application/octet-stream 
</span><span class='line'>.plist text/xml</span></code></pre></td></tr></table></div></figure>


<p> </p>

<p>同时，如果设备是连接到一个封闭的内部网络，我们必须保证如下访问：</p>

<h2>Network configuration requirements</h2>

<ul>
<li><a href="https://ax.init.itunes.apple.com:">https://ax.init.itunes.apple.com:</a> The device obtains the current file-size limit for downloading apps over the cellular network. If this website isn’t reachable, installation may fail. </li>
<li><a href="https://ppq.apple.com:">https://ppq.apple.com:</a> The device contacts this website to check the status of the distribution certificate used to sign the provisioning profile. </li>
</ul>


<h1>Reference</h1>

<ul>
<li><p><a href="https://help.apple.com/xcode/mac/current/#/dev31de635e5">Distribution methods</a></p></li>
<li><p><a href="https://web.archive.org/web/20171114184350/https://developer.apple.com/library/content/documentation/IDEs/Conceptual/AppDistributionGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40012582-CH1-SW1">App Distribution Guide</a></p></li>
<li><p><a href="https://docs.monaca.io/en/products_guide/monaca_ide/deploy/non_market_deploy/#install-using-ota-deployment">Non-market App Distribution</a></p></li>
<li><p><a href="https://help.apple.com/deployment/ios/#/apda0e3426d7">Distribute in-house apps from a web server</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web 面试题汇总(三)]]></title>
    <link href="http://DamianSheldon.github.io/blog/web-technical-interview-part-3.html"/>
    <updated>2018-09-13T10:20:22+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/web-technical-interview-part-3</id>
    <content type="html"><![CDATA[<h3>1.介绍js的基本数据类型。</h3>

<p>A:</p>

<ul>
<li>Six data types that are primitives:

<ul>
<li>Boolean. true and false.</li>
<li>null. A special keyword denoting a null value. Because JavaScript is case-sensitive, null is not the same as Null, NULL, or any other variant.</li>
<li>undefined. A top-level property whose value is not defined.</li>
<li>Number. An integer or floating point number. For example: 42 or 3.14159.</li>
<li>String. A sequence of characters that represent a text value. For example:  &ldquo;Howdy&rdquo;</li>
<li>Symbol (new in ECMAScript 2015). A data type whose instances are unique and immutable.</li>
</ul>
</li>
<li>and Object</li>
</ul>


<h3>2.介绍js有哪些内置对象？</h3>

<h3>3.说几条写JavaScript的基本规范？</h3>

<p>A:</p>

<ul>
<li>总是使用var声明变量</li>
<li>行末别忘了分号</li>
<li>使用标准而不是不标准的功能</li>
<li>使用驼峰命名（如：camelCaseNames）以及大写的常量（如：UPPERCASE），避免使用const关键字，因为IE不支持</li>
<li>使用命名空间技术</li>
<li>避免eval()除非反序列化（奇怪的是JSON解析并未提及）</li>
<li>避免对象上使用with(), 数组使用for in</li>
<li>使用对象以及数组字面量而不是更冗长的声明</li>
<li>要知道truthy和falsy规则</li>
<li>JavaScript资源中不使用IE条件注释</li>
<li>不修改内置对象的原型——这会让人颜面扫地，因为这是让JavaScript更加强大的功能之一，但你知道这会导致问题</li>
<li>小心使用闭包以及不要循环引用</li>
<li>同样，小心使用”this”</li>
</ul>


<p>Reference:<a href="https://www.zhangxinxu.com/wordpress/2012/07/google-html-css-javascript-style-guides/">翻译：谷歌HTML、CSS和JavaScript风格规范</a></p>

<h3>4.JavaScript原型，原型链 ? 有什么特点？</h3>

<p>A:</p>

<ul>
<li>原型：每个对象都有一个原型对象，它充当继承方法和属性来源的模板对象。</li>
<li>原型链：对象的原型对象也可能有原型，依此类推，便形成原型链。</li>
<li>特点：强大而灵活。</li>
</ul>


<!--more-->


<h3>5.JavaScript有几种类型的值？，你能画一下他们的内存图吗？</h3>

<p>A:</p>

<ul>
<li>栈类型：Undefined，Null，Boolean，Number、String</li>
<li>堆类型：对象、数组和函数</li>
</ul>


<h3>6.如何将字符串转化为数字，例如'12.3b'?</h3>

<p>A:<code>parseFloat('12.3b');</code></p>

<h3>7.如何将浮点数点左边的数每三位添加一个逗号，如12000000.11转化为12,000,000.11?</h3>

<p>A:</p>

<ul>
<li>方法一：使用正则表达式, <code>String(Number).replace(/(\d)(?=(\d{3})+$)/g, "$1,");</code></li>
<li>方法二：使用toLocaleString()方法, Number.toLocaleString(&lsquo;en-US&rsquo;);</li>
</ul>


<p>Reference:<a href="https://www.zhangxinxu.com/wordpress/2017/09/web-page-comma-number/">请使用千位分隔符(逗号)表示web网页中的大数字</a></p>

<h3>8.如何实现数组的随机排序？</h3>

<p>A:Fisher–Yates Shuffle,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function shuffle(array) {
</span><span class='line'>  var m = array.length, t, i;
</span><span class='line'>
</span><span class='line'>  // While there remain elements to shuffle…
</span><span class='line'>  while (m) {
</span><span class='line'>
</span><span class='line'>    // Pick a remaining element…
</span><span class='line'>    i = Math.floor(Math.random() * m--);
</span><span class='line'>
</span><span class='line'>    // And swap it with the current element.
</span><span class='line'>    t = array[m];
</span><span class='line'>    array[m] = array[i];
</span><span class='line'>    array[i] = t;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  return array;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Reference:<a href="https://bost.ocks.org/mike/shuffle/">Fisher–Yates Shuffle</a><br/>
<a href="https://www.h5jun.com/post/array-shuffle.html">数组的完全随机排列</a></p>

<h3>9.Javascript如何实现继承？</h3>

<p>A:Javascript 使用原型链实现继承。</p>

<h3>10.JavaScript继承的几种实现方式？</h3>

<p>A:</p>

<ol>
<li>Prototype Chaning</li>
<li>Constructor Stealing</li>
<li>Combination Inheritance</li>
<li>Prototypal Inheritance</li>
<li>Parasitic Inheritance</li>
<li>Parasitic Combination Inheritance</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// 1. Prototype Chaning
</span><span class='line'>function SuperType() {
</span><span class='line'>    this.property = true;
</span><span class='line'>}
</span><span class='line'>SuperType.prototype.getSuperValue = function () {
</span><span class='line'>    return this.property;
</span><span class='line'>};
</span><span class='line'>function SubType() {
</span><span class='line'>    this.subproperty = false;
</span><span class='line'>}
</span><span class='line'>//inherit from SuperType 
</span><span class='line'>SubType.prototype = new SuperType();
</span><span class='line'>SubType.prototype.getSubValue = function () {
</span><span class='line'>    return this.subproperty;
</span><span class='line'>};
</span><span class='line'>var instance = new SubType();
</span><span class='line'>alert(instance.getSuperValue()); //true
</span><span class='line'>
</span><span class='line'>// 2. Constructor Stealing
</span><span class='line'>function SuperType() {
</span><span class='line'>    this.colors = ["red", "blue", "green"];
</span><span class='line'>}
</span><span class='line'>function SubType() {
</span><span class='line'>    //inherit from SuperType 
</span><span class='line'>    SuperType.call(this);
</span><span class='line'>}
</span><span class='line'>var instance1 = new SubType();
</span><span class='line'>instance1.colors.push("black");
</span><span class='line'>
</span><span class='line'>alert(instance1.colors); //”red,blue,green,black”
</span><span class='line'>var instance2 = new SubType();
</span><span class='line'>alert(instance2.colors); //”red,blue,green”
</span><span class='line'>
</span><span class='line'>// 3. Combination Inheritance
</span><span class='line'>function SuperType(name) {
</span><span class='line'>    this.name = name;
</span><span class='line'>    this.colors = ["red", "blue", "green"];
</span><span class='line'>}
</span><span class='line'>SuperType.prototype.sayName = function () {
</span><span class='line'>    alert(this.name);
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>function SubType(name, age) {
</span><span class='line'>    //inherit properties 
</span><span class='line'>    SuperType.call(this, name);
</span><span class='line'>    this.age = age;
</span><span class='line'>}
</span><span class='line'>//inherit methods
</span><span class='line'>SubType.prototype = new SuperType();
</span><span class='line'>SubType.prototype.sayAge = function () {
</span><span class='line'>    alert(this.age);
</span><span class='line'>};
</span><span class='line'>var instance1 = new SubType("Nicholas", 29);
</span><span class='line'>instance1.colors.push("black"); alert(instance1.colors); //”red,blue,green,black” 
</span><span class='line'>instance1.sayName(); //”Nicholas”; 
</span><span class='line'>instance1.sayAge(); //29
</span><span class='line'>
</span><span class='line'>var instance2 = new SubType("Greg", 27);
</span><span class='line'>alert(instance2.colors); //”red,blue,green” 
</span><span class='line'>instance2.sayName(); //”Greg”; 
</span><span class='line'>instance2.sayAge(); //27
</span><span class='line'>
</span><span class='line'>// 4. Prototypal Inheritance
</span><span class='line'>function object(o) {
</span><span class='line'>    function F() { }
</span><span class='line'>    F.prototype = o;
</span><span class='line'>    return new F();
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>var person = {
</span><span class='line'>    name: "Nicholas",
</span><span class='line'>    friends: ["Shelby", "Court", "Van"]
</span><span class='line'>};
</span><span class='line'>var anotherPerson = object(person);
</span><span class='line'>anotherPerson.name = "Greg";
</span><span class='line'>anotherPerson.friends.push("Rob");
</span><span class='line'>
</span><span class='line'>var yetAnotherPerson = object(person);
</span><span class='line'>yetAnotherPerson.name = "Linda";
</span><span class='line'>yetAnotherPerson.friends.push("Barbie");
</span><span class='line'>alert(person.friends); //”Shelby,Court,Van,Rob,Barbie”
</span><span class='line'>
</span><span class='line'>// 5. Parasitic Inheritance
</span><span class='line'>function createAnother(original) {
</span><span class='line'>    //create a new object by calling a function
</span><span class='line'>    var clone = object(original);
</span><span class='line'>    //augment the object in some way
</span><span class='line'>    clone.sayHi = function () {
</span><span class='line'>        alert("Hi");
</span><span class='line'>    }
</span><span class='line'>    //return the object
</span><span class='line'>    return clone;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>var person = {
</span><span class='line'>    name: "Nicholas",
</span><span class='line'>    friends: ["Shelby", "Court", "Van"]
</span><span class='line'>};
</span><span class='line'>var anotherPerson = createAnother(person);
</span><span class='line'>anotherPerson.sayHi(); //”hi”
</span><span class='line'>
</span><span class='line'>// 6. Parasitic Combination Inheritance
</span><span class='line'>function inheritPrototype(subType, superType) {
</span><span class='line'>    var prototype = object(superType.prototype); //create object
</span><span class='line'>    prototype.constructor = subType; //augment object
</span><span class='line'>    subType.prototype = prototype;//assign object
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>function SuperType(name) {
</span><span class='line'>    this.name = name;
</span><span class='line'>    this.colors = ["red", "blue", "green"];
</span><span class='line'>}
</span><span class='line'>SuperType.prototype.sayName = function () {
</span><span class='line'>    alert(this.name);
</span><span class='line'>};
</span><span class='line'>function SubType(name, age) {
</span><span class='line'>    SuperType.call(this, name);
</span><span class='line'>    this.age = age;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>inheritPrototype(SubType, SuperType);
</span><span class='line'>
</span><span class='line'>SubType.prototype.sayAge = function () {
</span><span class='line'>    alert(this.age);
</span><span class='line'>};
</span></code></pre></td></tr></table></div></figure>


<p>Prototype Chaning:
The major issue revolves around prototypes that contain reference values.
A second issue with prototype chaining is that you cannot pass arguments into the supertype constructor when the subtype instance is being created.
Due to this and the aforementioned issue with reference values on the prototype, prototype chaining is rarely used alone.</p>

<p>Constructor Stealing:
The downside to using constructor stealing exclusively is that it introduces the same problems as the constructor pattern for custom types: methods must be defined inside the constructor, so there’s no function reuse. Further, methods defined on the supertype’s prototype are not accessible on the subtype, so all types can use only the constructor pattern. Due to these issues, constructor stealing is rarely used on its own.</p>

<p>Combination Inheritance:
Addressing the downsides of both prototype chaining and constructor stealing, combination inheritance is the most frequently used inheritance pattern in JavaScript. It also preserves the behavior of instanceof and isPrototypeOf() for identifying the composition of objects.</p>

<p>Prototypal Inheritance:
Prototypal inheritance is useful when there is no need for the overhead of creating separate constructors but you still need an object to behave similarly to another. Keep in mind that properties containing reference values will always share those values, similar to using the prototype pattern.</p>

<p>Parasitic Inheritance:
Keep in mind that adding functions to objects using parasitic inheritance leads to inefficiencies related to function reuse, similar to the constructor pattern.</p>

<p>Parasitic Combination Inheritance:
Parasitic combination inheritance is considered the most optimal inheritance paradigm for reference types.</p>

<p>Reference: JavaScript 高级程序设计</p>

<h3>11.javascript创建对象的几种方式？</h3>

<p>A:</p>

<ul>
<li>declare an object literal</li>
<li>use a constructor function</li>
<li>use the Object() constructor </li>
<li>use the create() method</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// declare an object literal</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">name</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;Bob&#39;</span><span class="p">,</span> <span class="s1">&#39;Smith&#39;</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">age</span><span class="o">:</span> <span class="mi">32</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">gender</span><span class="o">:</span> <span class="s1">&#39;male&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">interests</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;music&#39;</span><span class="p">,</span> <span class="s1">&#39;skiing&#39;</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">bio</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">alert</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="s1">&#39; is &#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">age</span> <span class="o">+</span> <span class="s1">&#39; years old. He likes &#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">interests</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="s1">&#39; and &#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">interests</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="s1">&#39;.&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">greeting</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;Hi! I\&#39;m &#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="s1">&#39;.&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// use a constructor function</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">greeting</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;Hi! I\&#39;m &#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="s1">&#39;.&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">person1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s1">&#39;Bob&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">person2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s1">&#39;Sarah&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// use the Object() constructor</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">person1</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>
</span><span class='line'><span class="nx">person1</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;Chris&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">person1</span><span class="p">[</span><span class="s1">&#39;age&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">38</span><span class="p">;</span>
</span><span class='line'><span class="nx">person1</span><span class="p">.</span><span class="nx">greeting</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;Hi! I\&#39;m &#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="s1">&#39;.&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// use the create() method</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">person2</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">person1</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Reference:<a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object-oriented_JS">Object-oriented JavaScript for beginners</a></p>

<h3>12.Javascript作用链域?</h3>

<p>A:
When code is executed in a context, a scope chain of variable objects is created. The purpose of the scope chain is to provide ordered access to all variables and functions that an execution context has access to. The front of the scope chain is always the variable object of the context whose code is executing.</p>

<p>If the context is a function, then the activation object is used as the variable object. An activation object starts with a single variable defined called arguments (this doesn’t exist for the global context). The next variable object in the chain is from the containing context, and the next after that is from the next containing context. This pattern continues until the global context is reached; the global context’s variable object is always the last of the scope chain.</p>

<h3>13.谈谈This对象的理解。</h3>

<p>A:In most cases, the value of this is determined by how a function is called. </p>

<ul>
<li>Global Context (1)</li>
<li>Function context

<ul>
<li>Simple call (2.1)</li>
<li>The bind method (2.2)</li>
<li>Arrow functions (2.3)</li>
<li>As an object method (2.4)</li>
<li>As a constructor Section (2.5)</li>
<li>As a DOM event handler (2.6)</li>
<li>In an inline event handler (2.7)</li>
</ul>
</li>
</ul>


<p>1) In the global execution context (outside of any function), this refers to the global object whether in strict mode or not.</p>

<p>2.1) If the value of this is not set by the call in non-strict mode, this will default to the global object, which is window in a browser. In strict mode, if this was not defined by the execution context, it remains undefined.</p>

<p>2.2) ECMAScript 5 introduced Function.prototype.bind. Calling f.bind(someObject)creates a new function with the same body and scope as f, but where this occurs in the original function, in the new function it is permanently bound to the first argument of bind, regardless of how the function is being used.</p>

<p>2.3) In arrow functions, this retains the value of the enclosing lexical context's this. In global code, it will be set to the global object.</p>

<p>2.4) When a function is called as a method of an object, its this is set to the object the method is called on.</p>

<p>2.5) When a function is used as a constructor (with the new keyword), its this is bound to the new object being constructed.</p>

<p>2.6) When a function is used as an event handler, its this is set to the element the event fired from (some browsers do not follow this convention for listeners added dynamically with methods other than addEventListener).</p>

<p>2.7) When the code is called from an inline on-event handler, its this is set to the DOM element on which the listener is placed.</p>

<p>Reference:<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this">this</a></p>

<h3>14.eval是做什么的？</h3>

<p>A:The eval() function evaluates JavaScript code represented as a string.</p>

<h3>15.什么是window对象? 什么是document对象?</h3>

<p>A:</p>

<ul>
<li>The Window interface represents a window containing a DOM document;</li>
<li>The Document interface represents any web page loaded in the browser and serves as an entry point into the web page&rsquo;s content, which is the DOM tree. </li>
</ul>


<h3>16.null，undefined 的区别？</h3>

<p>A:</p>

<ul>
<li>The value null represents the intentional absence of any object value.</li>
<li>The global undefined property represents the primitive value undefined.</li>
</ul>


<h3>17.写一个通用的事件侦听器函数。</h3>

<h3>18.<code>["1", "2", "3"].map(parseInt)</code> 答案是多少？</h3>

<p>A:答案是[1, NaN, NaN]。</p>

<p>原因:<br/>
先看下 map 和 parseInt 这两个 API:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">new_array</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span> <span class="nx">callback</span><span class="p">(</span><span class="nx">currentValue</span><span class="p">[,</span> <span class="nx">index</span><span class="p">[,</span> <span class="nx">array</span><span class="p">]])</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Return element for new_array</span>
</span><span class='line'><span class="p">}[,</span> <span class="nx">thisArg</span><span class="p">])</span>
</span><span class='line'>  
</span><span class='line'><span class="nb">parseInt</span><span class="p">(</span><span class="nx">string</span><span class="p">,</span> <span class="nx">radix</span><span class="p">);</span>
</span><span class='line'><span class="nx">string</span>
</span><span class='line'><span class="nx">The</span> <span class="nx">value</span> <span class="nx">to</span> <span class="nx">parse</span><span class="p">.</span> <span class="nx">If</span> <span class="nx">the</span><span class="err"> </span><span class="nx">string</span><span class="err"> </span><span class="nx">argument</span> <span class="nx">is</span> <span class="nx">not</span> <span class="nx">a</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">then</span> <span class="nx">it</span> <span class="nx">is</span> <span class="nx">converted</span> <span class="nx">to</span> <span class="nx">a</span> <span class="nx">string</span> <span class="p">(</span><span class="nx">using</span> <span class="nx">the</span><span class="err"> </span><span class="nx">ToString</span><span class="err"> </span><span class="kr">abstract</span> <span class="nx">operation</span><span class="p">).</span> <span class="nx">Leading</span> <span class="nx">whitespace</span> <span class="k">in</span> <span class="nx">the</span> <span class="nx">string</span> <span class="nx">argument</span> <span class="nx">is</span> <span class="nx">ignored</span><span class="p">.</span>
</span><span class='line'><span class="nx">radix</span>
</span><span class='line'><span class="nx">An</span> <span class="nx">integer</span> <span class="nx">between</span> <span class="mi">2</span> <span class="nx">and</span> <span class="mi">36</span> <span class="nx">that</span> <span class="nx">represents</span> <span class="nx">the</span><span class="err"> </span><span class="nx">radix</span><span class="err"> </span><span class="p">(</span><span class="nx">the</span> <span class="nx">base</span> <span class="k">in</span> <span class="nx">mathematical</span> <span class="nx">numeral</span> <span class="nx">systems</span><span class="p">)</span> <span class="nx">of</span> <span class="nx">the</span> <span class="nx">above</span> <span class="nx">mentioned</span> <span class="nx">string</span><span class="p">.</span><span class="err"> </span>
</span></code></pre></td></tr></table></div></figure>


<p>从 API 我们知道，<code>["1", "2", "3"].map(parseInt)</code> 会转化为依次调用 <code>parseInt('1', 0); parseInt('2', 1); parseInt('3', 2);</code>。</p>

<p>上面提到 radix 的范围是[2, 36]，如果 radix 不在这个范围自然是不支持转换，结果就是 NaN。但它对 0 进行了特殊处理，描述如下:</p>

<blockquote><p>If radix is undefined or 0 (or absent), JavaScript assumes the following:</p>

<ul>
<li>If the input string begins with &ldquo;0x&rdquo; or &ldquo;0X&rdquo;, radix is 16 (hexadecimal) and the remainder of the string is parsed.</li>
<li>If the input string begins with &ldquo;0&rdquo;, radix is eight (octal) or 10 (decimal).  Exactly which radix is chosen is implementation-dependent.  ECMAScript 5 specifies that 10 (decimal) is used, but not all browsers support this yet.  For this reason always specify a radix when using parseInt.</li>
<li>If the input string begins with any other value, the radix is 10 (decimal).</li>
</ul>
</blockquote>

<p>所以, <code>parseInt('1', 0)</code> 的结果是 1， <code>parseInt('2', 1)</code> 的结果是 NaN。</p>

<p>最后我们来看 <code>parseInt('3', 2)</code>，radix 是 2，也就是将字符串按二进制转换，二进制只有数字 0 和 1，那么 3 肯定是转换不了，结果就是 NaN。</p>

<h3>19.事件是？IE与火狐的事件机制有什么区别？ 如何阻止冒泡？</h3>

<p>A:</p>

<blockquote><p>In computing, an event is an action or occurrence recognized by software, often originating asynchronously from the external environment, that may be handled by the software. &ndash;wikipedia</p></blockquote>

<p>事件是被软件识别的动作或发生的事。</p>

<p>IE与火狐的事件机制有什么区别？<br/>
IE的事件机制是冒泡，而火狐同时支持冒泡和捕获；冒泡是指事件从最具体的元素接收，然后逐级向上传播，直到不具体的节点（通常指文档节点）；而捕获相反，它是从不具体的节点开始，逐步到最具体的节点；</p>

<p>如何阻止冒泡？
阻止事件冒泡：<code>e.stopPropagation()</code>，旧IE则是使用 <code>e.cancelBubble = true；</code></p>

<h3>20.什么是闭包（closure），为什么要用它？</h3>

<p>A:</p>

<blockquote><p>Closures are self-contained blocks of functionality that can be passed around and used in your code. &ndash;The Swift Programming Language</p></blockquote>

<p>闭包是自包含的功能块，它可以在你的代码中传递和使用。</p>

<p>为什么要用它？<br/>
当我们使用高阶函数或实际需要交换状态时，闭包优于其他方法。</p>

<blockquote><p>First of all, there is nothing that is impossible without using closures. You can always replace a closure by an object implementing a specific interface. It&rsquo;s only a matter of brevity and reduced coupling.
Second, keep in mind that closures are often used inappropriately, where a simple function reference or other construct would be more clear. You shouldn&rsquo;t take every example you see as a best practice.
Where closures really shine over other constructs is when using higher-order functions, when you actually need to communicate state, and you can make it a one-liner.</p></blockquote>

<p>Reference:<a href="https://softwareengineering.stackexchange.com/questions/285941/why-would-a-program-use-a-closure">Why would a program use a closure?</a></p>

<h3>21.javascript 代码中的<code>"use strict";</code>是什么意思 ? 使用它区别是什么？</h3>

<p>A:javascript 代码中的<code>"use strict";</code>是开启严格模式的意思。</p>

<p>使用它的区别:</p>

<ul>
<li>将问题直接转化为错误（如语法错误或运行时错误）;</li>
<li>简化了如何为给定名称的特定变量计算;</li>
<li>简化了 eval 以及 arguments;</li>
<li>将写"安全“JavaScript的步骤变得更简单;</li>
<li>改变了预测未来ECMAScript行为的方式。</li>
</ul>


<p>Reference:<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode">严格模式</a></p>

<h3>22.如何判断一个对象是否属于某个类？</h3>

<p>A:使用 instanceof 操作符。</p>

<h3>23.new操作符具体干了什么呢?</h3>

<p>A:When the code new Foo(&hellip;) is executed, the following things happen:</p>

<ol>
<li>A new object is created, inheriting from Foo.prototype.</li>
<li>The constructor function Foo is called with the specified arguments, and with this bound to the newly created object. new Foo is equivalent to newFoo(), i.e. if no argument list is specified, Foo is called without arguments.</li>
<li>The object returned by the constructor function becomes the result of the whole new expression. If the constructor function doesn&rsquo;t explicitly return an object, the object created in step 1 is used instead. (Normally constructors don&rsquo;t return a value, but they can choose to do so if they want to override the normal object creation process.)</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'> <span class="kd">var</span> <span class="nx">obj</span>  <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'> <span class="nx">obj</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">=</span> <span class="nx">Base</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span>
</span><span class='line'> <span class="nx">Base</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>24.用原生JavaScript的实现过什么功能吗？</h3>

<h3>25.Javascript中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？</h3>

<p>A:<code>hasOwnProperty()</code>.</p>

<h3>26.JSON 的了解？</h3>

<h3>27.<code>[].forEach.call($$("*"),function(a){a.style.outline="1px solid #"+(~~(Math.random()*(1&lt;&lt;24))).toString(16)})</code> 能解释一下这段代码的意思吗？</h3>

<p>A:给所有的元素加上一个一像素颜色随机的边框。</p>

<h3>28.js延迟加载的方式有哪些？</h3>

<p>A:</p>

<ul>
<li>使用 defer 属性</li>
<li>使用 async 属性</li>
<li>动态创建DOM方式，例如，监听 onload 事件，定时之后再向 head 添加 script 标签；或 ajax 下载后再添加 （用得最多）</li>
<li>js 放在 body 最后</li>
</ul>


<h3>29.Ajax 是什么? 如何创建一个Ajax？</h3>

<p>A: AJAX 是 &ldquo;Asynchronous JavaScript and XML&rdquo; 的简称，指的是一套综合了多项技术的浏览器端网页开发技术。</p>

<p>如何创建一个Ajax？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">xmlHttp</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">XMLHttpRequest</span> <span class="o">!=</span> <span class="s2">&quot;undefined&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">xmlHttp</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">ActiveXObject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">aVersions</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;Msxml2.XMLHttp.5.0&quot;</span><span class="p">,</span> <span class="s2">&quot;Msxml2.XMLHttp.4.0&quot;</span><span class="p">,</span> <span class="s2">&quot;Msxml2.XMLHttp.3.0&quot;</span><span class="p">,</span> <span class="s2">&quot;Msxml2.XMLHttp&quot;</span><span class="p">,</span> <span class="s2">&quot;Microsoft.XMLHttp&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">aVersions</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">xmlHttp</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ActiveXObject</span><span class="p">(</span><span class="nx">aVersions</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>30.Ajax 解决浏览器缓存问题？</h3>

<p>A:</p>

<ol>
<li>在ajax发送请求前加上 anyAjaxObj.setRequestHeader(&ldquo;If-Modified-Since&rdquo;,&ldquo;0&rdquo;)。</li>
<li>在ajax发送请求前加上 anyAjaxObj.setRequestHeader(&ldquo;Cache-Control&rdquo;,&ldquo;no-cache&rdquo;)。</li>
<li>在URL后面加上一个随机数： &ldquo;fresh=&rdquo; + Math.random();。</li>
<li>在URL后面加上时间戳："nowtime=&ldquo; + new Date().getTime();。</li>
<li>如果是使用jQuery，直接这样就可以了 $.ajaxSetup({cache:false})。这样页面的所有ajax都会执行这条语句就是不需要保存缓存记录。</li>
</ol>


<h3>31.同步和异步的区别?</h3>

<h3>32.如何解决跨域问题?</h3>

<p>A:跨域通信的方法大致可以分为两类：</p>

<ul>
<li><p>一类是Hack，比如通过title, navigation等对象传递信息，JSONP可以说是一个最优秀的Hack。</p>

<ul>
<li>设置 document.domain</li>
<li>有src的标签</li>
<li>JSONP</li>
<li>navigation 对象</li>
</ul>
</li>
<li><p>另一类是HTML5支持，一个是Access-Control-Allow-Origin响应头，一个是window.postMessage。</p>

<ul>
<li>跨域资源共享（CORS）</li>
<li>window.postMessage</li>
</ul>
</li>
</ul>


<p>Reference:<a href="https://harttle.land/2015/10/10/cross-origin.html">Web开发中跨域的几种解决方案</a></p>

<h3>33.页面编码和被请求的资源编码如果不一致如何处理？</h3>

<p>A:一个未经验证的想法:设置 <code>XMLHttpRequest.responseType = "blob";</code>，这样
<code>XMLHttpRequest.response</code> 的结果是 Blob,之后利用 <code>instanceOfFileReader.readAsText(blob[, encoding]);</code> 得到想要的结果。</p>

<h3>34.服务器代理转发时，该如何处理cookie？</h3>

<p>A:</p>

<h3>35.模块化开发怎么做?</h3>

<h3>36.AMD（Modules/Asynchronous-Definition）、CMD（Common Module Definition）规范区别？</h3>

<h3>37.requireJS的核心原理是什么？（如何动态加载的？如何避免多次加载的？如何 缓存的？）</h3>

<h3>38.JS模块加载器的轮子怎么造，也就是如何实现一个模块加载器？</h3>

<h3>39.谈一谈你对ECMAScript6的了解？</h3>

<h3>40.ECMAScript6 怎么写class么，为什么会出现class这种东西?</h3>

<h3>41.documen.write和 innerHTML的区别?</h3>

<p>A:document.write只能重绘整个页面，innerHTML可以重绘页面的一部分。</p>

<h3>42.DOM操作——怎样添加、移除、移动、复制、创建和查找节点?</h3>

<p>A:</p>

<ul>
<li>添加：<code>appendChild()</code></li>
<li>移除：<code>removeChild()</code></li>
<li>移动：<code>appendChild()</code>， If the given child is a reference to an existing node in the document, appendChild() moves it from its current position to the new position </li>
<li>复制：<code>cloneNode()</code></li>
<li>创建：<code>createDocumentFragment(), createElement(), createTextNode()</code></li>
<li>查找：<code>getElementById(), getElementsByClassName(), getElementsByName(), getElementsByTagName(), getElementsByTagNameNS()</code></li>
</ul>


<h3>43.<code>.call()</code> 和 <code>.apply()</code> 的区别？</h3>

<p>A:While the syntax of this function is almost identical to that of apply(), the fundamental difference is that call() accepts an argument list, while apply() accepts a single array of arguments.</p>

<h3>44.数组和对象有哪些原生方法，列举一下？</h3>

<h3>45.JS 怎么实现一个类?怎么实例化这个类?</h3>

<h3>46.JavaScript中的作用域与变量声明提升？</h3>

<h3>47.如何编写高性能的Javascript？</h3>

<h3>48.那些操作会造成内存泄漏？</h3>

<p>A:</p>

<ul>
<li>Accidental global variables</li>
<li>Forgotten timers or callbacks</li>
<li>Out of DOM references</li>
<li>Closures</li>
</ul>


<p>Reference:<a href="https://auth0.com/blog/four-types-of-leaks-in-your-javascript-code-and-how-to-get-rid-of-them/">4 Types of Memory Leaks in JavaScript and How to Get Rid Of Them</a></p>

<h3>59.jQuery的源码看过吗？能不能简单概况一下它的实现原理？</h3>

<p>A:jQuery 主要是利用 js 原型继承的灵活性，将 DOM，Ajax 等操作包裹到函数中来实现的。</p>

<h3>50.jQuery.fn的init方法返回的this指的是什么对象？为什么要返回this？</h3>

<p>A:返回的就是 jQuery 对象。因为 new 表达式之后的constructor返回（return）一个引用对象（数组，对象，函数等），都将覆盖new创建的匿名对象，如果返回（return）一个原始类型（无return时其实为return原始类型undefined），那么就返回new创建的匿名对象。为了屏蔽这种差异，简化代码，支持链式调用等原因，所以显示的返回了 jQuery 对象。</p>

<p>Reference:<a href="https://www.zhangxinxu.com/wordpress/2013/07/jquery-%E5%8E%9F%E7%90%86-%E6%9C%BA%E5%88%B6/">jQuery诞生记-原理与机制</a></p>

<h3>51.jQuery中如何将数组转化为JSON字符串，然后再转化回来？</h3>

<p>A:可以使用浏览器内建 JSON 对象的 parse，stringify 方法。如果浏览器不支持这些方法，jQuery 1.4.1 到 3.0 版本的 parseJSON 方法可以解析 JSON 字符串；如果要编码的话则可以通过引入其他 js JSON 库来完成。</p>

<h3>52.jQuery 的属性拷贝(extend)的实现原理是什么，如何实现深拷贝？</h3>

<p>A:jQuery 的属性拷贝(extend)的实现原理是利用 js 的动态性，遍历源对象的属性并将其添加到目标对象上。利用递归遍历可以实现深拷贝。</p>

<h3>53.jQuery.extend 与 jQuery.fn.extend 的区别？</h3>

<p>A:</p>

<ul>
<li>jQuery.extend: Merge the contents of two or more objects together into the first object.</li>
<li>jQuery.fn.extend: Merge the contents of an object onto the jQuery prototype to provide new jQuery instance methods.</li>
</ul>


<p>从 jQuery API 文档对它们的介绍，我们可以知道 jQuery.extend 侧重将两个或多个对象合并到第一个对象；而 jQuery.fn.extend 是将对象合并到 jQuery 原型上来提供新的 jQuery 实例方法。</p>

<h3>54.jQuery 的队列是如何实现的？队列可以用在哪些地方？</h3>

<p>A:jQuery 的队列是利用数组实现的。队列可以用在实现动画效果上。</p>

<blockquote><p>Queues are the foundation for all animations in jQuery, they allow a series functions to be executed asynchronously on an element. </p></blockquote>

<h3>55.谈一下jQuery中的bind(),live(),delegate(),on()的区别？</h3>

<p>A:</p>

<p>bind():Attach a handler to a specific element.</p>

<p>live():All <code>.live()</code> event handlers are bound to the document root by default.</p>

<p>delegate():The <code>.delegate()</code> method provides a clear difference between the context of where to attach delegated event handler, and the selector to match when the event bubbles up to the delegated element.</p>

<p>on():The .on() method gives us a semantic approach for creating directly bound events as well as delegated events. It eliminates the need to use the deprecated .bind(), .live(), and .delegate() methods, providing a single API for creating events.</p>

<p>Reference:<a href="https://learn.jquery.com/events/history-of-events/">History of jQuery Events</a></p>

<h3>56.jQuery一个对象可以同时绑定多个事件，这是如何实现的？</h3>

<h3>57.是否知道自定义事件。jQuery里的fire函数是什么意思，什么时候用？</h3>

<p>A:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// Create the event.</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">event</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createEvent</span><span class="p">(</span><span class="s1">&#39;Event&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Define that the event name is &#39;build&#39;.</span>
</span><span class='line'><span class="nx">event</span><span class="p">.</span><span class="nx">initEvent</span><span class="p">(</span><span class="s1">&#39;build&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Listen for the event.</span>
</span><span class='line'><span class="nx">elem</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;build&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// e.target matches elem</span>
</span><span class='line'><span class="p">},</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// target can be any Element or other EventTarget.</span>
</span><span class='line'><span class="nx">elem</span><span class="p">.</span><span class="nx">dispatchEvent</span><span class="p">(</span><span class="nx">event</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>callbacks.fire()</code>:Call all of the callbacks with the given arguments.</p>

<h3>58.jQuery 是通过哪个方法和 Sizzle 选择器结合的？</h3>

<p>A:<code>jQuery.fn.find()</code></p>

<h3>59.针对 jQuery性能的优化方法？</h3>

<h3>60.jQuery与jQuery UI 有啥区别？</h3>

<p>A:</p>

<ul>
<li><p>jQuery is a fast, small, and feature-rich JavaScript library. It makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers. </p></li>
<li><p>jQuery UI is a curated set of user interface interactions, effects, widgets, and themes built on top of the jQuery JavaScript Library.</p></li>
</ul>


<h3>61.jQuery和Zepto的区别？各自的使用场景？</h3>

<h3>62.针对 jQuery 的优化方法？</h3>

<h3>63.Zepto的点透问题如何解决？</h3>

<h3>64.需求：实现一个页面操作不会整页刷新的网站，并且能在浏览器前进、后退时正确响应。给出你的技术实现方案？</h3>

<p>A:实际上就是如何去实现 SPA。</p>

<p>Reference:<a href="https://medium.com/@pshrmn/demystifying-single-page-applications-3068d0555d46">How Single-Page Applications Work</a></p>

<h3>65.如何判断当前脚本运行在浏览器还是node环境中？</h3>

<h3>66.移动端最小触控区域是多大？</h3>

<h3>67.jQuery 的 slideUp动画 ，如果目标元素是被外部事件驱动, 当鼠标快速地连续触发外部元素事件, 动画会滞后的反复执行，该如何处理呢?</h3>

<h3>68.把 Script 标签 放在页面的最底部的body封闭之前 和封闭之后有什么区别？浏览器会如何解析它们？</h3>

<h3>69.移动端的点击事件的有延迟，时间是多久，为什么会有？ 怎么解决这个延时？（click 有 300ms 延迟,为了实现safari的双击事件的设计，浏览器要知道你是不是要双击操作。）</h3>

<h3>70.解释JavaScript中的作用域与变量声明提升？</h3>

<h3>71.Node.js的适用场景？</h3>

<h3>72.什么是“前端路由”?什么时候适合使用“前端路由”? “前端路由”有哪些优点和缺点?</h3>

<h3>73.检测浏览器版本有哪些方式？</h3>

<p>A:</p>

<ul>
<li>Navigator.appVersion</li>
<li>Navigator.userAgent</li>
</ul>


<h3>74.What is a Polyfill?</h3>

<h3>75.做的项目中，有没有用过或自己实现一些 polyfill 方案（兼容性处理方案）？</h3>

<h3>76.我们给一个dom同时绑定两个点击事件，一个用捕获，一个用冒泡。会执行几次事件，会先执行冒泡还是捕获？</h3>

<p>A:按照W3C的标准，先发生捕获事件，后发生冒泡事件。</p>

<h3>77.使用JS实现获取文件扩展名？</h3>

<h3>78.Webpack热更新实现原理?</h3>

<h3>79.请介绍一下JS之事件节流？</h3>

<p>A:事件节流就是降低事件响应的速率。</p>

<blockquote><p>In software, a throttling process, or a throttling controller as it is sometimes called, is a process responsible for regulating the rate at which application processing is conducted, either statically or dynamically.</p></blockquote>

<h3>80.什么是JS的函数防抖？</h3>

<p>A:当调用动作过n毫秒后，才会执行该动作，若在这n毫秒内又调用此动作则将重新计算执行时间。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web 面试题汇总(二)]]></title>
    <link href="http://DamianSheldon.github.io/blog/web-technical-interview-part-2.html"/>
    <updated>2018-09-05T15:52:44+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/web-technical-interview-part-2</id>
    <content type="html"><![CDATA[<h3>1.介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？</h3>

<p>A:每个元素被表示为一个矩形的方框，框的内容、内边距、边界和外边距像洋葱的膜那样，一层包着一层构建起来。</p>

<p>低版本IE的盒子模型的宽度包括框的内容、内边距和边界。</p>

<h3>2.CSS选择符有哪些？哪些属性可以继承？</h3>

<p>A:</p>

<ul>
<li><em>简单选择器</em>（Simple selectors）：通过元素类型、class 或 id 匹配一个或多个元素。</li>
<li><em>属性选择器</em>（Attribute selectors）：通过 属性 / 属性值 匹配一个或多个元素。</li>
<li><em>伪类</em>（Pseudo-classes）：匹配处于确定状态的一个或多个元素，比如被鼠标指针悬停的元素，或当前被选中或未选中的复选框，或元素是DOM树中一父节点的第一个子节点。</li>
<li><em>伪元素</em>（Pseudo-elements）:匹配处于相关的确定位置的一个或多个元素，例如每个段落的第一个字，或者某个元素之前生成的内容。 </li>
<li><em>组合器</em>（Combinators）：这里不仅仅是选择器本身，还有以有效的方式组合两个或更多的选择器用于非常特定的选择的方法。例如，你可以只选择divs的直系子节点的段落，或者直接跟在headings后面的段落。</li>
<li><em>多重选择器</em>（Multiple selectors）：这些也不是单独的选择器；这个思路是将以逗号分隔开的多个选择器放在一个CSS规则下面， 以将一组声明应用于由这些选择器选择的所有元素。</li>
</ul>


<p>哪些属性可以继承？</p>

<ul>
<li>所有元素可继承：visibility和cursor。</li>
<li>内联元素可继承：letter-spacing、word-spacing、white-space、line-height、color、font、font-family、font-size、font-style、font-variant、font-weight、text-decoration、text-transform、direction。</li>
<li>终端块状元素可继承：text-indent和text-align。</li>
<li>列表元素可继承：list-style、list-style-type、list-style-position、list-style-image。</li>
<li>表格元素可继承：border-collapse。</li>
</ul>


<h3>3.CSS优先级算法如何计算？</h3>

<p>A:CSS根据规则的重要性、专用性和源代码次序来计算优先级。</p>

<p>重要性和源代码次序相对简单，专用性是用四种不同的值（或组件）来衡量的，它们可以被认为是千位，百位，十位和个位:</p>

<ol>
<li>千位：如果声明是在style 属性中该列加1分（这样的声明没有选择器，所以它们的专用性总是1000。）否则为0。</li>
<li>百位：在整个选择器中每包含一个ID选择器就在该列中加1分。</li>
<li>十位：在整个选择器中每包含一个类选择器、属性选择器、或者伪类就在该列中加1分。</li>
<li>个位：在整个选择器中每包含一个元素选择器或伪元素就在该列中加1分。</li>
</ol>


<!--more-->


<h3>4.如何居中div？</h3>

<p>A:</p>

<ul>
<li>水平居中</li>
<li>水平垂直居中</li>
</ul>


<h4>水平居中</h4>

<p>给div设置一个宽度，然后添加margin:0 auto属性。</p>

<figure class='code'><figcaption><span>html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>div{
</span><span class='line'>      width:200px;
</span><span class='line'>      margin:0 auto;
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<h4>水平垂直居中</h4>

<ul>
<li>容器的宽高确定</li>
</ul>


<figure class='code'><figcaption><span>css </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// 确定容器的宽高 宽500 高 300 的层
</span><span class='line'>  // 设置层的外边距
</span><span class='line'>  
</span><span class='line'>  div {
</span><span class='line'>      position: relative;     /* 相对定位或绝对定位均可 */
</span><span class='line'>      width:500px;
</span><span class='line'>      height:300px;
</span><span class='line'>      top: 50%;
</span><span class='line'>      left: 50%;
</span><span class='line'>      margin: -150px 0 0 -250px;          /* 外边距为自身宽高的一半 */
</span><span class='line'>      background-color: pink;         /* 方便看效果 */
</span><span class='line'>   }</span></code></pre></td></tr></table></div></figure>


<ul>
<li>容器的宽高未知</li>
</ul>


<figure class='code'><figcaption><span>css </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// 未知容器的宽高，利用 `transform` 属性
</span><span class='line'>  
</span><span class='line'>  div {
</span><span class='line'>      position: absolute;     /* 相对定位或绝对定位均可 */
</span><span class='line'>      width:500px;
</span><span class='line'>      height:300px;
</span><span class='line'>      top: 50%;
</span><span class='line'>      left: 50%;
</span><span class='line'>      transform: translate(-50%, -50%);
</span><span class='line'>      background-color: pink;         /* 方便看效果 */
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<ul>
<li>利用 flex 布局</li>
</ul>


<figure class='code'><figcaption><span>css </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// 利用 flex 布局
</span><span class='line'>   // 实际使用时应考虑兼容性
</span><span class='line'>  
</span><span class='line'>  .container {
</span><span class='line'>      display: flex;
</span><span class='line'>      align-items: center;            /* 垂直居中 */
</span><span class='line'>      justify-content: center;        /* 水平居中 */
</span><span class='line'>  
</span><span class='line'>   }
</span><span class='line'>  .container div {
</span><span class='line'>      width: 100px;
</span><span class='line'>      height: 100px;
</span><span class='line'>      background-color: pink;         /* 方便看效果 */
</span><span class='line'>   }</span></code></pre></td></tr></table></div></figure>


<h3>Further Reading</h3>

<p><a href="https://css-tricks.com/centering-css-complete-guide/">Centering in CSS: A Complete Guide</a></p>

<h3>5.display有哪些值？说明他们的作用。</h3>

<p>A:display 所有可能的值太多了，这里说下常见的:</p>

<table>
<thead>
<tr>
<th style="text-align:left;"> display </th>
<th style="text-align:left;"> 作用 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> none </td>
<td style="text-align:left;"> 元素不显示，并从文档流中移除。 </td>
</tr>
<tr>
<td style="text-align:left;"> inline </td>
<td style="text-align:left;"> 行内元素类型。默认宽度为内容宽度，不可设置宽高，同行显示。 </td>
</tr>
<tr>
<td style="text-align:left;"> inline-block </td>
<td style="text-align:left;"> 默认宽度为内容宽度，可以设置宽高，同行显示。 </td>
</tr>
<tr>
<td style="text-align:left;"> block </td>
<td style="text-align:left;"> 块类型。默认宽度为父元素宽度，可设置宽高，换行显示。 </td>
</tr>
<tr>
<td style="text-align:left;"> list-item </td>
<td style="text-align:left;"> 象块类型元素一样显示，并添加样式列表标记。 </td>
</tr>
<tr>
<td style="text-align:left;"> table </td>
<td style="text-align:left;"> 元素会作为块级表格来显示。 </td>
</tr>
</tbody>
</table>


<h3>6.position的值? relative和absolute定位原点是？</h3>

<p>A: position  = static | relative | absolute | sticky | fixed</p>

<p>relative: The element is positioned according to the normal flow of the document, and then offset relative to itself based on the values of top, right, bottom, and left.</p>

<p>absolute: The element is removed from the normal document flow, and no space is created for the element in the page layout. It is positioned relative to its closest positioned ancestor, if any; otherwise, it is placed relative to the initial containing block. Its final position is determined by the values of top, right, bottom, and left.</p>

<h3>7.请解释一下CSS3的Flexbox（弹性盒布局模型），以及适用场景？</h3>

<p>A:Flexbox is a one-dimensional layout method for laying out items in rows or columns. Items flex to fill additional space and shrink to fit into smaller spaces. </p>

<p>适用场景:</p>

<ul>
<li>Vertically centering a block of content inside its parent.</li>
<li>Making all the children of a container take up an equal amount of the available width/height, regardless of how much width/height is available.</li>
<li>Making all columns in a multiple column layout adopt the same height even if they contain a different amount of content.</li>
</ul>


<h3>8.用纯CSS创建一个三角形的原理是什么？</h3>

<p>A:采用的是均分原理。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.triangle{  
</span><span class='line'>       width:0;  
</span><span class='line'>       height:0;  
</span><span class='line'>       margin:0 auto;  
</span><span class='line'>       border:6px solid transparent;  
</span><span class='line'>       border-top: 6px solid red;  
</span><span class='line'>   }
</span><span class='line'>     
</span><span class='line'>  // 第二种写法：
</span><span class='line'>  
</span><span class='line'>  .triangle{  
</span><span class='line'>       width:0;  
</span><span class='line'>       height:0;  
</span><span class='line'>       margin:0 auto;  
</span><span class='line'>       border-width:6px;
</span><span class='line'>       border-color:red transparent transparent transparent;
</span><span class='line'>       border-style:solid dashed dashed dashed;//为了兼容IE6，把没有的边框都设置为虚线
</span><span class='line'>   }</span></code></pre></td></tr></table></div></figure>


<h3>9.一个满屏 品 字布局 如何设计?</h3>

<p>A:方式一：上面的 div 宽100%，下面的两个 div 分别宽50%，然后用 float 或者 inline 使其不换行即可；方式二：上面的 div 宽100%，内含一个 div 水平居中，下面的div，内含两个 div,使用 absolute 定位。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// 方式一
</span><span class='line'>  &lt;!DOCTYPE html>
</span><span class='line'>  &lt;html>
</span><span class='line'>  &lt;head>
</span><span class='line'>      &lt;meta charset="utf-8">
</span><span class='line'>      &lt;title>满屏品字布局&lt;/title>
</span><span class='line'>      &lt;style type="text/css">
</span><span class='line'>          *{
</span><span class='line'>              margin: 0;
</span><span class='line'>              padding: 0;
</span><span class='line'>          }
</span><span class='line'>  
</span><span class='line'>          html,body{
</span><span class='line'>              height: 100%;/*此设置非常关键，因为默认的body，HTML高度为0，所以后面设置的div的高度无法用百分比显示*/
</span><span class='line'>          }       
</span><span class='line'>  
</span><span class='line'>          .header{
</span><span class='line'>              height:50%; /*此步结合html,body高度为100%，解决元素相对窗口的定位问题*/
</span><span class='line'>              width: 50%;     
</span><span class='line'>              background: #ccc;           
</span><span class='line'>              margin:0 auto;
</span><span class='line'>          }
</span><span class='line'>  
</span><span class='line'>          .main{
</span><span class='line'>              width: 100%;
</span><span class='line'>              height: 50%;
</span><span class='line'>              background: #ddd;
</span><span class='line'>          }
</span><span class='line'>  
</span><span class='line'>          .main .left,.main .right{
</span><span class='line'>              float: left;/*采用float方式，对元素进行左右定位*/
</span><span class='line'>              width:50%;/*此步解决元素相对窗口的定位问题*/
</span><span class='line'>              height:100%;/*此步解决元素相对窗口的定位问题*/
</span><span class='line'>              background: yellow;
</span><span class='line'>          }
</span><span class='line'>  
</span><span class='line'>          .main .right{
</span><span class='line'>              background: green;
</span><span class='line'>          }
</span><span class='line'>      &lt;/style>
</span><span class='line'>  &lt;/head>
</span><span class='line'>  &lt;body>
</span><span class='line'>  &lt;div class="header">&lt;/div>
</span><span class='line'>  &lt;div class="main">
</span><span class='line'>      &lt;div class="left">&lt;/div>
</span><span class='line'>      &lt;div class="right">&lt;/div>
</span><span class='line'>  &lt;/div>
</span><span class='line'>  &lt;/body>
</span><span class='line'>  &lt;/html></span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!DOCTYPE html>
</span><span class='line'>  &lt;html>
</span><span class='line'>  &lt;head>
</span><span class='line'>  &lt;meta charset="utf-8">
</span><span class='line'>      &lt;title>满屏品字布局&lt;/title>
</span><span class='line'>      &lt;style type="text/css">
</span><span class='line'>          body{  
</span><span class='line'>            height: 1200px;  
</span><span class='line'>        }  
</span><span class='line'>        .main {  
</span><span class='line'>            position: fixed;  /*此步解决元素相对窗口的定位问题*/
</span><span class='line'>            left: 0;  
</span><span class='line'>            top: 0;  
</span><span class='line'>            height: 100%;  
</span><span class='line'>            width: 100%;  
</span><span class='line'>        }  
</span><span class='line'>        .wrapper-up {  
</span><span class='line'>            height: 50%;  
</span><span class='line'>        }  
</span><span class='line'>  
</span><span class='line'>        .wrapper-down {  
</span><span class='line'>            height: 50%;  
</span><span class='line'>            position: relative;  
</span><span class='line'>        }  
</span><span class='line'>        .div-square-up {  
</span><span class='line'>            width: 50%;  
</span><span class='line'>            margin: 0 auto;  
</span><span class='line'>            border: 2px solid red;  
</span><span class='line'>            height: 96%;  
</span><span class='line'>            box-sizing: border-box;  
</span><span class='line'>        }  
</span><span class='line'>  
</span><span class='line'>        .div-square-left {  
</span><span class='line'>            position: absolute;  /*此步解决元素左右定位问题*/
</span><span class='line'>            left: 0;  
</span><span class='line'>            width: 48%;  
</span><span class='line'>            height: 100%;  
</span><span class='line'>            box-sizing: border-box;  
</span><span class='line'>            border: 2px solid red;  
</span><span class='line'>        }  
</span><span class='line'>  
</span><span class='line'>        .div-square-right {  
</span><span class='line'>            position: absolute;   /*此步解决元素左右定位问题*/
</span><span class='line'>            right: 0;  
</span><span class='line'>            width: 48%;  
</span><span class='line'>            height: 100%;  
</span><span class='line'>            border: 2px solid red;  
</span><span class='line'>            box-sizing: border-box;  
</span><span class='line'>        }  
</span><span class='line'>      &lt;/style>
</span><span class='line'>  &lt;/head>
</span><span class='line'>  &lt;body>
</span><span class='line'>      &lt;div class="main">  
</span><span class='line'>           &lt;div class="wrapper-up">  
</span><span class='line'>             &lt;div class="div-square-up">&lt;/div>  
</span><span class='line'>           &lt;/div>  
</span><span class='line'>           &lt;div class="wrapper-down">  
</span><span class='line'>             &lt;div class="div-square-left">&lt;/div>  
</span><span class='line'>             &lt;div class="div-square-right">&lt;/div>  
</span><span class='line'>           &lt;/div>  
</span><span class='line'>      &lt;/div> 
</span><span class='line'>  &lt;/body>
</span><span class='line'>  &lt;/html></span></code></pre></td></tr></table></div></figure>


<h3>10.css多列等高如何实现？</h3>

<p>A:利用padding-bottom|margin-bottom正负值相抵；
设置父容器设置超出隐藏（overflow:hidden），这样子父容器的高度就还是它里面的列没有设定padding-bottom时的高度，当它里面的任 一列高度增加了，则父容器的高度被撑到里面最高那列的高度，其他比这列矮的列会用它们的padding-bottom补偿这部分高度差。</p>

<h3>11.经常遇到的浏览器的兼容性有哪些？原因，解决方法是什么，常用hack的技巧？</h3>

<p>A:
经常遇到的浏览器的兼容性有哪些？原因，解决方法是什么?</p>

<ul>
<li>png24位的图片在iE6浏览器上出现背景，解决方案是做成PNG8.</li>
<li>浏览器默认的margin和padding不同。解决方案是加一个全局的<code>*{margin:0;padding:0;}</code>来统一。</li>
<li>IE6双边距bug:块属性标签float后，又有横行的margin情况下，在ie6显示margin比设置的大。浮动ie产生的双倍距离 <code>#box{ float:left; width:10px; margin:0 0 0 100px;}</code>，这种情况之下IE会产生20px的距离，解决方案是在float的标签样式控制中加入 ——<code>_display:inline;</code>将其转化为行内属性。利用 <code>_</code> 这个符号只有ie6会识别的渐进识别的方式，从总体中逐渐排除局部。</li>
<li>IE下,可以使用获取常规属性的方法来获取自定义属性,也可以使用getAttribute()获取自定义属性;Firefox下,只能使用getAttribute()获取自定义属性。解决方法:统一通过getAttribute()获取自定义属性。</li>
<li>IE下,even对象有x,y属性,但是没有pageX,pageY属性;Firefox下,event对象有pageX,pageY属性,但是没有x,y属性。解决方法：（条件注释）缺点是在IE浏览器下可能会增加额外的HTTP请求数。</li>
<li>超链接访问过后hover样式就不出现了 被点击访问过的超链接样式不在具有hover和active了解决方法是改变CSS属性的排列顺序:L-V-H-A :  <code>a:link {} a:visited {} a:hover {} a:active {}</code></li>
</ul>


<p>常用hack的技巧？</p>

<p>由于不同厂商的流览器或某浏览器的不同版本（如IE6-IE11,Firefox/Safari/Opera/Chrome等），对CSS的支持、解析不一样，导致在不同浏览器的环境中呈现出不一致的页面展现效果。这时，我们为了获得统一的页面效果，就需要针对不同的浏览器或不同版本写特定的CSS样式，我们把这个针对不同的浏览器/不同版本写相应的CSS code的过程，叫做CSS hack!</p>

<p>CSS Hack大致有3种表现形式：CSS属性前缀法、选择器前缀法以及IE条件注释法（即HTML头部引用if IE）。</p>

<ul>
<li>属性前缀法(即类内部Hack)：例如 IE6能识别下划线和星号，IE7能识别星号，但不能识别下划线，IE6~IE10都认识"\9"，但firefox前述三个都不能认识。</li>
<li>选择器前缀法(即选择器Hack)：例如 IE6能识别<code>*html .class{}</code>，IE7能识别<code>*+html .class{}</code>或者<code>*:first-child+html .class{}</code>。</li>
<li>IE条件注释法(即HTML条件注释Hack)(注：IE10+已经不再支持条件注释)： 这类Hack不仅对CSS生效，对写在判断语句里面的所有代码都会生效。</li>
</ul>


<figure class='code'><figcaption><span>css</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.bb{
</span><span class='line'>      background-color:red;/*所有识别*/
</span><span class='line'>      background-color:#00deff\9; /*IE6、7、8识别*/
</span><span class='line'>      +background-color:#a200ff;/*IE6、7识别*/
</span><span class='line'>      _background-color:#1e0bd1;/*IE6识别*/
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<h3>12.li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？</h3>

<p>A:浏览器的默认行为是把inline元素间的空白字符（空格换行tab）渲染成一个空格，也就是我们上面的代码<code>&lt;li&gt;</code>换行后会产生换行字符，而它会变成一个空格，当然空格就占用一个字符的宽度。</p>

<p>解决办法:可以将 ul 的字符间隔消除，将 li 内的字符间隔设为默认。</p>

<figure class='code'><figcaption><span>css </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.wrap ul{letter-spacing: -5px;}
</span><span class='line'>  .wrap ul li{letter-spacing: normal;}</span></code></pre></td></tr></table></div></figure>


<h3>13.为什么要初始化CSS样式。</h3>

<p>A:因为浏览器的兼容问题，不同浏览器对有些标签的默认值是不同的，如果没对CSS初始化往往会出现浏览器之间的页面显示差异。</p>

<h3>14.absolute的containing block(容器块)计算方式跟正常流有什么不同？</h3>

<p>A:</p>

<p>The process for identifying the containing block depends entirely on the value of the element's position property:</p>

<ol>
<li>If the position property is static or relative, the containing block is formed by the edge of the content box of the nearest ancestor element that is a block container(such as an inline-block, block, or list-item element) or which establishes a formatting context (such as a table container, flex container, grid container, or the block container itself).</li>
<li>If the position property is absolute, the containing block is formed by the edge of the padding box of the nearest ancestor element that has a position value other than static (fixed, absolute, relative, or sticky).</li>
<li>If the position property is fixed, the containing block is established by the viewport (in the case of continuous media) or the page area (in the case of paged media).</li>
<li><p>If the position property is absolute or fixed, the containing block may also be formed by the edge of the padding box of the nearest ancestor element that has the following:</p>

<ol>
<li>A transform or perspective value other than none</li>
<li>A will-change value of transform or perspective</li>
<li>A filter  value other than none or a will-change value of filter (only works on Firefox).</li>
</ol>
</li>
</ol>


<p>Reference:<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block">Layout and the containing block</a></p>

<h3>15.CSS里的visibility属性有个collapse属性值是干嘛用的？在不同浏览器下有什么区别？</h3>

<p>A: 对于普通元素 visibility:collapse; 会将元素完全隐藏，不占据页面布局空间，与display:none;表现相同。如果目标元素为table，visibility:collapse;将table隐藏，但是会占据页面布局空间。</p>

<p>仅在Firefox下起作用,IE会显示元素,Chrome会将元素隐藏,但是占据空间.</p>

<h3>16.position跟display、margin collapse、overflow、float这些特性相互叠加后会怎么样？</h3>

<p>A:</p>

<ul>
<li>如果元素的display为none，那么元素不被渲染，position，float不起作用；</li>
<li>如果元素拥有<code>position:absolute;</code>或者<code>position:fixed;</code>属性那么元素将为绝对定位，float不起作用；</li>
<li>如果元素float属性不是none，元素会脱离文档流，根据float属性值来显示，有浮动；</li>
<li>绝对定位、inline-block属性的元素，margin不会和垂直方向上的其他元素margin折叠；</li>
</ul>


<h3>17.对BFC规范(块级格式化上下文：block formatting context)的理解？</h3>

<p>A:块格式化上下文（Block Formatting Context，BFC） 是Web页面的可视化CSS渲染的一部分，是布局过程中生成块级盒子的区域，也是浮动元素与其他元素的交互限定区域。</p>

<p>块格式化上下文包含创建它的元素内部的所有内容。块格式化上下文对浮动定位与清除浮动都很重要。浮动定位和清除浮动时只会应用于同一个BFC内的元素。浮动不会影响其它BFC中元素的布局，而清除浮动只能清除同一BFC中在它前面的元素的浮动。外边距折叠（Margin collapsing）也只会发生在属于同一BFC的块级元素之间。</p>

<p>Reference:<a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context">块格式化上下文</a></p>

<h3>18.css定义的权重</h3>

<p>A:</p>

<ol>
<li>Thousands: Score one in this column if the declaration is inside a style attribute (such declarations don&rsquo;t have selectors, so their specificity is always simply 1000.) Otherwise 0.</li>
<li>Hundreds: Score one in this column for each ID selector contained inside the overall selector.</li>
<li>Tens: Score one in this column for each class selector, attribute selector, or pseudo-class contained inside the overall selector.</li>
<li>Ones: Score one in this column for each element selector or pseudo-element contained inside the overall selector.</li>
</ol>


<h3>19.请解释一下为什么需要清除浮动？清除浮动的方式?</h3>

<p>A:清除浮动是为了清除使用浮动元素产生的影响。浮动的元素，高度会塌陷，而高度的塌陷使我们页面后面的布局不能正常显示。</p>

<p>清除浮动的方式:</p>

<ul>
<li>The clearfix hack</li>
<li>Using overflow</li>
<li>display: flow-root</li>
</ul>


<p>Reference:<a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Floats">Floats</a></p>

<h3>20.什么是外边距合并？</h3>

<p>A:外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。</p>

<h3>21.zoom:1的清除浮动原理?</h3>

<p>A:当设置了zoom的值之后，所设置的元素就会就会扩大或者缩小，高度宽度就会重新计算了，这里一旦改变zoom值时其实也会发生重新渲染，运用这个原理，也就解决了ie下子元素浮动时候父元素不随着自动扩大的问题。</p>

<h3>22.移动端的布局用过媒体查询吗？</h3>

<h3>23.使用 CSS 预处理器吗？喜欢那个？</h3>

<h3>24.CSS优化、提高性能的方法有哪些？</h3>

<p>A:</p>

<p>作者：赵望野
链接：<a href="https://www.zhihu.com/question/19886806/answer/50285495">https://www.zhihu.com/question/19886806/answer/50285495</a>
来源：知乎
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>

<ul>
<li><strong>加载性能</strong>: 这个方面相关的 best practice 太多了，网上随便找一找就是一堆资料，比如不要用 import 啊，压缩啊等等，主要是从减少文件体积、减少阻塞加载、提高并发方面入手的，任何 hint 都逃不出这几个大方向。</li>
<li><strong>选择器性能</strong>: 可以参考 GitHub 的这个分享 <a href="https://speakerdeck.com/jonrohan/githubs-css-performance%EF%BC%8C%E4%BD%86">https://speakerdeck.com/jonrohan/githubs-css-performance%EF%BC%8C%E4%BD%86</a> selector 的对整体性能的影响可以忽略不计了，selector 的考察更多是规范化和可维护性、健壮性方面，很少有人在实际工作当中会把选择器性能作为重点关注对象的，但也像 GitHub 这个分享里面说的一样——知道总比不知道好。</li>
<li><strong>渲染性能</strong>: 渲染性能是 CSS 优化最重要的关注对象。页面渲染 junky 过多？看看是不是大量使用了 text-shadow？是不是开了字体抗锯齿？CSS 动画怎么实现的？合理利用 GPU 加速了吗？什么你用了 Flexible Box Model？有没有测试换个 layout 策略对 render performance 的影响？这个方面搜索一下 CSS render performance 或者 CSS animation performance 也会有一堆一堆的资料可供参考。</li>
<li><strong>可维护性、健壮性</strong>: 命名合理吗？结构层次设计是否足够健壮？对样式进行抽象复用了吗？优雅的 CSS 不仅仅会影响后期的维护成本，也会对加载性能等方面产生影响。这方面可以多找一些 OOCSS（不是说就要用 OOCSS，而是说多了解一下）等等不同 CSS Strategy 的信息，取长补短。</li>
</ul>


<h3>25.浏览器是怎样解析CSS选择器的？</h3>

<p>A:按照从上到下，从右到左的顺序解析。</p>

<h3>26.在网页中的应该使用奇数还是偶数的字体？为什么呢？</h3>

<p>A:一般来说，由于各种终端设备的分辨率是偶数的，设计上普遍采用偶数像素体系，奇数像素体系受到排挤，主要的冲突表现在：奇数像素宽度的东西，无法在偶数像素元素内居中显示，总是要差一个像素。</p>

<h3>27.margin和padding分别适合什么场景使用？</h3>

<p>A:margin是用来隔开元素与元素的间距；padding是用来隔开元素与内容的间隔。</p>

<h3>28.抽离样式模块怎么写，说出思路，有无实践经验？</h3>

<h3>29.元素竖向的百分比设定是相对于容器的高度吗？</h3>

<p>A:如果是height的话，是相对于容器高度，如果是padding-height,margin-height则是相对于容器的宽度。</p>

<h3>30.全屏滚动的原理是什么？用到了CSS的那些属性？</h3>

<p>A:可以利用css3和div的绝对定位来实现。用到了 position, transform.</p>

<p>Reference:<a href="http://www.alloyteam.com/2015/04/quan-ping-gun-dong-xiao-guo-h5fullscreenpage-js/">全屏滚动效果</a></p>

<h3>31.什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的IE？</h3>

<p>A:Responsive web design (RWD) is an approach to web design that makes web pages render well on a variety of devices and window or screen sizes.</p>

<h3>32.视差滚动效果，如何给每页做不同的动画？（回到顶部，向下滑动要再次出现，和只出现一次分别怎么做？）</h3>

<p>A:</p>

<ul>
<li>利用background-attachment属性实现。 background-attachment: fixed || scroll || local 默认情况下，此属性取值scroll，页面滚动时，内容和背景一起运动，如果取值fixed，背景相对浏览器固定。</li>
<li>通过js控制 在页面滚动过程中，我们获取页面的scrollTop的值，根据不同参数值去设置各自scene的top值，这样滚动页面的时候，不同的速度就出来了</li>
</ul>


<p>Reference:<a href="http://www.alloyteam.com/2014/01/parallax-scrolling-love-story/">视差滚动的爱情故事</a></p>

<h3>33.<code>::before</code> 和 <code>:after</code>中双冒号和单冒号 有什么区别？解释一下这2个伪元素的作用。</h3>

<p>A: 单冒号(:)用于CSS3伪类，双冒号(::)用于CSS3伪元素。（伪元素由双冒号和伪元素名称组成）双冒号是在当前规范中引入的，用于区分伪类和伪元素。不过浏览器需要同时支持旧的已经存在的伪元素写法，比如:first-line、:first-letter、:before、:after等，而新的在CSS3中引入的伪元素则不允许再支持旧的单冒号的写法。</p>

<p>想让插入的内容出现在其它内容前，使用::before，否者，使用::after；</p>

<h3>34.如何修改chrome记住密码后自动填充表单的黄色背景 ？</h3>

<p>A:</p>

<figure class='code'><figcaption><span>css </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>input:-webkit-autofill, textarea:-webkit-autofill, select:-webkit-autofill {
</span><span class='line'>      background-color: rgb(250, 255, 189); /* #FAFFBD; */
</span><span class='line'>      background-image: none;
</span><span class='line'>      color: rgb(0, 0, 0);
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<h3>35.你对line-height是如何理解的？</h3>

<p>A:“行高”顾名思意指一行文字的高度。具体来说是指两行文字间基线之间的距离。</p>

<p>Reference:<a href="https://www.zhangxinxu.com/wordpress/2009/11/css%E8%A1%8C%E9%AB%98line-height%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%8F%8A%E5%BA%94%E7%94%A8/">css行高line-height的一些深入理解及应用</a></p>

<h3>36.设置元素浮动后，该元素的display值是多少？</h3>

<p>A: 自动变成了 display:block.</p>

<h3>37.怎么让Chrome支持小于12px 的文字？</h3>

<p>A:目前Chrome浏览器已经取消了最小字体限制。</p>

<h3>38.让页面里的字体变清晰，变细用CSS怎么做？</h3>

<p>A: <code>-webkit-font-smoothing: antialiased;</code></p>

<h3>39.font-style属性可以让它赋值为“oblique” oblique是什么意思？</h3>

<p>A:倾斜的字体样式</p>

<h3>40.position:fixed;在android下无效怎么处理？</h3>

<h3>41.如果需要手动写动画，你认为最小时间间隔是多久，为什么？</h3>

<p>A:多数显示器默认频率是60Hz，即1秒刷新60次，所以理论上最小间隔为1/60＊1000ms ＝ 16.7ms</p>

<h3>42.display:inline-block 什么时候会显示间隙</h3>

<p>A:真正意义上的inline-block水平呈现的元素间，换行显示或空格分隔的情况下会有间距。</p>

<p>Reference:<a href="https://www.zhangxinxu.com/wordpress/2012/04/inline-block-space-remove-%E5%8E%BB%E9%99%A4%E9%97%B4%E8%B7%9D/">去除inline-block元素间间距的N种方法</a></p>

<h3>43.overflow: scroll时不能平滑滚动的问题怎么处理？</h3>

<p>A: <code>-webkit-overflow-scrolling: touch;</code> </p>

<h3>44.有一个高度自适应的div，里面有两个div，一个高度100px，希望另一个填满剩下的高度。</h3>

<p>A: <a href="https://www.whitebyte.info/programming/css/how-to-make-a-div-take-the-remaining-height">How to make a div take the remaining height</a></p>

<h3>45.png、jpg、gif 这些图片格式解释一下，分别什么时候用。有没有了解过webp？</h3>

<p>A:</p>

<p>png:
 优点:无损压缩，有透明选项，压缩效率高于bmp 缺点:一般体积比同尺寸的90%压缩率的jpg要大很多(通常是5倍以上),但人眼很难识别其中的区别 用途:最常见的无损压缩图片格式,如果是经常对某图片进行编辑保存,要求图片数据100%完整,或需要透明效果(给PS当素材或用作图标等)则推荐使用</p>

<p>jpg/jpeg:
 优点:体积比png小，打开速度比png快 缺点:属于有损压缩，每次保存都会产生数据损失(jpeg artifacts)，故不适合用于多次编辑保存。压缩率过高图像会失真 用途:网络上最最常见的格式，也是静态图片(不只是照片)就常用的保存格式，就算是同一小组开发的jp2(相当于jpg第2代)也无法取代它。一般如果肉眼无法识别与png的差别和没有特殊要求就用jpg。</p>

<p>gif:</p>

<p>优点:支持动画以及透明，文件小
缺点:色域不广，只有256色
用途:动态图</p>

<p>webp:WebP是谷歌开发的一种新图片格式，同时支持有损和无损压缩的、使用直接色的、点阵图。
从名字就可以看出来它是为Web而生的，什么叫为Web而生呢？就是说相同质量的图片，WebP具有更小的文件体积。现在网站上充满了大量的图片，如果能够降低每一个图片的文件大小，那么将大大减少浏览器和服务器之间的数据传输量，进而降低访问延迟，提升访问体验。</p>

<h3>46.什么是Cookie 隔离？（或者说：请求资源的时候不要让它带cookie怎么做）</h3>

<p>A:如果静态文件都放在主域名下，那静态文件请求的时候都带有的cookie的数据提交给server的，非常浪费流量，所以不如隔离开。</p>

<p>因为cookie有域的限制，因此不能跨域提交请求，利用这点，可以将静态文件放在非主要域名下，这样便隔开了。请求头中就不会带有cookie数据，这样可以降低请求头的大小，降低请求时间，从而达到降低整体请求延时的目的。</p>

<p>同时这种方式不会将cookie传入Web Server，也减少了Web Server对cookie的处理分析环节，提高了webserver的http请求的解析速度。</p>

<h3>47.style标签写在body后与body前有什么区别？</h3>

<p>A:从有html标准以来到目前为止（2017年5月），标准一直是规定style元素不应出现在body元素中。
不过网页浏览器一直有容错设计。如果style元素出现在body元素，最终效果和style元素出现在head里是一样的。但是可能引起界面闪烁、重绘或重新布局。</p>

<h3>48.什么是CSS 预处理器 / 后处理器？</h3>

<p>A:预处理器例如：LESS、Sass、Stylus，用来预编译Sass或less，增强css代码的复用性，提高工作效率。</p>

<p>后处理器例如：PostCSS，通常被视为在完成的样式表中根据CSS规范处理CSS，让其更有效；目前最常做的是给CSS属性添加浏览器私有前缀，实现跨浏览器兼容性的问题。</p>

<h3>49.rem布局的优缺点?</h3>

<p>A:</p>

<p>优点：大小不受层次元素字体影响<br/>
缺点：字体不会跟随缩放；需要使用像素值兼容部分浏览器，不便于维护。</p>

<h2>Reference:</h2>

<ul>
<li><a href="https://github.com/markyun/My-blog/tree/master/Front-end-Developer-Questions/Questions-and-Answers">前端开发面试题</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web 面试题汇总(一)]]></title>
    <link href="http://DamianSheldon.github.io/blog/web-technical-interview-part-1.html"/>
    <updated>2018-09-03T17:26:10+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/web-technical-interview-part-1</id>
    <content type="html"><![CDATA[<h3>1.Doctype作用？标准模式与兼容模式各有什么区别?</h3>

<p>A: 告知浏览器的解析器用什么文档标准解析这个文档。DOCTYPE不存在或格式不正确会导致文档以兼容模式呈现。</p>

<h3>2.HTML5 为什么只需要写 &lt;!DOCTYPE HTML>？</h3>

<p>A: HTML5 不基于 SGML，因此不需要对DTD进行引用，但是需要doctype来规范浏览器的行为（让浏览器按照它们应该的方式来运行；而HTML4.01基于SGML,所以需要对DTD进行引用，才能告知浏览器文档所使用的文档类型。</p>

<h3>3.行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？</h3>

<p>A:</p>

<ul>
<li>行内元素有：a b span img input select strong（强调的语气）</li>
<li>块级元素有：div ul ol li dl dt dd h1 h2 h3 h4…p</li>
<li>常见的空元素：br hr img input link meta</li>
<li>鲜为人知的空元素：area base col command embed keygen param source track wbr</li>
</ul>


<h3>4.页面导入样式时，使用link和@import有什么区别？</h3>

<p>A:</p>

<ul>
<li>link属于XHTML标签，除了加载CSS外，还能用于定义RSS, 定义rel连接属性等作用；而@import是CSS提供的，只能用于加载CSS;</li>
<li>页面被加载的时，link会同时被加载，而@import引用的CSS会等到页面被加载完再加载;</li>
<li>import是CSS2.1 提出的，只在IE5以上才能被识别，而link是XHTML标签，无兼容问题;</li>
<li>link支持使用js控制DOM去改变样式，而@import不支持;</li>
</ul>


<h3>5.介绍一下你对浏览器内核的理解？</h3>

<h3>6.简述一下你对HTML语义化的理解？</h3>

<p>A:用正确的标签做正确的事情。</p>

<ul>
<li>html语义化让页面的内容结构化，结构更清晰，便于对浏览器、搜索引擎解析;</li>
<li>即使在没有样式CSS情况下也以一种文档格式显示，并且是容易阅读的;搜索引擎的爬虫也依赖于HTML标记</li>
<li>确定上下文和各个关键字的权重，利于SEO;</li>
<li>使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解。</li>
</ul>


<h3>7.HTML5的离线储存怎么使用，工作原理能不能解释一下？</h3>

<h3>8.浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢？</h3>

<!--more-->


<h3>9.请描述一下 cookies，sessionStorage 和 localStorage 的区别？</h3>

<h3>10.iframe有那些缺点？</h3>

<p>A:</p>

<ul>
<li>iframe会阻塞主页面的Onload事件；</li>
<li>搜索引擎的检索程序无法解读这种页面，不利于SEO；</li>
<li>iframe和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载。</li>
</ul>


<p>使用iframe之前需要考虑这两个缺点。如果需要使用iframe，最好是通过javascript 动态给iframe添加src属性值，这样可以绕开以上两个问题。</p>

<h3>11.HTML5的form如何关闭自动完成功能？</h3>

<p>A: 给不想要提示的 form 或某个 input 设置为 autocomplete=off。</p>

<h3>12.如何实现浏览器内多个标签页之间的通信?</h3>

<h3>13.webSocket如何兼容低浏览器？</h3>

<h3>14.页面可见性（Page Visibility API） 可以有哪些用途？</h3>

<p>A: 通过 visibilityState 的值检测页面当前是否可见，以及打开网页的时间等;在页面被切换到其他后台进程的时候，自动暂停音乐或视频的播放；</p>

<h3>15.如何在页面上实现一个圆形的可点击区域？</h3>

<p>A:</p>

<ol>
<li>map+area或者svg</li>
<li>border-radius</li>
<li>纯js实现 需要求一个点在不在圆上简单算法、获取鼠标坐标等等</li>
</ol>


<h3>16.实现不使用 border 画出1px高的线，在不同浏览器的标准模式与怪异模式下都能保持一致的效果。</h3>

<p>A:</p>

<figure class='code'><figcaption><span>html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;div style="height:1px;overflow:hidden;background:red">&lt;/div></span></code></pre></td></tr></table></div></figure>


<h3>17.网页验证码是干嘛的，是为了解决什么安全问题?</h3>

<p>A:区分用户是计算机还是人。</p>

<p>可以防止恶意破解密码、刷票、论坛灌水；有效防止黑客对某一个特定注册用户用暴力破解方式进行不断的登陆尝试。</p>

<h3>18.title与h1的区别、b与strong的区别、i与em的区别？</h3>

<p>A:</p>

<ul>
<li>title属性没有明确意义只表示是个标题，h1则表示层次明确的标题，对页面信息的抓取也有很大的影响。</li>
<li>b 元素用来吸引读者的注意力到文本，却不表示该文本更重要；strong 元素表示内容更重要。</li>
<li>i 内容展示为斜体，em表示强调的文本。</li>
</ul>


<h3>19.Label的作用是什么？是怎么用的？</h3>

<p>A:label标签来定义表单控制间的关系,当用户选择该标签时，浏览器会自动将焦点转到和标签相关的表单控件上。</p>

<figure class='code'><figcaption><span>html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;label for="Name">Number:&lt;/label>
</span><span class='line'>  &lt;input type="text" name="Name" id="Name"/>
</span><span class='line'>  
</span><span class='line'>  &lt;label>Date:&lt;input type="text" name="B"/>&lt;/label></span></code></pre></td></tr></table></div></figure>


<h2>Reference:</h2>

<ul>
<li><a href="https://github.com/markyun/My-blog/tree/master/Front-end-Developer-Questions/Questions-and-Answers">前端开发面试题</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
