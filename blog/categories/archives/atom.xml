<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: archives | Hello World]]></title>
  <link href="http://DamianSheldon.github.io/blog/categories/archives/atom.xml" rel="self"/>
  <link href="http://DamianSheldon.github.io/"/>
  <updated>2018-08-21T17:11:14+08:00</updated>
  <id>http://DamianSheldon.github.io/</id>
  <author>
    <name><![CDATA[Sheldon]]></name>
    <email><![CDATA[dongmeilianghy@sina.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OpenLDAP 学习笔记]]></title>
    <link href="http://DamianSheldon.github.io/blog/openldap-notes.html"/>
    <updated>2018-07-10T21:58:07+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/openldap-notes</id>
    <content type="html"><![CDATA[<p>最近业余时间在自学 Java，接触到 JNDI，继而牵扯出 LDAP。在倒腾过程中感觉是个复杂的主题，决定做个简要的笔记，梳理下思路，也方便日后忘记时容易拾起。</p>

<p>OpenLDAP 是 LDAP 协议的一个开源实现。LDAP 服务器本质上是一个为只读访问而优化的非关系型数据库。它主要用做地址簿查询（如 email 客户端）或对各种服务访问做后台认证以及用户数据权限管控。（例如，访问 Samba 时，LDAP 可以起到域控制器的作用；或者 Linux 系统认证 时代替 /etc/passwd 的作用。）</p>

<p>以 slap 开头的命令如: slapacl, slapadd 等是服务端工具；以 ldap 开头的命令如: ldapadd, ldapcompare 等是客户端命令工具。</p>

<h2>安装</h2>

<p>Mac 内置了 OpenLDAP 软件包，所以可以直接使用。</p>

<h2>配置</h2>

<h3>服务端</h3>

<p>服务端支持两种配置方法:动态运行时配置引擎和老式的 slapd.conf 文件。这里介绍通过老式的 slapd.conf 文件转换成动态运行时配置引擎来配置服务器的方法。</p>

<p>服务器的配置文件位于 <code>/etc/openldap/slapd.conf</code>。在 Mac 上第一次配置时该文件还不存在，但有一个 slapd.conf.default 文件，从文件名可知，这应该是一个默认配置文件，所以我们可以在它基础上来配置。</p>

<pre><code>$ sudo cp /etc/openldap/slapd.conf.default /etc/openldap/slapd.conf
</code></pre>

<p>需要编辑后缀和 rootdn。典型的后缀通常是你所用的域名，但这并非强制要求，而是依赖于你如何使用你的目录。下例中以 tenneshop 做为域名，tld 为 com，rootdn 则是 LDAP 管理员的名字（这里用 Manager）。</p>

<!--more-->


<pre><code>suffix     "dc=tenneshop,dc=com"
rootdn     "cn=Manager,dc=example,dc=com"
</code></pre>

<p>现在删除默认 root 口令并创建一个强口令：</p>

<pre><code>$slappasswd -s yourfavoritepassword

// /etc/openldap/slapd.conf
rootpw  {SSHA}Q0vdi3/5Hw+EhDrFAbvEEszq1Xf4YSyy
</code></pre>

<p>在 slapd.conf 头部添加一些 schemas:</p>

<pre><code> include     /private/etc/openldap/schema/core.schema
 include         /etc/openldap/schema/cosine.schema
 include         /etc/openldap/schema/inetorgperson.schema
 include         /etc/openldap/schema/nis.schema
 #include         /etc/openldap/schema/samba.schema
 include     /private/etc/openldap/schema/java.schema
</code></pre>

<p>可能需要在 slapd.conf 底部加入一些常用的 indexes:</p>

<pre><code>index   uid             pres,eq
index   mail            pres,sub,eq
index   cn              pres,sub,eq
index   sn              pres,sub,eq
index   dc              eq
</code></pre>

<p>现在准备数据目录，需要重命名配置文件：</p>

<pre><code>$sudo mkdir -p /private/var/db/openldap/openldap-data
$sudo cp /etc/openldap/DB_CONFIG.example /private/var/db/openldap/openldap-data/DB_CONFIG
</code></pre>

<p>将 slapd.conf 中的改动应用到 <code>/etc/openldap/slapd.d/</code>(第一次配置时可能需要创建该目录)，<em>需要先删除老配置</em>：</p>

<pre><code>$sudo rm -rf /etc/openldap/slapd.d/*
</code></pre>

<p>用下面命令生成配置文件:</p>

<pre><code>$sudo slaptest -f /etc/openldap/slapd.conf -F /etc/openldap/slapd.d/
</code></pre>

<p>每次修改 slapd.conf 后，都需要执行上面命令。检查有没有问题，可以忽略 &ldquo;bdb_monitor_db_open: monitoring disabled; configure monitor database to enable&rdquo;. 如果提示数据库不存在，可以先使用命令来检查配置文件:</p>

<pre><code>$sudo slaptest -f /etc/openldap/slapd.conf -F /etc/openldap/slapd.d/ -u 
</code></pre>

<p>确认配置文件没有语法错误之后，可以通过启动 slap 来创建数据库:</p>

<pre><code>$sudo /usr/libexec/slapd -F /etc/openldap/slapd.d
</code></pre>

<p>最终完整的配置文件如下:</p>

<pre><code>#
# See slapd.conf(5) for details on configuration options.
# This file should NOT be world readable.
#
include     /private/etc/openldap/schema/core.schema
include         /etc/openldap/schema/cosine.schema
include         /etc/openldap/schema/inetorgperson.schema
include         /etc/openldap/schema/nis.schema
#include         /etc/openldap/schema/samba.schema
include     /private/etc/openldap/schema/java.schema

# Define global ACLs to disable default read access.

# Do not enable referrals until AFTER you have a working directory
# service AND an understanding of referrals.
#referral   ldap://root.openldap.org

pidfile     /private/var/db/openldap/run/slapd.pid
argsfile    /private/var/db/openldap/run/slapd.args

# Load dynamic backend modules:
# modulepath    /usr/libexec/openldap
# moduleload    back_bdb.la
# moduleload    back_hdb.la
# moduleload    back_ldap.la

# Sample security restrictions
#   Require integrity protection (prevent hijacking)
#   Require 112-bit (3DES or better) encryption for updates
#   Require 63-bit encryption for simple bind
# security ssf=1 update_ssf=112 simple_bind=64

# Sample access control policy:
#   Root DSE: allow anyone to read it
#   Subschema (sub)entry DSE: allow anyone to read it
#   Other DSEs:
#       Allow self write access
#       Allow authenticated users read access
#       Allow anonymous users to authenticate
#   Directives needed to implement policy:
# access to dn.base="" by * read
# access to dn.base="cn=Subschema" by * read
# access to *
#   by self write
#   by users read
#   by anonymous auth
#
# if no access controls are present, the default policy
# allows anyone and everyone to read anything but restricts
# updates to rootdn.  (e.g., "access to * by * read")
#
# rootdn can always read and write EVERYTHING!

#######################################################################
# BDB database definitions
#######################################################################

database    bdb
suffix      "dc=tenneshop,dc=com"
rootdn      "cn=Manager,dc=tenneshop,dc=com"
# Cleartext passwords, especially for the rootdn, should
# be avoid.  See slappasswd(8) and slapd.conf(5) for details.
# Use of strong authentication encouraged.
#rootpw     secret
#The hash was generated from password secret using the command slappasswd -s secret
rootpw  {SSHA}Q0vdi3/5Hw+EhDrFAbvEEszq1Xf4YSyy
# The database directory MUST exist prior to running slapd AND
# should only be accessible by the slapd and slap tools.
# Mode 700 recommended.
directory   /private/var/db/openldap/openldap-data
# Indices to maintain
index   objectClass eq

# Some common indexes
index   uid             pres,eq
index   mail            pres,sub,eq
index   cn              pres,sub,eq
index   sn              pres,sub,eq
index   dc              eq
</code></pre>

<h3>客户端</h3>

<p>客户的配置文件位于 /etc/openldap/ldap.conf.</p>

<p>这个配置很简单，只需要将BASE 设置为服务器的前缀，将 URI 设置为服务器的地址:</p>

<pre><code>BASE            dc=tenneshop,dc=com
URI             ldap://localhost
</code></pre>

<p>最终完整的配置文件如下:</p>

<pre><code>#
# LDAP Defaults
#

# See ldap.conf(5) for details
# This file should be world readable but not world writable.

#BASE   dc=example,dc=com
#URI    ldap://ldap.example.com ldap://ldap-master.example.com:666
BASE    dc=tenneshop,dc=com
URI ldap://localhost

#SIZELIMIT  12
#TIMELIMIT  15
#DEREF      never
#TLS_REQCERT    demand
TLS_REQCERT allow
</code></pre>

<h3>创建初始项</h3>

<p>配置好客户端后，创建根项和 root 角色项：
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dn: dc=tenneshop,dc=com
</span><span class='line'>objectClass: dcObject
</span><span class='line'>objectClass: organization
</span><span class='line'>dc: tenneshop
</span><span class='line'>o: Tenneshop
</span><span class='line'>description: Tenneshop directory&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;dn: cn=Manager,dc=tenneshop,dc=com
</span><span class='line'>objectClass: organizationalRole
</span><span class='line'>cn: Manager
</span><span class='line'>description: Directory Manager</span></code></pre></td></tr></table></div></figure></p>

<p>将上述内容保存在文件 <code>/etc/openldap/root.ldif</code> 中，然后使用命令:</p>

<pre><code>$ldapadd -x -D 'cn=Manager,dc=tenneshop,dc=com' -W -f /etc/openldap/root.ldif
</code></pre>

<p>添加到目录服务中。</p>

<h3>测试安装好的系统</h3>

<p>运行下面命令:</p>

<pre><code>$ ldapsearch -x '(objectclass=*)'
# extended LDIF
#
# LDAPv3
# base &lt;dc=tenneshop,dc=com&gt; (default) with scope subtree
# filter: (objectclass=*)
# requesting: ALL
#

# tenneshop.com
dn: dc=tenneshop,dc=com
objectClass: dcObject
objectClass: organization
dc: tenneshop
o: Tenneshop
description: Tenneshop directory

# Manager, tenneshop.com
dn: cn=Manager,dc=tenneshop,dc=com
objectClass: organizationalRole
cn: Manager
description: Directory Manager

# search result
search: 2
result: 0 Success

# numResponses: 3
# numEntries: 2
</code></pre>

<p>或认证为 rootdn (将 -x 替换为 -D <user> -W), 用上面配置的例子的话：</p>

<pre><code>$ ldapsearch -D "cn=Manager,dc=tenneshop,dc=com" -W '(objectclass=*)'
Enter LDAP Password:
# extended LDIF
#
# LDAPv3
# base &lt;dc=tenneshop,dc=com&gt; (default) with scope subtree
# filter: (objectclass=*)
# requesting: ALL
#

# tenneshop.com
dn: dc=tenneshop,dc=com
objectClass: dcObject
objectClass: organization
dc: tenneshop
o: Tenneshop
description: Tenneshop directory

# Manager, tenneshop.com
dn: cn=Manager,dc=tenneshop,dc=com
objectClass: organizationalRole
cn: Manager
description: Directory Manager

# search result
search: 2
result: 0 Success

# numResponses: 3
# numEntries: 2
</code></pre>

<h3>遇到的问题</h3>

<h4>1.additional info: objectClass: value #0 invalid per syntax</h4>

<pre><code>$ ldapadd -x -D 'cn=Manager,dc=tenneshop,dc=com' -W -f /etc/openldap/root.ldif
Enter LDAP Password:
ldapadd: attributeDescription "dn": (possible missing newline after line 8, entry "dc=tenneshop,dc=com"?)
adding new entry "dc=tenneshop,dc=com"
ldap_add: Invalid syntax (21)
    additional info: objectClass: value #0 invalid per syntax
</code></pre>

<p>A:导入的数据每行结尾含有空格所致，去掉数据每行结尾的空格。</p>

<p>Reference:<a href="http://www.what21.com/sys/ldap_3_1483460096406.html">OpenLDAP报错: additional info: objectClass: value #0 invalid per syntax</a></p>

<h2>Reference</h2>

<ul>
<li>OpenLDAP Software 2.4 Administrator&rsquo;s Guide</li>
<li><a href="https://wiki.archlinux.org/index.php/OpenLDAP_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87">openLDAP</a>#.E5.88.9B.E5.BB.BA.E5.88.9D.E5.A7.8B.E9.A1.B9)</li>
<li><a href="https://wiki.gentoo.org/wiki/Centralized_authentication_using_OpenLDAP/zh#Configuring_the_OpenLDAP_client_tools">使用OpenLDAP实现集中式认证</a></li>
<li><a href="https://techhelplist.com/tech-tutorials/34-openldap/48-user-management-in-openldap">User Management in OpenLDAP</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web 开发问题汇总(三)]]></title>
    <link href="http://DamianSheldon.github.io/blog/web-development-notes-part-three.html"/>
    <updated>2018-04-13T11:07:25+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/web-development-notes-part-three</id>
    <content type="html"><![CDATA[<h3>1.How to send email in java?</h3>

<p>A:</p>

<pre><code class="java">import java.util.*;
import javax.mail.*;
import javax.mail.internet.*;
import javax.activation.*;

public class SendEmail {

   public static void main(String [] args) {    
      // Recipient's email ID needs to be mentioned.
      String to = "abcd@gmail.com";

      // Sender's email ID needs to be mentioned
      String from = "web@gmail.com";

      // Assuming you are sending email from localhost
      String host = "localhost";

      // Get system properties
      Properties properties = System.getProperties();

      // Setup mail server
      properties.setProperty("mail.smtp.host", host);

      // Get the default Session object.
      Session session = Session.getDefaultInstance(properties);

      try {
         // Create a default MimeMessage object.
         MimeMessage message = new MimeMessage(session);

         // Set From: header field of the header.
         message.setFrom(new InternetAddress(from));

         // Set To: header field of the header.
         message.addRecipient(Message.RecipientType.TO, new InternetAddress(to));

         // Set Subject: header field
         message.setSubject("This is the Subject Line!");

         // Now set the actual message
         message.setText("This is actual message");

         // Send message
         Transport.send(message);
         System.out.println("Sent message successfully....");
      } catch (MessagingException mex) {
         mex.printStackTrace();
      }
   }
}
</code></pre>

<p>Reference:<a href="http://www.tutorialspoint.com/java/java_sending_email.htm">Java - Sending Email</a><br/>
<a href="https://stackoverflow.com/questions/3649014/send-email-using-java">Send email using java</a></p>

<!--more-->


<h3>2.Eclipse error: &lsquo;Failed to create the Java Virtual Machine&rsquo;</h3>

<p>A:安装了 Eclipse 提示的升级后再重新打开时，出现上面的报错。Google 一圈后显示可能是 eclipse.ini 的锅，正好我安装了 cpp, java 和 jee 三个版本，尝试打开 java 版本的，正常打开，于是对比它们的 eclipse.ini 文件:</p>

<pre><code>$ cp ~/eclipse/jee-oxygen/Eclipse.app/Contents/Eclipse/eclipse.ini  ~/eclipse-workspace/jee-eclipse.ini
cp ~/eclipse/java-oxygen/Eclipse.app/Contents/Eclipse/eclipse.ini ~/eclipse-workspace/java-eclipse.ini

$ diff eclipse-workspace/jee-eclipse.ini eclipse-workspace/java-eclipse.ini
3,4d2
&lt; --launcher.library
&lt; /Users/dongmeiliang/.p2/pool/plugins/org.eclipse.equinox.launcher.cocoa.macosx.x86_64_1.1.551.v20171108-1834
6a5,6
&gt; --launcher.library
&gt; /Users/dongmeiliang/.p2/pool/plugins/org.eclipse.equinox.launcher.cocoa.macosx.x86_64_1.1.551.v20171108-1834
8c8
&lt; org.eclipse.epp.package.jee.product
---
&gt; org.eclipse.epp.package.java.product
18,23d17
&lt; -javaagent:/Users/dongmeiliang/.p2/pool/plugins/com.zeroturnaround.eclipse.optimizer.plugin_1.0.11/agent/eclipse-optimizer-agent.jar
&lt; -server
&lt; -XX:PermSize=256m
&lt; -XX:MaxPermSize=256m
&lt; -XX:+UseParallelGC
&lt; -Xverify:none
32c26
&lt; -Xms512m
---
&gt; -Xms256m
</code></pre>

<p>总共有五处不同，细看之后发现只有两处可能会产生影响，先尝试将 <code>-Xms512m</code> 改成 <code>-Xms256m</code>，问题仍然存在，将文件恢复原样，再尝试将</p>

<pre><code>&lt; -javaagent:/Users/dongmeiliang/.p2/pool/plugins/com.zeroturnaround.eclipse.optimizer.plugin_1.0.11/agent/eclipse-optimizer-agent.jar
&lt; -server
&lt; -XX:PermSize=256m
&lt; -XX:MaxPermSize=256m
&lt; -XX:+UseParallelGC
&lt; -Xverify:none
</code></pre>

<p>删除，问题顺利解决。</p>

<p>Reference:<a href="https://stackoverflow.com/questions/7302604/eclipse-error-failed-to-create-the-java-virtual-machine">Eclipse error: &lsquo;Failed to create the Java Virtual Machine&rsquo;</a></p>

<h3>3.<code>Warning: mysqli::__construct(): (HY000/2002): No such file or directory in /code/index.php on line 8 Connection failed: No such file or directory</code></h3>

<p>A:问题出现的原因：
当主机填写为localhost时MySQL会采用 unix domain socket连接，当主机填写为127.0.0.1时MySQL会采用TCP/IP的方式连接。使用Unix socket的连接比TCP/IP的连接更加快速与安全。这是MySQL连接的特性，可以参考官方文档的说明<a href="https://dev.mysql.com/doc/refman/5.6/en/connecting.html#id471316">4.2.2. Connecting to the MySQL Server</a>:</p>

<blockquote><p>On Unix, MySQL programs treat the host name localhost specially, in a way that is
likely different from what you expect compared to other network-based programs.
For connections to localhost, MySQL programs attempt to connect to the local server
by using a Unix socket file. This occurs even if a &ndash;port or -P option is given to
specify a port number. To ensure that the client makes a TCP/IP connection to the
local server, use &ndash;host or -h to specify a host name value of 127.0.0.1, or the IP
address or name of the local server. You can also specify the connection protocol
explicitly, even for localhost, by using the &ndash;protocol=TCP option.</p></blockquote>

<p>这个问题有以下几种解决方法：</p>

<ol>
<li>使用TCP/IP代替Unix socket。即在连接的时候将localhost换成127.0.0.1。</li>
<li>修改MySQL的配置文件my.cnf，指定mysql.socket的位置： /var/lib/mysql/mysql.sock (你的mysql.socket路径)。   </li>
<li>直接在php建立连接的时候指定my.socket的位置（官方文档：mysqli_connect）。比如： <code>$db = new MySQLi('localhost', 'root', 'root', 'my_db', '3306', '/var/run/mysqld/mysqld.sock')</code></li>
</ol>


<p>Reference:<a href="https://segmentfault.com/q/1010000000328531">mysqli不能使用localhost，请问这是怎么回事？</a></p>

<h3>4.超链接元素的 onclick 方法直接使用表单元素的名字调用其 submit 方法。</h3>

<p>A:</p>

<pre><code class="html">&lt;form name="bm_form" action="/delete_bms" method="POST"&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;a href="https://www.google.com"&gt;https://www.google.com&lt;/a&gt;&lt;/td&gt;
        &lt;td&gt;&lt;input type="checkbox" name="del_me" value="https://www.google.com" /&gt;&lt;/td&gt;
    &lt;/tr&gt;

    &lt;tr&gt;
        &lt;td&gt;&lt;a href="https://www.twitter.com"&gt;https://www.twitter.com&lt;/a&gt;&lt;/td&gt;
        &lt;td&gt;&lt;input type="checkbox" name="del_me" value="https://www.twitter.com" /&gt;&lt;/td&gt;
    &lt;/tr&gt;
&lt;/form&gt;

&lt;a href="#" onclick="bm_form.submit();"&gt;Delete BM&lt;/a&gt;
</code></pre>

<p>这里展示了可以直接使用表单元素的名字直接来提交的技巧。</p>

<h3>5.Ionic - Cannot find module “.”</h3>

<p>A:Just remove all imports that have /umd at the final.
In my case, I changed: 
<code>import { IonicPageModule } from 'ionic-angular/umd';</code>
To: 
<code>import { IonicPageModule } from 'ionic-angular';</code></p>

<p>Reference:<a href="https://stackoverflow.com/questions/43236971/ionic-2-runtime-error-cannot-find-module">Ionic 2 - Runtime error Cannot find module “.”</a></p>

<h3>6.Google maps report google is not define in ionic app.</h3>

<p>A:</p>

<ol>
<li>go to your project and do “ionic plugin add cordova-plugin-whitelist”</li>
<li>add CSP meta</li>
</ol>


<pre><code>&lt;meta http-equiv="Content-Security-Policy" content="script-src 'self' https://maps.googleapis.com/ https://maps.gstatic.com/ https://mts0.googleapis.com/ 'unsafe-inline' 'unsafe-eval'"&gt;
</code></pre>

<p>Live reload unfortunately seems not work, I get this error:</p>

<pre><code>Refused to load the script 'http://localhost:35729/livereload.js?snipver=1' because it violates the following Content Security Policy directive: "script-src 'self' https://maps.googleapis.com/ https://maps.gstatic.com/ https://mts0.googleapis.com/ 'unsafe-inline' 'unsafe-eval'".
</code></pre>

<p>After some google, update CSP meta works, new CSP meta as follow:</p>

<pre><code>  &lt;meta http-equiv="Content-Security-Policy" content="script-src localhost:35729 'self' https://maps.googleapis.com/ https://maps.gstatic.com/ https://mts0.googleapis.com/ 'unsafe-inline' 'unsafe-eval'"&gt;
</code></pre>

<p>Reference:<a href="https://forum.ionicframework.com/t/ionic-google-maps-referenceerror-google-is-not-defined/22550">Ionic + Google Maps: ReferenceError: google is not defined</a><br/>
<a href="https://forum.ionicframework.com/t/solution-for-livereload-problems-with-new-csp-rules/25449">Solution for livereload problems with new CSP rules</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[记一次换新 iPhone]]></title>
    <link href="http://DamianSheldon.github.io/blog/how-to-migrate-contents-on-old-iphone-to-new-iphone.html"/>
    <updated>2018-03-17T10:20:21+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/how-to-migrate-contents-on-old-iphone-to-new-iphone</id>
    <content type="html"><![CDATA[<p>说来惭愧，一直还是在用公司配的开发机 5S, 没用上最新手机的主要原因可以归结为穷 >&lt;。但最近 5S 的存储不够用了，再加上心仪的 8 降价了，一冲动就入了一个，嗯，这几个月做好了吃土的准备了。</p>

<p>iPhone 可以将旧手机数据迁移到新手机，这是我喜欢它的一个地方。苹果这篇<a href="https://support.apple.com/zh-cn/HT201269">将内容从旧 iOS 设备传输到新 iPhone、iPad 或 iPod touch</a>详细介绍几种可行方法，我们可以从中选择一种方法。其实我觉得苹果应该出篇换机指南的，上面这篇文章的题目不是很容易让人把它与换机联系起来，也不是很容易记，这是我想记这么一笔的原因之一，N 年之后我再换 iPhone 的时候也可以按这篇文章的思想来指导自己迁移数据。</p>

<p>这里我选择使用 iTunes 备份恢复，快速开始功能好像不是很灵光，也可能是我不会用，而 iCloud 备份是通过网络，网速会影响备份和恢复，加上最近 iPhone 的 bug 贼多，这让我不是很放心。在此之前有使用过 iTunes 备份恢复，想着即使恢复过程出了问题备份还在，所以最终选择 iTunes。</p>

<p>备份过程很顺利，恢复过程就曲折了，iTunes 提示 backup is corrupt or incompatible，墨菲定理生效了，另一方面也佐证了选择 iTunes 是正确的选择，苹果什么时候能把这软件质量抓一抓，别只顾着赚钱啊。搜索找到了苹果对这个问题的解决办法：</p>

<!--more-->


<blockquote><p>If an alert says that your backup is corrupt or incompatible</p>

<p>If iTunes can&rsquo;t restore from a backup because the backup is corrupt or incompatible, make sure that iTunes is updated. If you see an error that says your iOS software is too old, find out how to update your device to restore the backup. If you still can&rsquo;t restore the backup, you might not be able to use that backup. Try to use an alternate backup or an iCloud backup, or Contact Apple Support for more help.</p></blockquote>

<p>检查 iTunes 的版本，显示是最新的，这是什么幺蛾子,难道就这么放弃，不存在的，我有那么容易放弃吗，开玩笑。既然有所谓的版本的问题，我怀疑是 8 的版本和 5S 的版本不一致，于是两手准备：一方面对 5S 做一次全量 iCloud 备份，如果稍后 iOS 版本都一致了 iTunes 备份还不行就使用 iCloud 备份恢复；另一方面把 8 和 5S 升级到最新的 iOS，8 用 USB 接上 iTunes 是可以升级的。8 和 5S 都升级成最新版本的系统后，又对 5S 做了一次 iTunes 备份，之后 8 用这个备份顺利恢复了。</p>

<p>回顾整个恢复过程感觉还挺曲折，真心希望苹果抓抓软件质量，别让 iOS 成了 bugOS。过程中 8 和 5S 只是小版本不一致却导致恢复不成功，还挺伤害用户体验的，毕竟好几年才使用一次的杀手锏功能之一，当我要使用的时候你却告诉我: &ldquo;对不起，这次用不了!"我用新 iPhone 的喜悦感都被抛到九霄云外了。</p>

<h3>Reference</h3>

<ul>
<li><a href="https://support.apple.com/zh-cn/HT201269">将内容从旧 iOS 设备传输到新 iPhone、iPad 或 iPod touch</a></li>
<li><a href="https://sspai.com/post/41612">从数据迁移到处理旧 iPhone，这份换机指南都帮你想好了</a></li>
<li><a href="https://support.apple.com/en-us/HT203271">If your iTunes backup couldn‘t be completed or you can‘t restore from a backup</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[多线程的 Core Data]]></title>
    <link href="http://DamianSheldon.github.io/blog/concurrency-with-core-data.html"/>
    <updated>2018-02-23T16:00:35+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/concurrency-with-core-data</id>
    <content type="html"><![CDATA[<p>平常在项目中没有使用过 Core Data, 因为我觉得它的学习曲线还挺陡峭，整个框架给人的感觉很复杂和笨重，因此一直没有使用它。但是看到喵神这份<a href="https://onevcat.com/2013/04/ios-interview/">上级向的十个 iOS 开发面试题</a>中和这份<a href="http://studentdeng.github.io/blog/2014/02/11/baidu-interview/">百度面试</a>题中都有涉及到 Core Data 的内容，我想还是有必要好好研究一下它，毕竟它是 Apple 官方的持久化方案，我们可以取其精华，弃其糟粕，另一方面未来我们也可能因为各种原因接手或参与使用 Core Data 的项目。</p>

<p>这篇文章主要想探讨上面提到的面试题中的两个关于 Core Data 的问题:</p>

<ol>
<li>你实现过多线程的Core Data么？NSPersistentStoreCoordinator，NSManagedObjectContext和NSManagedObject中的哪些需要在线程中创建或者传递？你是用什么样的策略来实现的？</li>
<li>Core Data：中多线程中处理大量数据同步时的操作。</li>
</ol>


<p>在回答这两个问题之前，我们先看 Apple 是怎么告诉我们使用多线程的 Core Data 的，在最新的(2017-03-27) Core Data Programming Guide 中有一节 Concurrency with Core Data，它没有直接说如何使用多线程，只是说了 managed object context 在多线程中的两种使用模式:</p>

<blockquote><p>In Core Data, the managed object context can be used with two concurrency patterns, defined by NSMainQueueConcurrencyType and NSPrivateQueueConcurrencyType.</p>

<p>NSMainQueueConcurrencyType is specifically for use with your application interface and can only be used on the main queue of an application.</p>

<p>The NSPrivateQueueConcurrencyType configuration creates its own queue upon initialization and can be used only on that queue. Because the queue is private and internal to the NSManagedObjectContext instance, it can only be accessed through the performBlock: and the performBlockAndWait: methods.</p></blockquote>

<!--more-->


<p>对于多线程中对象的传递则有这么一段描述:</p>

<blockquote><p>NSManagedObject instances are not intended to be passed between queues. Doing so can result in corruption of the data and termination of the application. When it is necessary to hand off a managed object reference from one queue to another, it must be done through NSManagedObjectID instances.</p>

<p>You retrieve the managed object ID of a managed object by calling the objectID method on the NSManagedObject instance.</p></blockquote>

<p>从这里我们知道，NSManagedObject 是不能在线程中传递的，必须重新创建。但是对于 NSPersistentStoreCoordinator 和 NSManagedObjectContext 是需要创建还是可以传递就不是很清楚。</p>

<p>于是我又通读了全篇，说实话我看完以后还是没搞明白该如何使用多线程的 Core Data，于是我又找了 Apple 提供的多线程的 Core Data 示例代码 <a href="https://developer.apple.com/library/content/samplecode/ThreadedCoreData/Introduction/Intro.html#//apple_ref/doc/uid/DTS40010723">ThreadedCoreData</a>，它展示了一种使用多线程的 Core Data 的方法，但是并不能解答如何使用多线程的 Core Data。因为可能还有很多其他的方法，我们要溯本求源，找到问题的关键，问题才能迎刃而解。 于是我又到 <a href="https://objccn.io">objc 中国</a>上查找，里面专门有一个 Core Data 的专题，先看了一遍<a href="https://objccn.io/issue-4-5/">导入大数据集</a>，它提供了一些解答问题2的素材，我们稍候将它总结为答案，同时它还提供了新的线索 &ndash; <a href="http://objccn.io/issue-2-2/">在后台使用 Core Data</a>，于是我又看了这篇文章。</p>

<p>这篇文章提到在使用多线程的 Core Data 时，强烈建议先通读 Apple 的官方文档 Concurrency with Core Data，这也是符合学习 iOS 开发新知识的路线的，毕竟所有的知识都源于 Apple，这种方法推荐给大家，而我一开始也是这么做的，这里的问题是 Apple 的文档一直在更新，有的内容在新版本文档中被删除了，那么我们有办法找到旧版本的文档吗？</p>

<p>有的，这里介绍一种方法，虽然 Apple 不提供旧版本的文档，但是有个网址&ndash;<a href="https://archive.org/web/">Internet Archive</a>它会定期备份整个互联网上重要的网址，所以我们可以结合文档的修改历史在这里找到旧版本的文档，我们看到在后台使用 Core Data 翻译于 2014/03/22，我们不妨先试下 2014-03-10 这个版本的 Core Data Programming Guide.</p>

<p>这个版本是这么介绍如何使用多线程的 Core Data 的:</p>

<blockquote><p>The pattern recommended for concurrent programming with Core Data is thread confinement : each thread must have its own entirely private managed object context.</p>

<p>There are two possible ways to adopt the pattern:</p>

<ol>
<li>Create a separate managed object context for each thread and share a single persistent store coordinator.</li>
</ol>


<p>This is the typically-recommended approach.</p>

<ol>
<li>Create a separate managed object context and persistent store coordinator for each thread.</li>
</ol>


<p>This approach provides for greater concurrency at the expense of greater complexity (particularly if you need to communicate changes between different contexts) and increased memory usage.</p></blockquote>

<p>个人认为这个版本的介绍更清晰明了，也更容易得出问题的答案：</p>

<p>NSManagedObjectContext 和 NSManagedObject 是需要在线程中创建的，而 NSPersistentStoreCoordinator 是推荐传递的。策略则是创建两个线程，不妨分别称它们为工作线程和后台线程，工作线程为主，后台线程为辅，它们分别创建自己独立的 managed object context，然后共享同一个 persistent store coordinator,工作线程关注 NSManagedObjectContextDidSaveNotification 通知，当后台线程保存更改时，它便收到通知然后合并更改。代码示例如下：</p>

<pre><code class="objc">// Worker Thread
_mainManagedObjectContext = [[NSManagedObjectContext alloc] initWithConcurrencyType:NSMainQueueConcurrencyType];
 // observe the APLEarthQuakeSource save operation with its managed object context
 [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(mergeChanges:)
                                                 name:NSManagedObjectContextDidSaveNotification
                                               object:nil];

// merge changes to main context,fetchedRequestController will automatically monitor the changes and update tableview.
- (void)updateMainContext:(NSNotification *)notification {

    assert([NSThread isMainThread]);
    [self.managedObjectContext mergeChangesFromContextDidSaveNotification:notification];
}

// this is called via observing "NSManagedObjectContextDidSaveNotification" from our APLEarthQuakeSource
- (void)mergeChanges:(NSNotification *)notification {
    NSLog(@"merge changes be invoked on thread:%@", [NSThread currentThread]);

    if (notification.object != self.managedObjectContext) {
        [self performSelectorOnMainThread:@selector(updateMainContext:) withObject:notification waitUntilDone:NO];
    }
}

// Background Thread
NSManagedObjectContext *private = [[NSManagedObjectContext alloc] initWithConcurrencyType:NSPrivateQueueConcurrencyType];

[private performBlock:^{ 
    // Do some work
    NSError *error = nil;

    if (![private save:&amp;error]) {
        // Handle error
    }
}]
</code></pre>

<p>这里还补充说明下 managed object context 的并发类型，我们可以用 NSMainQueueConcurrencyType 和 NSPrivateQueueConcurrencyType 来指定它的类型，按照 Apple API reference 中的说明:</p>

<blockquote><p>You use contexts using the queue-based concurrency types in conjunction with performBlock: and performBlockAndWait:. You group “standard” messages to send to the context within a block to pass to one of these methods. There are two exceptions:</p>

<p>  • Setter methods on queue-based managed object contexts are thread-safe. You can invoke these methods directly on any thread.</p>

<p>  • If your code is executing on the main thread, you can invoke methods on the main queue style contexts directly instead of using the block based API.</p></blockquote>

<p>我们可以知道 context 是结合 performBlock: 和 performBlockAndWait: 来使用并发类型的，也就是说 NSMainQueueConcurrencyType 时这两个方法是在主队列上执行 block, 而 NSPrivateQueueConcurrencyType 则是在私有队列上执行。从这里我们推出工作线程的 context 使用 NSMainQueueConcurrencyType 而后台线程的 context 使用 NSPrivateQueueConcurrencyType 应该是比较好的实践，因为我们使用多线程，必然是想获得多线程的好处，如果还指定 context 为 NSMainQueueConcurrencyType，则工作还是在主线程上，并没有被移交到子线程，实际上仍然是单线程。</p>

<p>接下来我们来看第二个问题：</p>

<ul>
<li>Core Data：中多线程中处理大量数据同步时的操作。</li>
</ul>


<p>要想回答这个问题，我们得知道处理大量数据同步时会遇到什么问题，这样才能有的放矢。上面提到<a href="https://objccn.io/issue-4-5/">导入大数据集</a> 提供了回答此问题的素材，再结合<a href="http://objccn.io/issue-2-2/">在后台使用 Core Data</a>，我觉得可以得到问题的一个答案：</p>

<p>如果大量数据的同步不需要反映到界面上，那么我们可以创建一个线程并为它配置独立的 Core Data 栈，然后批量保存；如果需要反映到界面上，则要合并修改通知再更新界面，防止界面陷入卡顿。</p>

<p>正如喵神所说面试中的技术问题环节不仅是企业对应聘者技能和积累的考察，也是一个开发者自我检验的好机会。而且面试中的技术问题通常是关于某知识点的难点，即使是我们经常使用的知识，如果我们没有仔细深入地思考可能也答不上来，所以我觉得利用面试题来提高自己的技术水平和加深对某知识的掌握是不错的方法。</p>

<h3>Reference</h3>

<ul>
<li>Core Data Programming Guide</li>
<li><a href="https://objccn.io/issue-4-5/">导入大数据集</a></li>
<li><a href="https://objccn.io/issue-2-2/">常见的后台实践</a></li>
<li><a href="https://blog.codecentric.de/en/2014/11/concurrency-coredata/">Concurrency with CoreData</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac 使用笔记(二)]]></title>
    <link href="http://DamianSheldon.github.io/blog/problems-when-use-mac-part-two.html"/>
    <updated>2018-01-23T11:59:31+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/problems-when-use-mac-part-two</id>
    <content type="html"><![CDATA[<h2>1. iPhone每次连接Mac都会弹出iPhoto</h2>

<p>解决办法：</p>

<ol>
<li>Plug in your iPad/iPhone</li>
<li>Open Image Capture</li>
<li>Select your device (&ldquo;devMikePad&rdquo;)</li>
<li>Press the triangle in square symbol in the lower left corner.</li>
<li>Select &ldquo;No application&rdquo; in the menu.</li>
</ol>


<p>iPhoto:
Preferences > General > &ldquo;Connecting Camera Opens &hellip;&rdquo;
set it to &ldquo;No Application&rdquo;</p>

<h2>2. Add environment variable</h2>

<pre><code class="bash">// ~/.bash_profile
export var=value
</code></pre>

<h2>3.SSH ask passpharse every time I use SSH key.</h2>

<p>A:</p>

<pre><code class="bash">$echo -e "AddKeysToAgent yes\nUseKeychain yes" &gt;&gt; ~/.ssh/config
</code></pre>

<h2>4.Fix the Enable and Disable install software from anywhere in macOS Sierra</h2>

<p>A:</p>

<pre><code class="bash">// Enable
$ sudo spctl --master-disable

// Disable
$sudo spctl --master-enable
</code></pre>

<p>Reference:<a href="https://www.osxio.com/fix-enable-disable-install-software-anywhere-macos-sierra-problem/">Fix the Enable and Disable install software from anywhere in macOS Sierra problem</a></p>

<h2>5.Mac 上批量替换文件中的字符串</h2>

<p>A:</p>

<pre><code class="bash">$ grep -rl discription source/_posts | xargs sed -i ''  "s/discription/description/g"
</code></pre>

<p>Reference:<a href="http://blog.csdn.net/werm520/article/details/49334513">linux 批量替换文件内容及查找某目录下所有包含某字符串的文件（批量修改文件内容）</a><br/>
<a href="http://xiaorui.cc/2016/01/14/%E8%AE%BAmac%E4%BD%BF%E7%94%A8sed%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/">论mac使用sed修改文件的正确姿势</a></p>

<h2>6.如何查看占用指定端口的进程？</h2>

<p>A:</p>

<pre><code class="bash">$ lsof -i :[port]
</code></pre>

<p>结果输出中有进程的 pid, 之后我们可以用这个 pid 来杀掉该进程：</p>

<pre><code class="bash">$ kill -9 [pid]
</code></pre>

<p>这些进程很可能是系统启动时就启动了，可以通过：</p>

<pre><code class="bash">$ launchctl list | grep [pid]
</code></pre>

<p>来确认。如果找到有，而我们又不想它自启动了，可以在以下目录中找到配置文件：</p>

<pre><code>~/Library/LaunchAgents         Per-user agents provided by the user.
/Library/LaunchAgents          Per-user agents provided by the administrator.
/Library/LaunchDaemons         System wide daemons provided by the administrator.
</code></pre>

<p>找到之后，可以用命令：</p>

<pre><code class="bash">$ launchctl unload -w paths
// eg:
$ launchctl unload -w ~/Library/LaunchAgents/homebrew.mxcl.jenkins.plist
</code></pre>

<!--more-->


<h2>7.如何使用命令行安装 dmg？</h2>

<p>A:</p>

<p>First, mount the dmg image : <code>sudo hdiutil attach &lt;image&gt;.dmg</code></p>

<p>The image will be mounted to /Volumes/<image>. Then we can install with: <code>sudo installer -package /Volumes/&lt;image&gt;/&lt;image&gt;.pkg -target /</code></p>

<p>Finally unmount the image: <code>sudo hdiutil detach /Volumes/&lt;image&gt;</code>.</p>

<p>这个需求是源于最近一次安装 mysql 时，图形界面安装无响应，之后尝试命令行成功安装，还蛮奇怪。</p>

<p>Reference:<a href="https://apple.stackexchange.com/questions/73926/is-there-a-command-to-install-a-dmg">Is there a command to install a dmg</a></p>
]]></content>
  </entry>
  
</feed>
