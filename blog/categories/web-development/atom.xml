<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: web development | Hello World]]></title>
  <link href="http://DamianSheldon.github.io/blog/categories/web-development/atom.xml" rel="self"/>
  <link href="http://DamianSheldon.github.io/"/>
  <updated>2020-11-10T10:45:47+08:00</updated>
  <id>http://DamianSheldon.github.io/</id>
  <author>
    <name><![CDATA[Sheldon]]></name>
    <email><![CDATA[dongmeilianghy@sina.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[如何发布自己的 artifacts 到 maven 中央仓库]]></title>
    <link href="http://DamianSheldon.github.io/blog/how-to-publish-your-artifacts-to-maven-central.html"/>
    <updated>2020-10-28T09:16:37+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/how-to-publish-your-artifacts-to-maven-central</id>
    <content type="html"><![CDATA[<p>当我们越来越熟悉 Java 开发，可能也想发布自己的 artifacts 到 maven 中央仓库，那么该如何做呢？</p>

<blockquote><p>The easiest way to upload another project is to use the <a href="http://central.sonatype.org/pages/ossrh-guide.html">Open Source Software Repository Hosting (OSSRH)</a>, which is an approved repository provided by Sonatype for any OSS Project that want to get their artifacts into the Central Repository.</p></blockquote>

<p>从 maven 的官方文档可知是使用 <a href="http://central.sonatype.org/pages/ossrh-guide.html">Open Source Software Repository Hosting (OSSRH)</a>, 于是我们可以参考她的指南。</p>

<p>这份指南勾勒了发布工作的主要流程，分别是：</p>

<ol>
<li>Create a ticket with Sonatype</li>
<li>Review Requirements</li>
<li>Deployment</li>
<li>Releasing to Central</li>
</ol>


<h3>创建 Sonatype 工单</h3>

<p>Sonatype 使用 JIRA 管理请求，所以我们要创建 JIRA 帐号, 然后创建一个新工程工单。</p>

<ol>
<li><a href="https://issues.sonatype.org/secure/Signup!default.jspa">Create your JIRA account</a></li>
<li><a href="https://issues.sonatype.org/secure/CreateIssue.jspa?issuetype=21&amp;pid=10134">Create a New Project ticket</a></li>
</ol>


<h3>复核要求</h3>

<p>为了确保中央仓库库中可用组件的最低质量水平，部署组件必须满足一些要求。这使组件的用户能够从中央仓库中提供的元数据中找到有关组件的所有相关细节。</p>

<p>这些要求是：</p>

<ol>
<li>Supply Javadoc and Sources</li>
<li>Sign Files with GPG/PGP</li>
<li>Sufficient Metadata</li>
</ol>


<!--more-->


<h4>Supply Javadoc and Sources</h4>

<p>我们可以集成 maven 插件来提供 Javadoc 和源文件。</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;plugin>
</span><span class='line'>    &lt;groupId>org.apache.maven.plugins&lt;/groupId>
</span><span class='line'>    &lt;artifactId>maven-source-plugin&lt;/artifactId>
</span><span class='line'>    &lt;version>2.2.1&lt;/version>
</span><span class='line'>    &lt;executions>
</span><span class='line'>        &lt;execution>
</span><span class='line'>            &lt;id>attach-sources&lt;/id>
</span><span class='line'>            &lt;goals>
</span><span class='line'>                &lt;goal>jar-no-fork&lt;/goal>
</span><span class='line'>            &lt;/goals>
</span><span class='line'>        &lt;/execution>
</span><span class='line'>    &lt;/executions>
</span><span class='line'>&lt;/plugin>
</span><span class='line'>&lt;plugin>
</span><span class='line'>    &lt;groupId>org.apache.maven.plugins&lt;/groupId>
</span><span class='line'>    &lt;artifactId>maven-javadoc-plugin&lt;/artifactId>
</span><span class='line'>    &lt;version>2.9.1&lt;/version>
</span><span class='line'>    &lt;executions>
</span><span class='line'>        &lt;execution>
</span><span class='line'>            &lt;id>attach-javadocs&lt;/id>
</span><span class='line'>            &lt;goals>
</span><span class='line'>                &lt;goal>jar&lt;/goal>
</span><span class='line'>            &lt;/goals>
</span><span class='line'>        &lt;/execution>
</span><span class='line'>    &lt;/executions>
</span><span class='line'>&lt;/plugin></span></code></pre></td></tr></table></div></figure></p>

<h4>Sign Files with GPG/PGP</h4>

<p>我们需要用 GPG/PGP 对文件签名，以 macOS 为例：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>1. Install GPG&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>brew install gpg&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>2. Generate the key pair&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>gpg &ndash;full-gen-key&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h3>3.Publish the GPG key pair and distribute your key to GPG servers&lt;/h3>
</span><span class='line'>
</span><span class='line'>&lt;p>gpg &ndash;keyserver hkps.pool.sks-keyservers.net  &ndash;send-keys your_key_id&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<p>生成 GPG 公私钥对并发布到 GPG 服务器后，我们还需要将 GPG 提供给 maven, 这是通过 maven settings。</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>~/.m2/settings.xml&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>&lt;settings>
</span><span class='line'>  &lt;profiles>
</span><span class='line'>    &lt;profile>
</span><span class='line'>      &lt;id>ossrh&lt;/id>
</span><span class='line'>      &lt;activation>
</span><span class='line'>        &lt;activeByDefault>true&lt;/activeByDefault>
</span><span class='line'>      &lt;/activation>
</span><span class='line'>      &lt;properties>
</span><span class='line'>        &lt;gpg.passphrase>the_pass_phrase&lt;/gpg.passphrase>
</span><span class='line'>      &lt;/properties>
</span><span class='line'>    &lt;/profile>
</span><span class='line'>  &lt;/profiles>
</span><span class='line'>&lt;/settings></span></code></pre></td></tr></table></div></figure></p>

<p>macOS 上我还遇到了 gpg: signing failed: Inappropriate ioctl for device 这个错误，通过在 <code>~/.bash_profile</code> 中加入如下配置解决了:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>GPG_TTY=$(tty)
</span><span class='line'>export GPG_TTY</span></code></pre></td></tr></table></div></figure></p>

<h4>Sufficient Metadata</h4>

<p>元数据信息要包括：</p>

<ul>
<li>Correct Coordinates</li>
<li>Project Name, Description and URL</li>
<li>License Information</li>
<li>Developer Information</li>
<li>SCM Information</li>
</ul>


<p>对于 Correct Coordinates， 我这里是使用 github 托管代码，于是我们可以按照 maven 官方文档的建议:</p>

<blockquote><p>My project is hosted at a project hosting service like SourceForge or Github, what should I use as groupId?
If your project name is foo at SourceForge, you can use net.sf.foo. If your username is bar on Github, you can use com.github.bar. You can also use another reversed domain name you control. The group ID does not have to reflect the project host.</p></blockquote>

<h3>Deployment</h3>

<p>至此，准备工作就完成了，接下来可以进入部署环节了。先还是要做些相关配置，主要是：</p>

<ul>
<li>Distribution Management and Authentication</li>
<li>Using a Profile</li>
</ul>


<h4>Distribution Management and Authentication</h4>

<p>为了配置 Maven，使其能够通过 Nexus Staging Maven 插件部署到 OSSRH 的 Nexus Repository Manager上，你必须进行如下配置：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;distributionManagement>
</span><span class='line'>  &lt;snapshotRepository>
</span><span class='line'>    &lt;id>ossrh&lt;/id>
</span><span class='line'>    &lt;url>&lt;a href="https://oss.sonatype.org/content/repositories/snapshots">https://oss.sonatype.org/content/repositories/snapshots&lt;/a>&lt;/url>
</span><span class='line'>  &lt;/snapshotRepository>
</span><span class='line'>&lt;/distributionManagement>
</span><span class='line'>&lt;build>
</span><span class='line'>  &lt;plugins>
</span><span class='line'>    &lt;plugin>
</span><span class='line'>      &lt;groupId>org.sonatype.plugins&lt;/groupId>
</span><span class='line'>      &lt;artifactId>nexus-staging-maven-plugin&lt;/artifactId>
</span><span class='line'>      &lt;version>1.6.7&lt;/version>
</span><span class='line'>      &lt;extensions>true&lt;/extensions>
</span><span class='line'>      &lt;configuration>
</span><span class='line'>        &lt;serverId>ossrh&lt;/serverId>
</span><span class='line'>        &lt;nexusUrl>&lt;a href="https://oss.sonatype.org/">https://oss.sonatype.org/&lt;/a>&lt;/nexusUrl>
</span><span class='line'>        &lt;autoReleaseAfterClose>true&lt;/autoReleaseAfterClose>
</span><span class='line'>      &lt;/configuration>
</span><span class='line'>    &lt;/plugin>
</span><span class='line'>    &hellip;
</span><span class='line'>  &lt;/plugins>
</span><span class='line'>&lt;/build></span></code></pre></td></tr></table></div></figure></p>

<p>另外，如果你使用 Maven 部署插件，这是默认行为，你需要添加一个完整的distributionManagement部分。</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;distributionManagement>
</span><span class='line'>  &lt;snapshotRepository>
</span><span class='line'>    &lt;id>ossrh&lt;/id>
</span><span class='line'>    &lt;url>&lt;a href="https://oss.sonatype.org/content/repositories/snapshots">https://oss.sonatype.org/content/repositories/snapshots&lt;/a>&lt;/url>
</span><span class='line'>  &lt;/snapshotRepository>
</span><span class='line'>  &lt;repository>
</span><span class='line'>    &lt;id>ossrh&lt;/id>
</span><span class='line'>    &lt;url>&lt;a href="https://oss.sonatype.org/service/local/staging/deploy/maven2/">https://oss.sonatype.org/service/local/staging/deploy/maven2/&lt;/a>&lt;/url>
</span><span class='line'>  &lt;/repository>
</span><span class='line'>&lt;/distributionManagement></span></code></pre></td></tr></table></div></figure></p>

<p>上述配置将从你的Maven settings.xml文件中获取用户账户的详细信息来部署到OSSRH。认证的最小设置是：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;settings>
</span><span class='line'>  &lt;servers>
</span><span class='line'>    &lt;server>
</span><span class='line'>      &lt;id>ossrh&lt;/id>
</span><span class='line'>      &lt;username>your-jira-id&lt;/username>
</span><span class='line'>      &lt;password>&lt;![CDATA[your-jira-pwd]]&gt;&lt;/password>
</span><span class='line'>    &lt;/server>
</span><span class='line'>  &lt;/servers>
</span><span class='line'>&lt;/settings></span></code></pre></td></tr></table></div></figure></p>

<h4>Using a Profile</h4>

<p>由于生成javadoc和源代码jars以及使用GPG签署组件是一个相当耗时的过程，这些执行通常从正常的构建配置中分离出来，并转移到一个配置文件中。然后，当通过激活配置文件进行部署时，该配置文件又会被使用。</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;profiles>
</span><span class='line'>  &lt;profile>
</span><span class='line'>    &lt;id>release&lt;/id>
</span><span class='line'>    &lt;build>
</span><span class='line'>      &hellip;
</span><span class='line'>      javadoc, source and gpg plugin from above
</span><span class='line'>      &hellip;
</span><span class='line'>    &lt;/build>
</span><span class='line'>  &lt;/profile>
</span><span class='line'>&lt;/profiles></span></code></pre></td></tr></table></div></figure></p>

<p>这些配置做完之后，最终得到的 pom.xml 类似如下：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
</span><span class='line'>    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
</span><span class='line'>    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
</span><span class='line'>    &lt;modelVersion>4.0.0&lt;/modelVersion>
</span><span class='line'>    &lt;groupId>com.github.damiansheldon&lt;/groupId>
</span><span class='line'>    &lt;artifactId>treasure&lt;/artifactId>
</span><span class='line'>    &lt;version>0.0.2&lt;/version>
</span><span class='line'>    &lt;build>
</span><span class='line'>        &lt;sourceDirectory>src&lt;/sourceDirectory>
</span><span class='line'>        &lt;plugins>
</span><span class='line'>            &lt;plugin>
</span><span class='line'>                &lt;artifactId>maven-compiler-plugin&lt;/artifactId>
</span><span class='line'>                &lt;version>3.8.1&lt;/version>
</span><span class='line'>                &lt;configuration>
</span><span class='line'>                    &lt;source>1.8&lt;/source>
</span><span class='line'>                    &lt;target>1.8&lt;/target>
</span><span class='line'>                &lt;/configuration>
</span><span class='line'>            &lt;/plugin>
</span><span class='line'>            &lt;plugin>
</span><span class='line'>                &lt;groupId>org.apache.maven.plugins&lt;/groupId>
</span><span class='line'>                &lt;artifactId>maven-deploy-plugin&lt;/artifactId>
</span><span class='line'>                &lt;version>2.8.2&lt;/version>
</span><span class='line'>            &lt;/plugin>
</span><span class='line'>            &lt;plugin>
</span><span class='line'>                &lt;groupId>org.apache.maven.plugins&lt;/groupId>
</span><span class='line'>                &lt;artifactId>maven-release-plugin&lt;/artifactId>
</span><span class='line'>                &lt;version>2.5.3&lt;/version>
</span><span class='line'>                &lt;configuration>
</span><span class='line'>                    &lt;arguments>-Dgpg.passphrase=${gpg.passphrase}&lt;/arguments>
</span><span class='line'>                    &lt;autoVersionSubmodules>true&lt;/autoVersionSubmodules>
</span><span class='line'>                    &lt;useReleaseProfile>false&lt;/useReleaseProfile>
</span><span class='line'>                    &lt;releaseProfiles>release&lt;/releaseProfiles>
</span><span class='line'>                    &lt;goals>deploy&lt;/goals>
</span><span class='line'>                &lt;/configuration>
</span><span class='line'>            &lt;/plugin>
</span><span class='line'>            &lt;plugin>
</span><span class='line'>                &lt;groupId>org.sonatype.plugins&lt;/groupId>
</span><span class='line'>                &lt;artifactId>nexus-staging-maven-plugin&lt;/artifactId>
</span><span class='line'>                &lt;version>1.6.7&lt;/version>
</span><span class='line'>                &lt;extensions>true&lt;/extensions>
</span><span class='line'>                &lt;configuration>
</span><span class='line'>                    &lt;serverId>ossrh&lt;/serverId>
</span><span class='line'>                    &lt;nexusUrl>&lt;a href="https://oss.sonatype.org/">https://oss.sonatype.org/&lt;/a>&lt;/nexusUrl>
</span><span class='line'>                    &lt;autoReleaseAfterClose>true&lt;/autoReleaseAfterClose>
</span><span class='line'>                &lt;/configuration>
</span><span class='line'>            &lt;/plugin>
</span><span class='line'>        &lt;/plugins>
</span><span class='line'>    &lt;/build>
</span><span class='line'>    &lt;dependencies>
</span><span class='line'>        &lt;dependency>
</span><span class='line'>            &lt;groupId>org.springframework&lt;/groupId>
</span><span class='line'>            &lt;artifactId>spring-jdbc&lt;/artifactId>
</span><span class='line'>            &lt;version>5.2.8.RELEASE&lt;/version>
</span><span class='line'>        &lt;/dependency>
</span><span class='line'>    &lt;/dependencies>
</span><span class='line'>    &lt;distributionManagement>
</span><span class='line'>        &lt;repository>
</span><span class='line'>            &lt;id>ossrh&lt;/id>
</span><span class='line'>            &lt;name>OSSRH Staging Repository&lt;/name>
</span><span class='line'>            &lt;url>&lt;a href="https://oss.sonatype.org/service/local/staging/deploy/maven2">https://oss.sonatype.org/service/local/staging/deploy/maven2&lt;/a>&lt;/url>
</span><span class='line'>        &lt;/repository>
</span><span class='line'>        &lt;snapshotRepository>
</span><span class='line'>            &lt;id>ossrh&lt;/id>
</span><span class='line'>            &lt;name>OSSRH Snapshots&lt;/name>
</span><span class='line'>            &lt;url>&lt;a href="https://oss.sonatype.org/content/repositories/snapshots">https://oss.sonatype.org/content/repositories/snapshots&lt;/a>&lt;/url>
</span><span class='line'>        &lt;/snapshotRepository>
</span><span class='line'>    &lt;/distributionManagement>
</span><span class='line'>    &lt;scm>
</span><span class='line'>        &lt;connection>scm:git:&lt;a href="https://github.com/DamianSheldon/Treasure.git">https://github.com/DamianSheldon/Treasure.git&lt;/a>&lt;/connection>
</span><span class='line'>        &lt;developerConnection>scm:git:&lt;a href="https://github.com/DamianSheldon/Treasure.git">https://github.com/DamianSheldon/Treasure.git&lt;/a>&lt;/developerConnection>
</span><span class='line'>        &lt;tag>HEAD&lt;/tag>
</span><span class='line'>        &lt;url>&lt;a href="https://github.com/DamianSheldon/Treasure">https://github.com/DamianSheldon/Treasure&lt;/a>&lt;/url>
</span><span class='line'>    &lt;/scm>
</span><span class='line'>    &lt;profiles>
</span><span class='line'>        &lt;profile>
</span><span class='line'>            &lt;id>release&lt;/id>
</span><span class='line'>            &lt;build>
</span><span class='line'>                &lt;plugins>
</span><span class='line'>                    &lt;plugin>
</span><span class='line'>                        &lt;groupId>org.apache.maven.plugins&lt;/groupId>
</span><span class='line'>                        &lt;artifactId>maven-source-plugin&lt;/artifactId>
</span><span class='line'>                        &lt;version>2.2.1&lt;/version>
</span><span class='line'>                        &lt;executions>
</span><span class='line'>                            &lt;execution>
</span><span class='line'>                                &lt;id>attach-sources&lt;/id>
</span><span class='line'>                                &lt;goals>
</span><span class='line'>                                    &lt;goal>jar-no-fork&lt;/goal>
</span><span class='line'>                                &lt;/goals>
</span><span class='line'>                            &lt;/execution>
</span><span class='line'>                        &lt;/executions>
</span><span class='line'>                    &lt;/plugin>
</span><span class='line'>                    &lt;plugin>
</span><span class='line'>                        &lt;groupId>org.apache.maven.plugins&lt;/groupId>
</span><span class='line'>                        &lt;artifactId>maven-javadoc-plugin&lt;/artifactId>
</span><span class='line'>                        &lt;version>2.9.1&lt;/version>
</span><span class='line'>                        &lt;executions>
</span><span class='line'>                            &lt;execution>
</span><span class='line'>                                &lt;id>attach-javadocs&lt;/id>
</span><span class='line'>                                &lt;goals>
</span><span class='line'>                                    &lt;goal>jar&lt;/goal>
</span><span class='line'>                                &lt;/goals>
</span><span class='line'>                            &lt;/execution>
</span><span class='line'>                        &lt;/executions>
</span><span class='line'>                    &lt;/plugin>
</span><span class='line'>                    &lt;plugin>
</span><span class='line'>                        &lt;groupId>org.apache.maven.plugins&lt;/groupId>
</span><span class='line'>                        &lt;artifactId>maven-gpg-plugin&lt;/artifactId>
</span><span class='line'>                        &lt;version>1.5&lt;/version>
</span><span class='line'>                        &lt;executions>
</span><span class='line'>                            &lt;execution>
</span><span class='line'>                                &lt;id>sign-artifacts&lt;/id>
</span><span class='line'>                                &lt;phase>verify&lt;/phase>
</span><span class='line'>                                &lt;goals>
</span><span class='line'>                                    &lt;goal>sign&lt;/goal>
</span><span class='line'>                                &lt;/goals>
</span><span class='line'>                            &lt;/execution>
</span><span class='line'>                        &lt;/executions>
</span><span class='line'>                    &lt;/plugin>
</span><span class='line'>                &lt;/plugins>
</span><span class='line'>            &lt;/build>
</span><span class='line'>        &lt;/profile>
</span><span class='line'>    &lt;/profiles>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>&lt;!-- More Project Information --&gt;
</span><span class='line'>&lt;name&gt;Treasure&lt;/name&gt;
</span><span class='line'>&lt;description&gt;The treasures I have accumulated in my daily java development. It can help other people face the same problem.&lt;/description&gt;
</span><span class='line'>&lt;url&gt;https://github.com/DamianSheldon/Treasure&lt;/url&gt;
</span><span class='line'>&lt;licenses&gt;
</span><span class='line'>    &lt;license&gt;
</span><span class='line'>        &lt;name&gt;MIT License&lt;/name&gt;
</span><span class='line'>        &lt;url&gt;http://www.opensource.org/licenses/mit-license.php&lt;/url&gt;
</span><span class='line'>        &lt;distribution&gt;repo&lt;/distribution&gt;
</span><span class='line'>    &lt;/license&gt;
</span><span class='line'>&lt;/licenses&gt;
</span><span class='line'>&lt;developers&gt;
</span><span class='line'>    &lt;developer&gt;
</span><span class='line'>        &lt;id&gt;meiliang&lt;/id&gt;
</span><span class='line'>        &lt;name&gt;Meiliang Dong&lt;/name&gt;
</span><span class='line'>        &lt;email&gt;dongmeilianghy@sina.com&lt;/email&gt;
</span><span class='line'>        &lt;url&gt;http://damiansheldon.github.io&lt;/url&gt;
</span><span class='line'>        &lt;roles&gt;
</span><span class='line'>            &lt;role&gt;architect&lt;/role&gt;
</span><span class='line'>            &lt;role&gt;developer&lt;/role&gt;
</span><span class='line'>        &lt;/roles&gt;
</span><span class='line'>        &lt;timezone&gt;Asia/Shanghai&lt;/timezone&gt;
</span><span class='line'>    &lt;/developer&gt;
</span><span class='line'>&lt;/developers&gt;
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>&lt;/project></span></code></pre></td></tr></table></div></figure></p>

<p>做好相关配置之后就可以真正部署了，主要有两种部署方式：</p>

<ul>
<li>Nexus Staging Maven Plugin for Deployment and Release</li>
<li>Performing a Release Deployment with the Maven Release Plugin</li>
</ul>


<p>推荐的方式是使用 Nexus Staging Maven Plugin。</p>

<h4>Nexus Staging Maven Plugin for Deployment and Release</h4>

<p>Performing a Snapshot Deployment</p>

<p>当你的版本以<code>-SNAPSHOT</code>结尾时，会进行快照部署。当执行快照部署时，您不需要满足要求，只需在工程上运行 <code>mvn clean deploy</code></p>

<p>SNAPSHOT版本不同步到中央版本库。如果您希望您的用户使用您的 SNAPSHOT 版本，他们需要将快照库添加到他们的 Nexus Repository Manager、settings.xml 或 pom.xml 中。成功部署的SNAPSHOT版本可以在<code>https://oss.sonatype.org/content/repositories/snapshots/</code>找到。</p>

<p>Performing a Release Deployment</p>

<p>为了执行发布部署，你必须在所有的POM文件中编辑你的版本，以使用发布版本。这意味着它们不能以<code>-SNAPSHOT</code>结尾，此外插件和依赖性声明也不能使用快照版本。这保证了你只能依赖其他发布的组件。理想情况下，它们都在中央仓库中可用。这确保了你的用户可以从中央仓库中检索你的组件以及你的过渡性依赖。</p>

<p>在多模块设置中，可以手动或借助Maven版本插件来更改项目的版本和父级引用。</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mvn versions:set -DnewVersion=1.2.3</span></code></pre></td></tr></table></div></figure></p>

<p>一旦你更新了所有的版本，并确保你的构建没有部署就通过了，你就可以使用发布配置文件进行部署，并使用</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mvn clean deploy -P release</span></code></pre></td></tr></table></div></figure></p>

<h4>Performing a Release Deployment with the Maven Release Plugin</h4>

<p>Maven发布插件可以用来自动完成对Maven POM文件的修改、健康检查、所需的SCM操作和实际部署执行。</p>

<p>Maven发布插件的配置应该包括禁用Maven super POM 中的发布配置文件，因为我们使用的是我们自己的配置文件，并在激活发布配置文件的同时指定部署目标。</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;plugin>
</span><span class='line'>  &lt;groupId>org.apache.maven.plugins&lt;/groupId>
</span><span class='line'>  &lt;artifactId>maven-release-plugin&lt;/artifactId>
</span><span class='line'>  &lt;version>2.5.3&lt;/version>
</span><span class='line'>  &lt;configuration>
</span><span class='line'>    &lt;autoVersionSubmodules>true&lt;/autoVersionSubmodules>
</span><span class='line'>    &lt;useReleaseProfile>false&lt;/useReleaseProfile>
</span><span class='line'>    &lt;releaseProfiles>release&lt;/releaseProfiles>
</span><span class='line'>    &lt;goals>deploy&lt;/goals>
</span><span class='line'>  &lt;/configuration>
</span><span class='line'>&lt;/plugin></span></code></pre></td></tr></table></div></figure></p>

<p>在SCM连接配置正确的情况下，您可以通过以下方式向OSSRH进行发布部署。</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mvn release:clean release:prepare</span></code></pre></td></tr></table></div></figure></p>

<p>回答版本和标签的提示，然后是</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mvn release:perform</span></code></pre></td></tr></table></div></figure></p>

<p>由于使用了Nexus Staging Maven Plugin，并将autoReleaseAfterClose设置为true，这个执行将一次性部署到OSSRH并发布到中央仓库。</p>

<h3>Releasing to Central</h3>

<p>在前面的介绍中，我们提到使用 Nexus Staging Maven Plugin，并将autoReleaseAfterClose设置为true，部署到OSSRH后会发布到中央仓库。我们也可以手动执行 <code>mvn nexus-staging:release
</code> 来发布 staging repository。</p>

<h3>Reference</h3>

<ul>
<li><a href="https://central.sonatype.org/pages/ossrh-guide.html">OSSRH Guide</a></li>
<li><a href="https://central.sonatype.org/pages/requirements.html">Requirements</a></li>
<li><a href="https://central.sonatype.org/pages/apache-maven.html#nexus-staging-maven-plugin-for-deployment-and-release">Deploying to OSSRH with Apache Maven</a></li>
<li><a href="https://dzone.com/articles/publish-your-artifacts-to-maven-central">How to Publish Your Artifacts to Maven Central</a></li>
<li><a href="https://stackoverflow.com/questions/57591432/gpg-signing-failed-inappropriate-ioctl-for-device-on-macos-with-maven">“gpg: signing failed: Inappropriate ioctl for device” on MacOS with Maven</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一种构建 JavaScript 库的方法]]></title>
    <link href="http://DamianSheldon.github.io/blog/an-approach-to-building-javascript-libraries.html"/>
    <updated>2020-09-23T15:08:06+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/an-approach-to-building-javascript-libraries</id>
    <content type="html"><![CDATA[<p>最近手头有个项目需要构建 JavaScript 库，核心需求是库既能用于传统的多页面，也能用于 Angular 的单页面。目前网络上暂时好像没有这类详细教程，反而是一些理论阐述的文章较多，经过一番研究后，我得到了一个适合自己的方法。</p>

<p>由于我希望库既能用于多页面，也能用于 Angular 单页面，所以需要支持 UMD 和 ES Harmony。由于 Angular 是使用 TypeScript 开发，最好还能提供用于 TypeScript 的声明文件。最原始的想法自然是手动按要求提供各种文件，但这样工作量比较大，也不容易扩展。那么还有什么容易的办法吗？有的，最核心的想法就是库的源码只写一份，然后用工具生成各种模块系统需要文件。具体的做法可能有差异，但理念是一样的。</p>

<p>从我的需求出发，我最终选择用 TypeScript 来写库的源码，基于脱敏的考虑，这里选择 TypeScript 文档中的示例代码来演示。</p>

<p>首先我们建立好库的源码目录结构并配置好源码管理：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>simple-module-example
</span><span class='line'>├── src
</span><span class='line'>│   ├── LettersOnlyValidator.ts
</span><span class='line'>│   ├── Validation.ts
</span><span class='line'>│   ├── ZipCodeValidator.ts
</span><span class='line'>│   └── index.ts</span></code></pre></td></tr></table></div></figure></p>

<p>然后使用 <code>npm init</code> 生成 <code>package.json</code> 文件：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  &ldquo;name&rdquo;: &ldquo;simple-module-example&rdquo;,
</span><span class='line'>  &ldquo;version&rdquo;: &ldquo;1.0.0&rdquo;,
</span><span class='line'>  &ldquo;description&rdquo;: &ldquo;A simple module example.&rdquo;,
</span><span class='line'>  &ldquo;main&rdquo;: &ldquo;index.js&rdquo;,
</span><span class='line'>  &ldquo;directories&rdquo;: {
</span><span class='line'>    &ldquo;test&rdquo;: &ldquo;test&rdquo;
</span><span class='line'>  },
</span><span class='line'>  &ldquo;scripts&rdquo;: {
</span><span class='line'>    &ldquo;test&rdquo;: &ldquo;echo \"Error: no test specified\&rdquo; &amp;&amp; exit 1"
</span><span class='line'>  },
</span><span class='line'>  &ldquo;keywords&rdquo;: [
</span><span class='line'>    &ldquo;module&rdquo;,
</span><span class='line'>    &ldquo;example&rdquo;
</span><span class='line'>  ],
</span><span class='line'>  &ldquo;author&rdquo;: &ldquo;Meiliang Dong&rdquo;,
</span><span class='line'>  &ldquo;license&rdquo;: &ldquo;MIT&rdquo;
</span><span class='line'>}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<!--more-->


<p>其次是按需求编辑好 <code>package.json</code> 文件。这是关键步骤，<code>package.json</code> 的 main 字段通常用于指向 UMD 版本的库；module 字段则用于指向 ES 版本的库。我们还需要配置构建脚本生成对应版本的库，最终的 <code>package.json</code> 文件内容如下：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    &ldquo;name&rdquo;: &ldquo;simple-module-example&rdquo;,
</span><span class='line'>    &ldquo;version&rdquo;: &ldquo;1.0.0&rdquo;,
</span><span class='line'>    &ldquo;description&rdquo;: &ldquo;A simple module example.&rdquo;,
</span><span class='line'>    &ldquo;main&rdquo;: &ldquo;dist/umd/simple-module-example.js&rdquo;,
</span><span class='line'>    &ldquo;module&rdquo;: &ldquo;dist/esm/index.js&rdquo;,
</span><span class='line'>    &ldquo;browser&rdquo;: &ldquo;dist/umd/simple-module-example.js&rdquo;,
</span><span class='line'>    &ldquo;types&rdquo;: &ldquo;dist/types/index.d.ts&rdquo;,
</span><span class='line'>    &ldquo;files&rdquo;: [
</span><span class='line'>        &ldquo;dist&rdquo;
</span><span class='line'>    ],
</span><span class='line'>    &ldquo;directories&rdquo;: {
</span><span class='line'>        &ldquo;test&rdquo;: &ldquo;test&rdquo;
</span><span class='line'>    },
</span><span class='line'>    &ldquo;scripts&rdquo;: {
</span><span class='line'>        &ldquo;clean&rdquo;: &ldquo;rm -rf ./dist&rdquo;,
</span><span class='line'>        &ldquo;build&rdquo;: &ldquo;npm run clean &amp;&amp; npm run build:es2015 &amp;&amp; npm run build:esm &amp;&amp; npm run build:cjs &amp;&amp; npm run build:umd&rdquo;,
</span><span class='line'>        &ldquo;build:es2015&rdquo;: &ldquo;tsc &ndash;module es2015 &ndash;target es2015 &ndash;outDir dist/es2015&rdquo;,
</span><span class='line'>        &ldquo;build:esm&rdquo;: &ldquo;tsc &ndash;module es2015 &ndash;outDir dist/esm&rdquo;,
</span><span class='line'>        &ldquo;build:umd&rdquo;: &ldquo;rollup dist/esm/index.js &ndash;format umd &ndash;name SimpleModuleExample &ndash;sourcemap &ndash;file dist/umd/simple-module-example.js&rdquo;,
</span><span class='line'>        &ldquo;build:umd:min&rdquo;: &ldquo;cd dist/umd &amp;&amp; uglifyjs &ndash;compress &ndash;mangle &ndash;source-map &ndash;screw-ie8 &ndash;comments &ndash;o simple-module-example.min.js &ndash; simple-module-example.js &amp;&amp; gzip simple-module-example.min.js -c > simple-module-example.min.js.gz&rdquo;
</span><span class='line'>    },
</span><span class='line'>    &ldquo;keywords&rdquo;: [
</span><span class='line'>        &ldquo;module&rdquo;,
</span><span class='line'>        &ldquo;example&rdquo;
</span><span class='line'>    ],
</span><span class='line'>    &ldquo;author&rdquo;: &ldquo;Meiliang Dong&rdquo;,
</span><span class='line'>    &ldquo;license&rdquo;: &ldquo;MIT&rdquo;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></p>

<p>然后是编写 TypeScript 的配置文件 <code>tsconfig.json</code>， 先使用命令 <code>npm install @tsconfig/recommended --save-dev</code> 安装推荐的配置，之后根据需求定制，最终的内容如下：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    &ldquo;extends&rdquo;: &ldquo;@tsconfig/recommended/tsconfig.json&rdquo;,
</span><span class='line'>    &ldquo;compilerOptions&rdquo;: {
</span><span class='line'>      &ldquo;outDir&rdquo;: &ldquo;./dist&rdquo;,
</span><span class='line'>      &ldquo;target&rdquo;: &ldquo;es5&rdquo;,
</span><span class='line'>      &ldquo;sourceMap&rdquo;: true,
</span><span class='line'>      &ldquo;declaration&rdquo;: true,
</span><span class='line'>      &ldquo;declarationDir&rdquo;: &ldquo;./dist/types&rdquo;
</span><span class='line'>    },
</span><span class='line'>    &ldquo;include&rdquo;: [&ldquo;./src/&lt;em>*/&lt;/em>&rdquo;]
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure></p>

<p>其次是测试，测试是库开发的重要环节，它能帮我们验证库是否正常工作，后续迭代重构也要依赖它。通常的做法是使用测试框架，像 Angular 是 <a href="https://karma-runner.github.io/">Karma test runner</a>  搭配<a href="https://jasmine.github.io/">Jasmine test framework</a> ， 我们可以参考选择。</p>

<p>我这里还玩了一下用 rollup 打包, 然后在浏览器里运行测试用例。首先在库工程目录外重新创建一个测试工程，然后使用 <code>npm link</code> 命令来安装我们的开发库，具体目录结构和文件内容如下：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$mkdir test-simple-module-example
</span><span class='line'>├── Test.ts
</span><span class='line'>├── dist
</span><span class='line'>│   ├── esm
</span><span class='line'>│   └── test-simple-module-example.js
</span><span class='line'>├── index.html
</span><span class='line'>├── package-lock.json
</span><span class='line'>├── package.json
</span><span class='line'>├── rollup.config.js
</span><span class='line'>└── tsconfig.json</span></code></pre></td></tr></table></div></figure></p>

<p><code>Test.ts</code></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import { StringValidator, ZipCodeValidator, LettersOnlyValidator } from &ldquo;simple-module-example&rdquo;;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>// Some samples to try
</span><span class='line'>let strings = [&ldquo;Hello&rdquo;, &ldquo;98052&rdquo;, &ldquo;101&rdquo;];&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>// Validators to use
</span><span class='line'>let validators: { [s: string]: StringValidator } = {};
</span><span class='line'>validators[&ldquo;ZIP code&rdquo;] = new ZipCodeValidator();
</span><span class='line'>validators[&ldquo;Letters only&rdquo;] = new LettersOnlyValidator();&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>// Show whether each string passed each validator
</span><span class='line'>strings.forEach((s) => {
</span><span class='line'>  for (let name in validators) {
</span><span class='line'>    console.log(
</span><span class='line'>      &lt;code>"${s}" - ${
</span><span class='line'>        validators[name].isAcceptable(s) ? "matches" : "does not match"
</span><span class='line'>      } ${name}&lt;/code>
</span><span class='line'>    );
</span><span class='line'>  }
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure></p>

<p><code>package.json</code></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    &ldquo;name&rdquo;: &ldquo;test-simple-module-example&rdquo;,
</span><span class='line'>    &ldquo;version&rdquo;: &ldquo;1.0.0&rdquo;,
</span><span class='line'>    &ldquo;description&rdquo;: &ldquo;A test application for simple module example.&rdquo;,
</span><span class='line'>    &ldquo;main&rdquo;: &ldquo;.dist/Test.js&rdquo;,
</span><span class='line'>    &ldquo;scripts&rdquo;: {
</span><span class='line'>        &ldquo;clean&rdquo;: &ldquo;rm -rf ./dist&rdquo;,
</span><span class='line'>        &ldquo;build&rdquo;: &ldquo;npm run clean &amp;&amp; npm run build:esm &amp;&amp; npm run build:bundle&rdquo;,
</span><span class='line'>        &ldquo;build:esm&rdquo;: &ldquo;tsc &ndash;module es2015 &ndash;outDir dist/esm&rdquo;,
</span><span class='line'>        &ldquo;build:bundle&rdquo;: &ldquo;rollup -c&rdquo;,
</span><span class='line'>        &ldquo;test&rdquo;: &ldquo;echo \"Error: no test specified\&rdquo; &amp;&amp; exit 1"
</span><span class='line'>    },
</span><span class='line'>    &ldquo;author&rdquo;: &ldquo;Meiliang Dong&rdquo;,
</span><span class='line'>    &ldquo;license&rdquo;: &ldquo;MIT&rdquo;,
</span><span class='line'>    &ldquo;dependencies&rdquo;: {
</span><span class='line'>        &ldquo;@tsconfig/recommended&rdquo;: &ldquo;^1.0.1&rdquo;
</span><span class='line'>    },
</span><span class='line'>    &ldquo;devDependencies&rdquo;: {
</span><span class='line'>        &ldquo;@rollup/plugin-node-resolve&rdquo;: &ldquo;^9.0.0&rdquo;
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></p>

<p><code>rollup.config.js</code></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import resolve from &lsquo;@rollup/plugin-node-resolve&rsquo;;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>export default {
</span><span class='line'>    input: &lsquo;dist/esm/Test.js&rsquo;,
</span><span class='line'>    output: {
</span><span class='line'>        file: &lsquo;dist/test-simple-module-example.js&rsquo;,
</span><span class='line'>        format: &lsquo;umd&rsquo;
</span><span class='line'>    },
</span><span class='line'>    plugins: [resolve()]
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure></p>

<p><code>tsconfig.json</code></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  &ldquo;extends&rdquo;: &ldquo;@tsconfig/recommended/tsconfig.json&rdquo;,
</span><span class='line'>  &ldquo;compilerOptions&rdquo;: {
</span><span class='line'>    &ldquo;outDir&rdquo;: &ldquo;./dist&rdquo;,
</span><span class='line'>    &ldquo;target&rdquo;: &ldquo;es5&rdquo;,
</span><span class='line'>    &ldquo;sourceMap&rdquo;: true,
</span><span class='line'>    &ldquo;moduleResolution&rdquo;: &ldquo;Node&rdquo;
</span><span class='line'>  },
</span><span class='line'>  &ldquo;include&rdquo;: [&ldquo;./*.ts&rdquo;]
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></p>

<p>最后是根据需要选择发布方式，例如发布到 npm 公有仓库，具体做法参考官方文档就好了。</p>

<h3>Reference</h3>

<ul>
<li><a href="https://www.freecodecamp.org/news/anatomy-of-js-module-systems-and-building-libraries-fadcd8dbd0e/">Learn the basics of the JavaScript module system and build your own library</a></li>
<li><a href="https://gist.github.com/jayphelps/51bafb4505558736fdba0aaf8bfe69d3">TypeScript output es2015, esm (ES Modules), CJS, UMD, UMD + Min + Gzip.</a></li>
<li><a href="http://ifandelse.com/its-not-hard-making-your-library-support-amd-and-commonjs/">It&rsquo;s Not Hard: Making Your Library Support AMD and CommonJS</a></li>
<li><a href="https://addyosmani.com/writing-modular-js/">Writing Modular JavaScript With AMD, CommonJS &amp; ES Harmony</a></li>
<li><a href="https://yanhaijing.com/javascript/2018/08/17/2020-js-lib/">如何写一个现代的JavaScript库</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL 使用笔记(二)]]></title>
    <link href="http://DamianSheldon.github.io/blog/using-mysql-note-part-two.html"/>
    <updated>2020-07-18T15:57:24+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/using-mysql-note-part-two</id>
    <content type="html"><![CDATA[<h3>1.如何查看数据库中所有的存储过程?</h3>

<p>A: <code>mysql&gt; show procedure status where db = 'db_for_mysql_crash_course'\G;</code>;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web API 的设计与开发--读书笔记]]></title>
    <link href="http://DamianSheldon.github.io/blog/notes-of-web-api-the-good-parts.html"/>
    <updated>2020-04-29T10:31:16+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/notes-of-web-api-the-good-parts</id>
    <content type="html"><![CDATA[<p>Web API 的设计与开发是开发者日常工作的重要内容，我们该如何来做好这项工作呢？我觉得一个务实的方法是先参考前辈们的做法，也就是站在巨人的肩上，理解消化后再尝试去突破，这样可能会事半功倍。经过一番搜索，找到了 <code>&lt;&lt;Web API 的设计与开发&gt;&gt;</code>， 我个人觉得这是一本对 Web API 进行全面、细致和深入剖析的书，对 Web API 的设计与开发很有帮助，值得一读。</p>

<p>书的内容是按照整分的逻辑组织，并依先易后难的顺序来讲解相关知识。下面我按自己的理解尝试对书中内容做个简单的总结。</p>

<p>Web API 是用于完成某种需求，由于需求会变化，所以一次就设计出完美 Web API 的想法是不现实的，所以一开始应该要给 Web API 的更改留有余地，这是很容易忽视的地方。推荐的做法是在 URI 中嵌入版本信息，典型的形式是 <code>http://api.linkedin.com/v1/people</code>。</p>

<p>虽然一次就完美地设计 Web API 的想法不现实，但我们还是想尽量做好，减少 Web API 版本变更的次数，毕竟版本越多维护成本越高，那么我们该如何设计 Web API 呢？</p>

<p>Web API 通过 HTTP 协议来完成通信，在设计时我们应该最大程度地利用 HTTP 协议规范。基于标准协议设计的 API 至少要比使用私有协议设计的 API 更容易理解，还会减少使用时引入的 bug，使你的 API 得到更广泛的使用，提高利用已有的程序库或代码的可能。</p>

<p>有了整体设计原则后，我们来看下具体的请求和响应设计。API 的功能是为了完成项目的需求，最完备的请求会包含请求端点、请求方法、请求参数和请求数据体(Request Body)，我们依次来审视请求的每个部分。</p>

<p>端点是指用于访问 API 的 URI，普适又重要的设计原则有：</p>

<ul>
<li>短小便于输入的 URI</li>
<li>人可以读懂的 URI</li>
<li>没有大小写混用的 URI</li>
<li>不会暴露服务端架构的 URI</li>
<li>规则统一的 URI</li>
</ul>


<p>端点设计的注意事项：</p>

<ul>
<li>使用名词的复数形式</li>
<li>注意所用的单词</li>
<li>不使用空格及需要编码的字符</li>
<li>使用连字符来连接多个单词</li>
</ul>


<p>URI 和 HTTP 方法之间的关系可以认为是操作对象和操作方法的关系。如果把 URI 当作 API(HTTP) 的 “操作对象 = 资源”， HTTP 方法则表示 “进行怎样的操作”。通过用不同方法访问同一个 URI 端点，不但可以获取信息，还能修改信息、删除信息等，这样的思想正成为 Web API 设计的主流方式。</p>

<table>
<thead>
<tr>
<th> 方法名 </th>
<th> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td> GET </td>
<td> 获取资源 </td>
</tr>
<tr>
<td> POST </td>
<td> 新增资源 </td>
</tr>
<tr>
<td> PUT </td>
<td> 覆盖已有资源 </td>
</tr>
<tr>
<td> DELETE </td>
<td> 删除资源 </td>
</tr>
<tr>
<td> PATCH </td>
<td> 更新部分资源 </td>
</tr>
<tr>
<td> HEAD </td>
<td> 获取资源的元信息 </td>
</tr>
</tbody>
</table>


<p>有时请求可能还需要传递参数，在设计 URI 时，必须决定是把特定参数放在查询参数里还是路径里，决策的依据有以下两点：</p>

<ul>
<li>是否是表示唯一资源所需的信息</li>
<li>是否可以省略</li>
</ul>


<p>请求数据体，个人认为可以采用面向对象编程的思想来设计，整个处理过程会轻松很多。</p>

<p>说完请求，让我们来看下响应。首先是正确使用状态码，国内由于历史原因遗留下来无论请求是否成功都一律返回 200 的问题，全站切换到 HTTPS 后，我们还是应该最大程度地利用 HTTP 规范，这样我们能受益于通用的 HTTP 程序库，减轻客户端的负担。</p>

<p>其次是数据格式，这里的数据格式是指该用怎样的形式来描述 API 返回的结构化数据，具体而言就是指 JSON、XML 等数据格式。关于这一点，事实上几乎没有可讨论的，因为我们通常就是使用 JSON 作为默认的数据格式，若有需求 API 也可以支持 XML 的格式，这是最贴近现实的做法。</p>

<p>再次是数据内部结构，我们重点看下数据应该以数组还是对象返回，作者更推荐使用对象来封装数据的方式，因为该方式有如下几个优点:</p>

<ul>
<li>更容易理解响应数据表示什么</li>
<li>响应数据通过对象的封装实现了结构统一</li>
<li>可以避免安全方面的风险</li>
</ul>


<p>从次是各个数据的格式，各个数据项组成了最终的数据，只有掌握了如何处理单个数据项格式才能设计出合理的响应体数据格式。作者重点介绍了如何描述性别数据、日期格式和大整数，受益匪浅。</p>

<p>最后是出错信息的表示，同样，我们需要选择合适的状态码，出误信息建议以消息体的形式返回，出错信息应该包含详细的错误代码、人们能够读懂的相关信息，以及记载有详细说明的文档页面的 URI，如下所示：</p>

<pre><code>{
    "error": {
        "code": 2013,
        "message": "Bad authentication token",
        "info": "http://docs.example.com/api/v1/authentication"
    }
}
</code></pre>

<p>如果想支持描述多个错误同时发生，可以返回出错信息数组，</p>

<pre><code>{
    "errors": [
        {
            "code": 2013,
            "message": "Bad authentication token",
            "info": "http://docs.example.com/api/v1/authentication"
        }
    ]
}
</code></pre>

<p>以上是基础内容，作者最后还介绍进阶内容，开发牢固的 Web API，对我们把 Web API 设计和开发提高到新高度有非常大的帮助。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ionic App 使用 cordova hot code push 实现热更新]]></title>
    <link href="http://DamianSheldon.github.io/blog/ionic-app-use-cordova-hot-code-push-achieve-live-update.html"/>
    <updated>2020-01-07T17:02:35+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/ionic-app-use-cordova-hot-code-push-achieve-live-update</id>
    <content type="html"><![CDATA[<p>本文主要记录 Ionic App 使用 cordova hot code push 实现热更新时遇到问题的解决方法，另外也简单记录下使用方法，方便日后查阅。</p>

<p>Cordova hot code push 插件的原作者已经不维护了，我们可以选择一个可能最好的 fork 来使用。 <a href="http://gitpop2.herokuapp.com/">gitpop2</a> 可以帮助我们选择，我从中选择了当前 star 最多的一个 fork。</p>

<p>Ionic App 使用 cordova hot code push 实现热更新的基本步骤如下：</p>

<ol>
<li><p>在 ionic 工程中添加 cordova hot code push plugin</p>

<pre><code class="`"> $ ionic cordova plugin add https://github.com/snipking/cordova-hot-code-push.git
</code></pre></li>
<li><p>安装 Cordova Hot Code Push CLI client</p>

<pre><code class="`"> $ npm install -g cordova-hot-code-push-cli
</code></pre></li>
<li><p>为指定平台编译工程</p>

<pre><code class="`"> $ ionic cordova prepare android
</code></pre></li>
<li><p>执行插件初始化</p>

<pre><code class="`"> $ cd /path/to/project/root
 $ cordova-hcp init
</code></pre></li>
<li><p>生成插件配置文件</p>

<pre><code class="`"> $ cordova-hcp build
</code></pre></li>
<li><p>运行到设备上</p></li>
<li><p>开发和发布应用新版本的 web</p>

<pre><code class="`"> // 1. 开发
 // 2. 为指定平台编译工程生成 web 
 $ ionic build --engine=cordova --platform=android
 // 3. 生成新插件配置文件
 $ cordova-hcp build
 // 4. 部署到服务器
</code></pre></li>
</ol>


<p>在使用的过程中遇到的第一个问题是更新之后白屏。使用 Chrome 的 remote devices 调试 android webview 找到了问题的原因，ionic 应用中 <code>&lt;base href="http://DamianSheldon.github.io/" /&gt;</code>， cordova hot code push 会将 web 代码拷贝到外部存储上，webview 使用形如 <code>file:///data/user/0/com.tenneshop.liveupdatedemo/files/cordova-hot-code-push-plugin/2020.01.07-16.16.39/www/index.html</code> 的路径来加载应用，此时 <code>document.baseURI = /</code>，加载其他相对路径的 js 文件时，是相对这个路径，例如 <code>&lt;script src="cordova.js"&gt;&lt;/script&gt;</code>，就是以 <code>/cordova.js</code> 去加载，于是就会提示找不到文件。从上面的分析我们也知道，解决问题的一个办法是修正 base href 的值，我们可以在 index.html 的 head 元素加入下面的代码：</p>

<p>```</p>

<script>
    document.write('<base href="' + document.location.href + '" />');
</script>


<p>```</p>

<p>这样我们就修正文件路径的问题，很不巧，虽然文件的路径是对了，但是 ionic 默认不响应 file schema 的请求，我们需要做些工作，先让 WebViewLocalServer.java 支持响应 file schema，将 createHostingDetails 改成如下实现：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>private void createHostingDetails() {
</span><span class='line'>  final String assetPath = this.basePath;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  if (assetPath.indexOf(&lsquo;&lt;em>&rsquo;) != -1) {
</span><span class='line'>    throw new IllegalArgumentException(&ldquo;assetPath cannot contain the &lsquo;&lt;/em>&rsquo; character.&rdquo;);
</span><span class='line'>  }&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  PathHandler handler = new PathHandler() {
</span><span class='line'>    @Override
</span><span class='line'>    public InputStream handle(Uri url) {
</span><span class='line'>      InputStream stream = null;
</span><span class='line'>      String path = url.getPath();
</span><span class='line'>      try {
</span><span class='line'>        if (url.getScheme().equals(&ldquo;file&rdquo;)) {
</span><span class='line'>          stream = protocolHandler.openFile(path);
</span><span class='line'>        } else if (path.startsWith(contentStart)) {
</span><span class='line'>          stream = protocolHandler.openContentUrl(url);
</span><span class='line'>        } else if (path.startsWith(fileStart) || !isAsset) {
</span><span class='line'>          if (!path.startsWith(fileStart)) {
</span><span class='line'>            path = basePath + url.getPath();
</span><span class='line'>          }
</span><span class='line'>          stream = protocolHandler.openFile(path);
</span><span class='line'>        } else {
</span><span class='line'>          stream = protocolHandler.openAsset(assetPath + path);
</span><span class='line'>        }
</span><span class='line'>      } catch (IOException e) {
</span><span class='line'>        Log.e(TAG, &ldquo;Unable to open asset URL: &rdquo; + url);
</span><span class='line'>        Log.e(TAG, e.getLocalizedMessage());
</span><span class='line'>        return null;
</span><span class='line'>      }&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>  return stream;
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>  };&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  registerUriForScheme(httpScheme, handler, authority);
</span><span class='line'>  registerUriForScheme(httpsScheme, handler, authority);
</span><span class='line'>  if (!customScheme.equals(httpScheme) &amp;&amp; !customScheme.equals(httpsScheme)) {
</span><span class='line'>    registerUriForScheme(customScheme, handler, authority);
</span><span class='line'>  }&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  registerUriForScheme(&ldquo;file&rdquo;, handler, &ldquo;&rdquo;);&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<p>然后是 isLocalFile 方法：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>private boolean isLocalFile(Uri uri) {
</span><span class='line'>  String path = uri.getPath();
</span><span class='line'>  if (path.startsWith(contentStart) || path.startsWith(fileStart) || uri.getScheme().equals(&ldquo;file&rdquo;)) {
</span><span class='line'>    return true;
</span><span class='line'>  }
</span><span class='line'>  return false;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></p>

<p>做完这些工作后 ionic 就可以响应 file schema 请求了。</p>

<p>继续测试，我发现更新后第二次打开还是显示 App bundle asset 中的 web，这有点奇怪。仔细查看日志，确实有加载外部存储的 web , 但却被 <code>http://localhost/</code> 的请求覆盖了，这是什么原因呢？经过对代码逻辑的一番梳理，我发现是 IonicWebViewEngine 中 onPageStarted 方法的原因：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public void onPageStarted(WebView view, String url, Bitmap favicon) {
</span><span class='line'>  super.onPageStarted(view, url, favicon);
</span><span class='line'>  String launchUrl = parser.getLaunchUrl();
</span><span class='line'>  if (!launchUrl.contains(WebViewLocalServer.httpsScheme) &amp;&amp; !launchUrl.contains(WebViewLocalServer.httpScheme) &amp;&amp; url.equals(launchUrl)) {
</span><span class='line'>    view.stopLoading();
</span><span class='line'>    // When using a custom scheme the app won&rsquo;t load if server start url doesn&rsquo;t end in /
</span><span class='line'>    String startUrl = CDV_LOCAL_SERVER;
</span><span class='line'>    if (!scheme.equalsIgnoreCase(WebViewLocalServer.httpsScheme) &amp;&amp; !scheme.equalsIgnoreCase(WebViewLocalServer.httpScheme)) {
</span><span class='line'>      startUrl += &ldquo;/&rdquo;;
</span><span class='line'>    }
</span><span class='line'>    view.loadUrl(startUrl);
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></p>

<p>MainActivity 触发 webview 加载 <code>file:///android_asset/www/index.html</code>，然后 cordova hot code push plugin 启动工作，它会让 webview 加载外部存储的 web，之后 IonicWebViewEngine 的 onPageStarted 收到 <code>file:///android_asset/www/index.html</code> 的请求的回调，它先停止了 webview 的加载工作，即 cordova hot code push plugin 启动加载外部存储的 web 的请求，再开始 <code>http://localhost/</code> 的请求，也就是打印出来日志的记录。正是这个方法时序的问题导致成功更新之后再重启应用仍然加载 app bundle asset 的 web。一种解决办法是我们直接让 MainActivity 直接加载 <code>http://localhost/</code>，就像下面这样:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public void onCreate(Bundle savedInstanceState)
</span><span class='line'>{
</span><span class='line'>   super.onCreate(savedInstanceState);&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>   // enable Cordova apps to be started in the background
</span><span class='line'>   Bundle extras = getIntent().getExtras();
</span><span class='line'>   if (extras != null &amp;&amp; extras.getBoolean(&ldquo;cdvStartInBackground&rdquo;, false)) {
</span><span class='line'>       moveTaskToBack(true);
</span><span class='line'>   }
</span><span class='line'>   launchUrl = &ldquo;&lt;a href="http://localhost/">http://localhost/&lt;/a>&rdquo;;
</span><span class='line'>   // Set by &lt;content src="index.html" /> in config.xml
</span><span class='line'>   loadUrl(launchUrl);
</span><span class='line'>}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<p>这样热更新就可以正常工作了。</p>

<p>我继续做了点测试，又发现一个和 ionic icon 相关的问题，ionic 4 使用了 Fetch API 来请求 ionic icon 的 svg 资源，由于现在是使用 file schema 来指定资源路径，由于 Fetch API 不支持 file schema 所以就报错 <code>Fetch API cannot load file:///xxx/www/svg/md-star.svg. URL scheme "file" is not supported.</code> 我们得想办法来解决这个问题，一个办法替换 fetch 方法的实现，如:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;script>
</span><span class='line'>   document.write('&lt;base href="' + document.location.href + '" />');
</span><span class='line'>
</span><span class='line'>   var originalFetch = window.fetch;
</span><span class='line'>
</span><span class='line'>   window.fetch = function() {
</span><span class='line'>       var args = [];
</span><span class='line'>       for (var _i = 0; _i &lt; arguments.length; _i++) {
</span><span class='line'>           args[_i] = arguments[_i];
</span><span class='line'>       }
</span><span class='line'>       var url = args[0];
</span><span class='line'>       if (typeof url === 'string' && url.match(/\.svg/)) {
</span><span class='line'>           return new Promise(function(resolve, reject) {
</span><span class='line'>               var req = new XMLHttpRequest();
</span><span class='line'>               req.open('GET', url, true);
</span><span class='line'>               req.addEventListener('load', function() {
</span><span class='line'>                   resolve({
</span><span class='line'>                       ok: true,
</span><span class='line'>                       status: 200,
</span><span class='line'>                       text: function() {
</span><span class='line'>                           return Promise.resolve(req.responseText);
</span><span class='line'>                       }
</span><span class='line'>                   });
</span><span class='line'>               });
</span><span class='line'>               req.addEventListener('error', reject);
</span><span class='line'>               req.send();
</span><span class='line'>           });
</span><span class='line'>       } else {
</span><span class='line'>           return originalFetch.apply(void 0, args);
</span><span class='line'>       }
</span><span class='line'>   };
</span><span class='line'>&lt;/script>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<p>在这些测试过程中，我还发现 cordova hot code push 更新时只做了版本字符是否相等的判断，这在服务器端的版本低于本地版本时，插件仍然会做更新，这是有问题的，我们需要严格这里的判断，让它只有在服务端的版本高于本地版本时才做更新。相关代码位于 UpdateLoaderWorker 的 run 方法中。</p>

<p>最后一个要考虑的问题是如何将我们修改的代码和 ionic 的代码很好的整合起来？我现在的想法是创建一个私有的扩展 IonicWebViewEngine 和 WebViewLocalServer，然后借鉴 ionic 通过 config.xml 的 web 偏好设置的方法，像下面的代码:</p>

<pre><code>&lt;preference name="webView" value="com.ionicframework.cordova.webview.IonicWebViewEngine" /&gt;
</code></pre>

<p>回头测试下这个想法，好了有时间也许可以整理好代码提个 Pull Request。</p>

<p>Reference:</p>

<ul>
<li><a href="https://github.com/angular/angular/issues/13948">Cannot run angular 2+ from file:/// - looks like &lsquo;base href=&ldquo;http://DamianSheldon.github.io/&rdquo;&rsquo; is the issue</a></li>
<li><a href="https://github.com/ionic-team/ionicons/issues/572">IONIC v4: Icon won&rsquo;t work in android</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
