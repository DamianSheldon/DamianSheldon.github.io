<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: archives | Hello World]]></title>
  <link href="http://DamianSheldon.github.io/blog/categories/archives/atom.xml" rel="self"/>
  <link href="http://DamianSheldon.github.io/"/>
  <updated>2019-01-30T11:11:12+08:00</updated>
  <id>http://DamianSheldon.github.io/</id>
  <author>
    <name><![CDATA[Sheldon]]></name>
    <email><![CDATA[dongmeilianghy@sina.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS App Distribution]]></title>
    <link href="http://DamianSheldon.github.io/blog/ios-app-distribution.html"/>
    <updated>2018-12-04T14:33:49+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/ios-app-distribution</id>
    <content type="html"><![CDATA[<p>iOS App 有不少分发方法，她们散落在 Apple 的文档中，并未归总到一处，所以本文对她们进行了总结，方便查阅。</p>

<p>首先我们简单梳理下这些分发方法，然后重点说明下 ipa 文件的安装方法。 Apple 制作的这张表格将分发方法归纳得很全：</p>

<table>
<thead>
<tr>
<th> Method </th>
<th style="text-align:left;"> Description </th>
</tr>
</thead>
<tbody>
<tr>
<td> App Store </td>
<td style="text-align:left;"> Distributes your app through the App Store, signed with an Apple Developer Program distribution provisioning profile. </td>
</tr>
<tr>
<td> Ad Hoc </td>
<td style="text-align:left;"> Distributes your app to testers with registered devices, signed with an ad hoc provisioning profile.<br>The devices need to be registered in your developer account and are limited to 100 devices per product family per year. If you don’t want to use a portion of these development devices for testing, distribute your app using TestFlight instead.<br>If you are a member of the Apple Developer Enterprise Program, choose this option to test your app. Only members of the Apple Developer Program have access to App Store Connect and TestFlight. </td>
</tr>
<tr>
<td> Development </td>
<td style="text-align:left;"> Distributes your app to testers with registered devices, signed with a development provisioning profile. </td>
</tr>
<tr>
<td> Enterprise </td>
<td style="text-align:left;"> Distributes your app to users in your organization, signed with an Apple Developer Enterprise Program distribution provisioning profile. </td>
</tr>
</tbody>
</table>


<p>虽然分发方法有很多，但可以分为两类：一类是通过 App Store 分发；另一类则是在 App Store 外分发。通过 App Store 分发时的流程很统一，都是上传应用到 iTunes Connection，等待审核发布，所以没有什么好说的。但是在 App Store 外发布时选择就多样了，我们既可以走像 App Store 分发那样流程的 TestFlight，也可以导出 ipa 文件然后安装。</p>

<p>下面我们介绍在 iPhone 上安装 ipa 的方法：</p>

<h2>Install using iTunes</h2>

<blockquote><p>iTunes 12.7 for Mac was released on Tuesday with a major change in the app. Apple has redesign iTunes so that it focuses on sales of music, movies, TV shows, audiobooks, and podcasts. It no longer has an App Store for buying apps for your iPhone or iPad. Therefore, you can no long install your iOS App (.ipa file) through iTunes any longer.</p></blockquote>

<ol>
<li>Download the .ipa file after the build completes.</li>
<li>Open iTunes, go to App library.</li>
<li>Drag and drop the downloaded .ipa file into the App library.</li>
<li>Connect your device to iTunes and go to your device apps.</li>
<li>Click Install button of the app and click Sync button. </li>
</ol>


<!--more-->


<h2>Install using Apple Configurator 2</h2>

<ol>
<li>Install Apple Configurator 2 on your Mac from the App Store.</li>
<li>Connect your device to your Mac.</li>
<li>Open Apple Configurator 2, select your device. If you device doesn’t appear here, please make sure that your device is successfully connected to your Mac.</li>
</ol>


<h2>Install using Xcode</h2>

<ol>
<li>Connect your device to your Mac.</li>
<li>Open Xcode, go to Window > Devices .</li>
<li>Then, the Devices screen will appear. Choose the device you want to install the app on.</li>
<li>Drag and drop your .ipa file into the Installed Apps.</li>
</ol>


<h2>Install using OTA Deployment</h2>

<p>OTA (Over-The-Air) Deployment enables you to install your built apps (ad-hoc build) via HTTPS.</p>

<ol>
<li>Download the .ipa file after the build completes.</li>
<li>Upload the .ipa file to the site you want.</li>
<li>Create a .plist file for this built application. The .plist file should look like this:</li>
</ol>


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;UTF-8&rdquo;?>
</span><span class='line'>&lt;!DOCTYPE plist PUBLIC &ldquo;-//Apple//DTD PLIST 1.0//EN&rdquo; &ldquo;&lt;a href="http://www.apple.com/DTDs/PropertyList-1.0.dtd">http://www.apple.com/DTDs/PropertyList-1.0.dtd&lt;/a>&rdquo;>
</span><span class='line'>&lt;plist version="1.0">
</span><span class='line'>&lt;dict>
</span><span class='line'>    &lt;key>items&lt;/key>
</span><span class='line'>    &lt;array>
</span><span class='line'>        &lt;dict>
</span><span class='line'>            &lt;key>assets&lt;/key>
</span><span class='line'>            &lt;array>
</span><span class='line'>                &lt;dict>
</span><span class='line'>                    &lt;key>kind&lt;/key>
</span><span class='line'>                    &lt;string>software-package&lt;/string>
</span><span class='line'>                    &lt;key>url&lt;/key>
</span><span class='line'>                    &lt;string>&lt;a href="https://www.anysite.com/application/your_app.ipa">https://www.anysite.com/application/your_app.ipa&lt;/a>&lt;/string>
</span><span class='line'>                &lt;/dict>
</span><span class='line'>            &lt;/array>
</span><span class='line'>            &lt;key>metadata&lt;/key>
</span><span class='line'>            &lt;dict>
</span><span class='line'>                &lt;key>bundle-identifier&lt;/key>
</span><span class='line'>                &lt;string>com.example.helloworld&lt;/string>
</span><span class='line'>                &lt;key>bundle-version&lt;/key>
</span><span class='line'>                &lt;string>1.0.0&lt;/string>
</span><span class='line'>                &lt;key>kind&lt;/key>
</span><span class='line'>                &lt;string>software&lt;/string>
</span><span class='line'>                &lt;key>title&lt;/key>
</span><span class='line'>                &lt;string>HELLO&lt;/string>
</span><span class='line'>            &lt;/dict>
</span><span class='line'>        &lt;/dict>
</span><span class='line'>    &lt;/array>
</span><span class='line'>&lt;/dict>
</span><span class='line'>&lt;/plist>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<ol>
<li>Upload the <code>.plist</code> file to the site you want. Make sure this file must be accessed via HTTPS protocol. </li>
<li>Create a webpage embedded the link to the uploaded <code>.plist</code> file using special <code>itms-services://</code> protocol. See blow example: 
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/li>
</span><span class='line'>&lt;/ol>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p>&lt;a href="itms-services://?action=download-manifest&url=https://example.com/manifest.plist">Install App&lt;/a></span></code></pre></td></tr></table></div></figure></p>

<p>使用 OTA 方式部署安装，需要自己架设 Web 服务器，目前市面上也有免费提供此安装服务的产品，如 <a href="https://fir.im/">Fir.im</a>，<a href="https://www.pgyer.com/">蒲公英</a>。</p>

<p>如果我们希望自己架设 Web 服务器来提供 OTA 分发，则相应地需要做些配置工作：</p>

<h2>HTTPS</h2>

<p>保证 ipa 文件是通过 HTTPS 访问，所以网站必须是由 iOS 信任的证书签名的。如果是没有信任锚的自签名证书，并且不能被 iOS 设备验证，那么安装会失败。</p>

<h2>Set server MIME types</h2>

<p>你也许需要配置你的 web 服务器以便清单文件和应用文件能正确传输。</p>

<p>For the server, add the MIME types to the web service’s MIME types settings:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>application/octet-stream ipa 
</span><span class='line'>text/xml plist</span></code></pre></td></tr></table></div></figure> 
For Microsoft’s Internet Information Server (IIS), use IIS Manager to add the MIME type in the Properties page of the server:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>.ipa application/octet-stream 
</span><span class='line'>.plist text/xml</span></code></pre></td></tr></table></div></figure> </p>

<p>同时，如果设备是连接到一个封闭的内部网络，我们必须保证如下访问：</p>

<h2>Network configuration requirements</h2>

<ul>
<li><a href="https://ax.init.itunes.apple.com:">https://ax.init.itunes.apple.com:</a> The device obtains the current file-size limit for downloading apps over the cellular network. If this website isn’t reachable, installation may fail. </li>
<li><a href="https://ppq.apple.com:">https://ppq.apple.com:</a> The device contacts this website to check the status of the distribution certificate used to sign the provisioning profile. </li>
</ul>


<h1>Reference</h1>

<ul>
<li><p><a href="https://help.apple.com/xcode/mac/current/#/dev31de635e5">Distribution methods</a></p></li>
<li><p><a href="https://web.archive.org/web/20171114184350/https://developer.apple.com/library/content/documentation/IDEs/Conceptual/AppDistributionGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40012582-CH1-SW1">App Distribution Guide</a></p></li>
<li><p><a href="https://docs.monaca.io/en/products_guide/monaca_ide/deploy/non_market_deploy/#install-using-ota-deployment">Non-market App Distribution</a></p></li>
<li><p><a href="https://help.apple.com/deployment/ios/#/apda0e3426d7">Distribute in-house apps from a web server</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web 面试题汇总(三)]]></title>
    <link href="http://DamianSheldon.github.io/blog/web-technical-interview-part-3.html"/>
    <updated>2018-09-13T10:20:22+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/web-technical-interview-part-3</id>
    <content type="html"><![CDATA[<h3>1.介绍js的基本数据类型。</h3>

<p>A:</p>

<ul>
<li>Six data types that are primitives:

<ul>
<li>Boolean. true and false.</li>
<li>null. A special keyword denoting a null value. Because JavaScript is case-sensitive, null is not the same as Null, NULL, or any other variant.</li>
<li>undefined. A top-level property whose value is not defined.</li>
<li>Number. An integer or floating point number. For example: 42 or 3.14159.</li>
<li>String. A sequence of characters that represent a text value. For example:  &ldquo;Howdy&rdquo;</li>
<li>Symbol (new in ECMAScript 2015). A data type whose instances are unique and immutable.</li>
</ul>
</li>
<li>and Object</li>
</ul>


<h3>2.介绍js有哪些内置对象？</h3>

<h3>3.说几条写JavaScript的基本规范？</h3>

<p>A:</p>

<ul>
<li>总是使用var声明变量</li>
<li>行末别忘了分号</li>
<li>使用标准而不是不标准的功能</li>
<li>使用驼峰命名（如：camelCaseNames）以及大写的常量（如：UPPERCASE），避免使用const关键字，因为IE不支持</li>
<li>使用命名空间技术</li>
<li>避免eval()除非反序列化（奇怪的是JSON解析并未提及）</li>
<li>避免对象上使用with(), 数组使用for in</li>
<li>使用对象以及数组字面量而不是更冗长的声明</li>
<li>要知道truthy和falsy规则</li>
<li>JavaScript资源中不使用IE条件注释</li>
<li>不修改内置对象的原型——这会让人颜面扫地，因为这是让JavaScript更加强大的功能之一，但你知道这会导致问题</li>
<li>小心使用闭包以及不要循环引用</li>
<li>同样，小心使用”this”</li>
</ul>


<p>Reference:<a href="https://www.zhangxinxu.com/wordpress/2012/07/google-html-css-javascript-style-guides/">翻译：谷歌HTML、CSS和JavaScript风格规范</a></p>

<h3>4.JavaScript原型，原型链 ? 有什么特点？</h3>

<p>A:</p>

<ul>
<li>原型：每个对象都有一个原型对象，它充当继承方法和属性来源的模板对象。</li>
<li>原型链：对象的原型对象也可能有原型，依此类推，便形成原型链。</li>
<li>特点：强大而灵活。</li>
</ul>


<!--more-->


<h3>5.JavaScript有几种类型的值？，你能画一下他们的内存图吗？</h3>

<p>A:</p>

<ul>
<li>栈类型：Undefined，Null，Boolean，Number、String</li>
<li>堆类型：对象、数组和函数</li>
</ul>


<h3>6.如何将字符串转化为数字，例如'12.3b'?</h3>

<p>A:<code>parseFloat('12.3b');</code></p>

<h3>7.如何将浮点数点左边的数每三位添加一个逗号，如12000000.11转化为12,000,000.11?</h3>

<p>A:</p>

<ul>
<li>方法一：使用正则表达式, <code>String(Number).replace(/(\d)(?=(\d{3})+$)/g, "$1,");</code></li>
<li>方法二：使用toLocaleString()方法, Number.toLocaleString(&lsquo;en-US&rsquo;);</li>
</ul>


<p>Reference:<a href="https://www.zhangxinxu.com/wordpress/2017/09/web-page-comma-number/">请使用千位分隔符(逗号)表示web网页中的大数字</a></p>

<h3>8.如何实现数组的随机排序？</h3>

<p>A:Fisher–Yates Shuffle,</p>

<pre><code>function shuffle(array) {
  var m = array.length, t, i;

  // While there remain elements to shuffle…
  while (m) {

    // Pick a remaining element…
    i = Math.floor(Math.random() * m--);

    // And swap it with the current element.
    t = array[m];
    array[m] = array[i];
    array[i] = t;
  }

  return array;
}
</code></pre>

<p>Reference:<a href="https://bost.ocks.org/mike/shuffle/">Fisher–Yates Shuffle</a><br/>
<a href="https://www.h5jun.com/post/array-shuffle.html">数组的完全随机排列</a></p>

<h3>9.Javascript如何实现继承？</h3>

<p>A:Javascript 使用原型链实现继承。</p>

<h3>10.JavaScript继承的几种实现方式？</h3>

<p>A:</p>

<ol>
<li>Prototype Chaning</li>
<li>Constructor Stealing</li>
<li>Combination Inheritance</li>
<li>Prototypal Inheritance</li>
<li>Parasitic Inheritance</li>
<li>Parasitic Combination Inheritance</li>
</ol>


<pre><code>// 1. Prototype Chaning
function SuperType() {
    this.property = true;
}
SuperType.prototype.getSuperValue = function () {
    return this.property;
};
function SubType() {
    this.subproperty = false;
}
//inherit from SuperType 
SubType.prototype = new SuperType();
SubType.prototype.getSubValue = function () {
    return this.subproperty;
};
var instance = new SubType();
alert(instance.getSuperValue()); //true

// 2. Constructor Stealing
function SuperType() {
    this.colors = ["red", "blue", "green"];
}
function SubType() {
    //inherit from SuperType 
    SuperType.call(this);
}
var instance1 = new SubType();
instance1.colors.push("black");

alert(instance1.colors); //”red,blue,green,black”
var instance2 = new SubType();
alert(instance2.colors); //”red,blue,green”

// 3. Combination Inheritance
function SuperType(name) {
    this.name = name;
    this.colors = ["red", "blue", "green"];
}
SuperType.prototype.sayName = function () {
    alert(this.name);
};

function SubType(name, age) {
    //inherit properties 
    SuperType.call(this, name);
    this.age = age;
}
//inherit methods
SubType.prototype = new SuperType();
SubType.prototype.sayAge = function () {
    alert(this.age);
};
var instance1 = new SubType("Nicholas", 29);
instance1.colors.push("black"); alert(instance1.colors); //”red,blue,green,black” 
instance1.sayName(); //”Nicholas”; 
instance1.sayAge(); //29

var instance2 = new SubType("Greg", 27);
alert(instance2.colors); //”red,blue,green” 
instance2.sayName(); //”Greg”; 
instance2.sayAge(); //27

// 4. Prototypal Inheritance
function object(o) {
    function F() { }
    F.prototype = o;
    return new F();
}

var person = {
    name: "Nicholas",
    friends: ["Shelby", "Court", "Van"]
};
var anotherPerson = object(person);
anotherPerson.name = "Greg";
anotherPerson.friends.push("Rob");

var yetAnotherPerson = object(person);
yetAnotherPerson.name = "Linda";
yetAnotherPerson.friends.push("Barbie");
alert(person.friends); //”Shelby,Court,Van,Rob,Barbie”

// 5. Parasitic Inheritance
function createAnother(original) {
    //create a new object by calling a function
    var clone = object(original);
    //augment the object in some way
    clone.sayHi = function () {
        alert("Hi");
    }
    //return the object
    return clone;
}

var person = {
    name: "Nicholas",
    friends: ["Shelby", "Court", "Van"]
};
var anotherPerson = createAnother(person);
anotherPerson.sayHi(); //”hi”

// 6. Parasitic Combination Inheritance
function inheritPrototype(subType, superType) {
    var prototype = object(superType.prototype); //create object
    prototype.constructor = subType; //augment object
    subType.prototype = prototype;//assign object
}

function SuperType(name) {
    this.name = name;
    this.colors = ["red", "blue", "green"];
}
SuperType.prototype.sayName = function () {
    alert(this.name);
};
function SubType(name, age) {
    SuperType.call(this, name);
    this.age = age;
}

inheritPrototype(SubType, SuperType);

SubType.prototype.sayAge = function () {
    alert(this.age);
};
</code></pre>

<p>Prototype Chaning:
The major issue revolves around prototypes that contain reference values.
A second issue with prototype chaining is that you cannot pass arguments into the supertype constructor when the subtype instance is being created.
Due to this and the aforementioned issue with reference values on the prototype, prototype chaining is rarely used alone.</p>

<p>Constructor Stealing:
The downside to using constructor stealing exclusively is that it introduces the same problems as the constructor pattern for custom types: methods must be defined inside the constructor, so there’s no function reuse. Further, methods defined on the supertype’s prototype are not accessible on the subtype, so all types can use only the constructor pattern. Due to these issues, constructor stealing is rarely used on its own.</p>

<p>Combination Inheritance:
Addressing the downsides of both prototype chaining and constructor stealing, combination inheritance is the most frequently used inheritance pattern in JavaScript. It also preserves the behavior of instanceof and isPrototypeOf() for identifying the composition of objects.</p>

<p>Prototypal Inheritance:
Prototypal inheritance is useful when there is no need for the overhead of creating separate constructors but you still need an object to behave similarly to another. Keep in mind that properties containing reference values will always share those values, similar to using the prototype pattern.</p>

<p>Parasitic Inheritance:
Keep in mind that adding functions to objects using parasitic inheritance leads to inefficiencies related to function reuse, similar to the constructor pattern.</p>

<p>Parasitic Combination Inheritance:
Parasitic combination inheritance is considered the most optimal inheritance paradigm for reference types.</p>

<p>Reference: JavaScript 高级程序设计</p>

<h3>11.javascript创建对象的几种方式？</h3>

<p>A:</p>

<ul>
<li>declare an object literal</li>
<li>use a constructor function</li>
<li>use the Object() constructor </li>
<li>use the create() method</li>
</ul>


<pre><code class="js">// declare an object literal
var person = {
  name: ['Bob', 'Smith'],
  age: 32,
  gender: 'male',
  interests: ['music', 'skiing'],
  bio: function() {
    alert(this.name[0] + ' ' + this.name[1] + ' is ' + this.age + ' years old. He likes ' + this.interests[0] + ' and ' + this.interests[1] + '.');
  },
  greeting: function() {
    alert('Hi! I\'m ' + this.name[0] + '.');
  }
};

// use a constructor function
function Person(name) {
  this.name = name;
  this.greeting = function() {
    alert('Hi! I\'m ' + this.name + '.');
  };
}

var person1 = new Person('Bob');
var person2 = new Person('Sarah');

// use the Object() constructor
var person1 = new Object();
person1.name = 'Chris';
person1['age'] = 38;
person1.greeting = function() {
  alert('Hi! I\'m ' + this.name + '.');
};

// use the create() method
var person2 = Object.create(person1);
</code></pre>

<p>Reference:<a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object-oriented_JS">Object-oriented JavaScript for beginners</a></p>

<h3>12.Javascript作用链域?</h3>

<p>A:
When code is executed in a context, a scope chain of variable objects is created. The purpose of the scope chain is to provide ordered access to all variables and functions that an execution context has access to. The front of the scope chain is always the variable object of the context whose code is executing.</p>

<p>If the context is a function, then the activation object is used as the variable object. An activation object starts with a single variable defined called arguments (this doesn’t exist for the global context). The next variable object in the chain is from the containing context, and the next after that is from the next containing context. This pattern continues until the global context is reached; the global context’s variable object is always the last of the scope chain.</p>

<h3>13.谈谈This对象的理解。</h3>

<p>A:In most cases, the value of this is determined by how a function is called. </p>

<ul>
<li>Global Context (1)</li>
<li>Function context

<ul>
<li>Simple call (2.1)</li>
<li>The bind method (2.2)</li>
<li>Arrow functions (2.3)</li>
<li>As an object method (2.4)</li>
<li>As a constructor Section (2.5)</li>
<li>As a DOM event handler (2.6)</li>
<li>In an inline event handler (2.7)</li>
</ul>
</li>
</ul>


<p>1) In the global execution context (outside of any function), this refers to the global object whether in strict mode or not.</p>

<p>2.1) If the value of this is not set by the call in non-strict mode, this will default to the global object, which is window in a browser. In strict mode, if this was not defined by the execution context, it remains undefined.</p>

<p>2.2) ECMAScript 5 introduced Function.prototype.bind. Calling f.bind(someObject)creates a new function with the same body and scope as f, but where this occurs in the original function, in the new function it is permanently bound to the first argument of bind, regardless of how the function is being used.</p>

<p>2.3) In arrow functions, this retains the value of the enclosing lexical context's this. In global code, it will be set to the global object.</p>

<p>2.4) When a function is called as a method of an object, its this is set to the object the method is called on.</p>

<p>2.5) When a function is used as a constructor (with the new keyword), its this is bound to the new object being constructed.</p>

<p>2.6) When a function is used as an event handler, its this is set to the element the event fired from (some browsers do not follow this convention for listeners added dynamically with methods other than addEventListener).</p>

<p>2.7) When the code is called from an inline on-event handler, its this is set to the DOM element on which the listener is placed.</p>

<p>Reference:<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this">this</a></p>

<h3>14.eval是做什么的？</h3>

<p>A:The eval() function evaluates JavaScript code represented as a string.</p>

<h3>15.什么是window对象? 什么是document对象?</h3>

<p>A:</p>

<ul>
<li>The Window interface represents a window containing a DOM document;</li>
<li>The Document interface represents any web page loaded in the browser and serves as an entry point into the web page&rsquo;s content, which is the DOM tree. </li>
</ul>


<h3>16.null，undefined 的区别？</h3>

<p>A:</p>

<ul>
<li>The value null represents the intentional absence of any object value.</li>
<li>The global undefined property represents the primitive value undefined.</li>
</ul>


<h3>17.写一个通用的事件侦听器函数。</h3>

<h3>18.<code>["1", "2", "3"].map(parseInt)</code> 答案是多少？</h3>

<p>A:答案是[1, NaN, NaN]。</p>

<p>原因:<br/>
先看下 map 和 parseInt 这两个 API:</p>

<pre><code>
var new_array = arr.map(function callback(currentValue[, index[, array]]) {
    // Return element for new_array
}[, thisArg])

parseInt(string, radix);
string
The value to parse. If the string argument is not a string, then it is converted to a string (using the ToString abstract operation). Leading whitespace in the string argument is ignored.
radix
An integer between 2 and 36 that represents the radix (the base in mathematical numeral systems) of the above mentioned string. 
</code></pre>

<p>从 API 我们知道，<code>["1", "2", "3"].map(parseInt)</code> 会转化为依次调用 <code>parseInt('1', 0); parseInt('2', 1); parseInt('3', 2);</code>。</p>

<p>上面提到 radix 的范围是[2, 36]，如果 radix 不在这个范围自然是不支持转换，结果就是 NaN。但它对 0 进行了特殊处理，描述如下:</p>

<blockquote><p>If radix is undefined or 0 (or absent), JavaScript assumes the following:</p>

<ul>
<li>If the input string begins with &ldquo;0x&rdquo; or &ldquo;0X&rdquo;, radix is 16 (hexadecimal) and the remainder of the string is parsed.</li>
<li>If the input string begins with &ldquo;0&rdquo;, radix is eight (octal) or 10 (decimal).  Exactly which radix is chosen is implementation-dependent.  ECMAScript 5 specifies that 10 (decimal) is used, but not all browsers support this yet.  For this reason always specify a radix when using parseInt.</li>
<li>If the input string begins with any other value, the radix is 10 (decimal).</li>
</ul>
</blockquote>

<p>所以, <code>parseInt('1', 0)</code> 的结果是 1， <code>parseInt('2', 1)</code> 的结果是 NaN。</p>

<p>最后我们来看 <code>parseInt('3', 2)</code>，radix 是 2，也就是将字符串按二进制转换，二进制只有数字 0 和 1，那么 3 肯定是转换不了，结果就是 NaN。</p>

<h3>19.事件是？IE与火狐的事件机制有什么区别？ 如何阻止冒泡？</h3>

<p>A:</p>

<blockquote><p>In computing, an event is an action or occurrence recognized by software, often originating asynchronously from the external environment, that may be handled by the software. &ndash;wikipedia</p></blockquote>

<p>事件是被软件识别的动作或发生的事。</p>

<p>IE与火狐的事件机制有什么区别？<br/>
IE的事件机制是冒泡，而火狐同时支持冒泡和捕获；冒泡是指事件从最具体的元素接收，然后逐级向上传播，直到不具体的节点（通常指文档节点）；而捕获相反，它是从不具体的节点开始，逐步到最具体的节点；</p>

<p>如何阻止冒泡？
阻止事件冒泡：<code>e.stopPropagation()</code>，旧IE则是使用 <code>e.cancelBubble = true；</code></p>

<h3>20.什么是闭包（closure），为什么要用它？</h3>

<p>A:</p>

<blockquote><p>Closures are self-contained blocks of functionality that can be passed around and used in your code. &ndash;The Swift Programming Language</p></blockquote>

<p>闭包是自包含的功能块，它可以在你的代码中传递和使用。</p>

<p>为什么要用它？<br/>
当我们使用高阶函数或实际需要交换状态时，闭包优于其他方法。</p>

<blockquote><p>First of all, there is nothing that is impossible without using closures. You can always replace a closure by an object implementing a specific interface. It&rsquo;s only a matter of brevity and reduced coupling.
Second, keep in mind that closures are often used inappropriately, where a simple function reference or other construct would be more clear. You shouldn&rsquo;t take every example you see as a best practice.
Where closures really shine over other constructs is when using higher-order functions, when you actually need to communicate state, and you can make it a one-liner.</p></blockquote>

<p>Reference:<a href="https://softwareengineering.stackexchange.com/questions/285941/why-would-a-program-use-a-closure">Why would a program use a closure?</a></p>

<h3>21.javascript 代码中的<code>"use strict";</code>是什么意思 ? 使用它区别是什么？</h3>

<p>A:javascript 代码中的<code>"use strict";</code>是开启严格模式的意思。</p>

<p>使用它的区别:</p>

<ul>
<li>将问题直接转化为错误（如语法错误或运行时错误）;</li>
<li>简化了如何为给定名称的特定变量计算;</li>
<li>简化了 eval 以及 arguments;</li>
<li>将写"安全“JavaScript的步骤变得更简单;</li>
<li>改变了预测未来ECMAScript行为的方式。</li>
</ul>


<p>Reference:<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode">严格模式</a></p>

<h3>22.如何判断一个对象是否属于某个类？</h3>

<p>A:使用 instanceof 操作符。</p>

<h3>23.new操作符具体干了什么呢?</h3>

<p>A:When the code new Foo(&hellip;) is executed, the following things happen:</p>

<ol>
<li>A new object is created, inheriting from Foo.prototype.</li>
<li>The constructor function Foo is called with the specified arguments, and with this bound to the newly created object. new Foo is equivalent to newFoo(), i.e. if no argument list is specified, Foo is called without arguments.</li>
<li>The object returned by the constructor function becomes the result of the whole new expression. If the constructor function doesn&rsquo;t explicitly return an object, the object created in step 1 is used instead. (Normally constructors don&rsquo;t return a value, but they can choose to do so if they want to override the normal object creation process.)</li>
</ol>


<pre><code class="js"> var obj  = {};
 obj.__proto__ = Base.prototype;
 Base.call(obj);
</code></pre>

<h3>24.用原生JavaScript的实现过什么功能吗？</h3>

<h3>25.Javascript中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？</h3>

<p>A:<code>hasOwnProperty()</code>.</p>

<h3>26.JSON 的了解？</h3>

<h3>27.<code>[].forEach.call($$("*"),function(a){a.style.outline="1px solid #"+(~~(Math.random()*(1&lt;&lt;24))).toString(16)})</code> 能解释一下这段代码的意思吗？</h3>

<p>A:给所有的元素加上一个一像素颜色随机的边框。</p>

<h3>28.js延迟加载的方式有哪些？</h3>

<p>A:</p>

<ul>
<li>使用 defer 属性</li>
<li>使用 async 属性</li>
<li>动态创建DOM方式，例如，监听 onload 事件，定时之后再向 head 添加 script 标签；或 ajax 下载后再添加 （用得最多）</li>
<li>js 放在 body 最后</li>
</ul>


<h3>29.Ajax 是什么? 如何创建一个Ajax？</h3>

<p>A: AJAX 是 &ldquo;Asynchronous JavaScript and XML&rdquo; 的简称，指的是一套综合了多项技术的浏览器端网页开发技术。</p>

<p>如何创建一个Ajax？</p>

<pre><code class="js">var xmlHttp;
if (typeof XMLHttpRequest != "undefined") {
    xmlHttp = new XMLHttpRequest();
} else if (window.ActiveXObject) {
    var aVersions = ["Msxml2.XMLHttp.5.0", "Msxml2.XMLHttp.4.0", "Msxml2.XMLHttp.3.0", "Msxml2.XMLHttp", "Microsoft.XMLHttp"];
    for (var i = 0; i &lt; aVersions.length; i++) {
        try {
            xmlHttp = new ActiveXObject(aVersions[i]);
            break;
        } catch (e) {}
    }
}
</code></pre>

<h3>30.Ajax 解决浏览器缓存问题？</h3>

<p>A:</p>

<ol>
<li>在ajax发送请求前加上 anyAjaxObj.setRequestHeader(&ldquo;If-Modified-Since&rdquo;,&ldquo;0&rdquo;)。</li>
<li>在ajax发送请求前加上 anyAjaxObj.setRequestHeader(&ldquo;Cache-Control&rdquo;,&ldquo;no-cache&rdquo;)。</li>
<li>在URL后面加上一个随机数： &ldquo;fresh=&rdquo; + Math.random();。</li>
<li>在URL后面加上时间戳："nowtime=&ldquo; + new Date().getTime();。</li>
<li>如果是使用jQuery，直接这样就可以了 $.ajaxSetup({cache:false})。这样页面的所有ajax都会执行这条语句就是不需要保存缓存记录。</li>
</ol>


<h3>31.同步和异步的区别?</h3>

<h3>32.如何解决跨域问题?</h3>

<p>A:跨域通信的方法大致可以分为两类：</p>

<ul>
<li><p>一类是Hack，比如通过title, navigation等对象传递信息，JSONP可以说是一个最优秀的Hack。</p>

<ul>
<li>设置 document.domain</li>
<li>有src的标签</li>
<li>JSONP</li>
<li>navigation 对象</li>
</ul>
</li>
<li><p>另一类是HTML5支持，一个是Access-Control-Allow-Origin响应头，一个是window.postMessage。</p>

<ul>
<li>跨域资源共享（CORS）</li>
<li>window.postMessage</li>
</ul>
</li>
</ul>


<p>Reference:<a href="https://harttle.land/2015/10/10/cross-origin.html">Web开发中跨域的几种解决方案</a></p>

<h3>33.页面编码和被请求的资源编码如果不一致如何处理？</h3>

<p>A:一个未经验证的想法:设置 <code>XMLHttpRequest.responseType = "blob";</code>，这样
<code>XMLHttpRequest.response</code> 的结果是 Blob,之后利用 <code>instanceOfFileReader.readAsText(blob[, encoding]);</code> 得到想要的结果。</p>

<h3>34.服务器代理转发时，该如何处理cookie？</h3>

<p>A:</p>

<h3>35.模块化开发怎么做?</h3>

<h3>36.AMD（Modules/Asynchronous-Definition）、CMD（Common Module Definition）规范区别？</h3>

<h3>37.requireJS的核心原理是什么？（如何动态加载的？如何避免多次加载的？如何 缓存的？）</h3>

<h3>38.JS模块加载器的轮子怎么造，也就是如何实现一个模块加载器？</h3>

<h3>39.谈一谈你对ECMAScript6的了解？</h3>

<h3>40.ECMAScript6 怎么写class么，为什么会出现class这种东西?</h3>

<h3>41.documen.write和 innerHTML的区别?</h3>

<p>A:document.write只能重绘整个页面，innerHTML可以重绘页面的一部分。</p>

<h3>42.DOM操作——怎样添加、移除、移动、复制、创建和查找节点?</h3>

<p>A:</p>

<ul>
<li>添加：<code>appendChild()</code></li>
<li>移除：<code>removeChild()</code></li>
<li>移动：<code>appendChild()</code>， If the given child is a reference to an existing node in the document, appendChild() moves it from its current position to the new position </li>
<li>复制：<code>cloneNode()</code></li>
<li>创建：<code>createDocumentFragment(), createElement(), createTextNode()</code></li>
<li>查找：<code>getElementById(), getElementsByClassName(), getElementsByName(), getElementsByTagName(), getElementsByTagNameNS()</code></li>
</ul>


<h3>43.<code>.call()</code> 和 <code>.apply()</code> 的区别？</h3>

<p>A:While the syntax of this function is almost identical to that of apply(), the fundamental difference is that call() accepts an argument list, while apply() accepts a single array of arguments.</p>

<h3>44.数组和对象有哪些原生方法，列举一下？</h3>

<h3>45.JS 怎么实现一个类?怎么实例化这个类?</h3>

<h3>46.JavaScript中的作用域与变量声明提升？</h3>

<h3>47.如何编写高性能的Javascript？</h3>

<h3>48.那些操作会造成内存泄漏？</h3>

<p>A:</p>

<ul>
<li>Accidental global variables</li>
<li>Forgotten timers or callbacks</li>
<li>Out of DOM references</li>
<li>Closures</li>
</ul>


<p>Reference:<a href="https://auth0.com/blog/four-types-of-leaks-in-your-javascript-code-and-how-to-get-rid-of-them/">4 Types of Memory Leaks in JavaScript and How to Get Rid Of Them</a></p>

<h3>59.jQuery的源码看过吗？能不能简单概况一下它的实现原理？</h3>

<p>A:jQuery 主要是利用 js 原型继承的灵活性，将 DOM，Ajax 等操作包裹到函数中来实现的。</p>

<h3>50.jQuery.fn的init方法返回的this指的是什么对象？为什么要返回this？</h3>

<p>A:返回的就是 jQuery 对象。因为 new 表达式之后的constructor返回（return）一个引用对象（数组，对象，函数等），都将覆盖new创建的匿名对象，如果返回（return）一个原始类型（无return时其实为return原始类型undefined），那么就返回new创建的匿名对象。为了屏蔽这种差异，简化代码，支持链式调用等原因，所以显示的返回了 jQuery 对象。</p>

<p>Reference:<a href="https://www.zhangxinxu.com/wordpress/2013/07/jquery-%E5%8E%9F%E7%90%86-%E6%9C%BA%E5%88%B6/">jQuery诞生记-原理与机制</a></p>

<h3>51.jQuery中如何将数组转化为JSON字符串，然后再转化回来？</h3>

<p>A:可以使用浏览器内建 JSON 对象的 parse，stringify 方法。如果浏览器不支持这些方法，jQuery 1.4.1 到 3.0 版本的 parseJSON 方法可以解析 JSON 字符串；如果要编码的话则可以通过引入其他 js JSON 库来完成。</p>

<h3>52.jQuery 的属性拷贝(extend)的实现原理是什么，如何实现深拷贝？</h3>

<p>A:jQuery 的属性拷贝(extend)的实现原理是利用 js 的动态性，遍历源对象的属性并将其添加到目标对象上。利用递归遍历可以实现深拷贝。</p>

<h3>53.jQuery.extend 与 jQuery.fn.extend 的区别？</h3>

<p>A:</p>

<ul>
<li>jQuery.extend: Merge the contents of two or more objects together into the first object.</li>
<li>jQuery.fn.extend: Merge the contents of an object onto the jQuery prototype to provide new jQuery instance methods.</li>
</ul>


<p>从 jQuery API 文档对它们的介绍，我们可以知道 jQuery.extend 侧重将两个或多个对象合并到第一个对象；而 jQuery.fn.extend 是将对象合并到 jQuery 原型上来提供新的 jQuery 实例方法。</p>

<h3>54.jQuery 的队列是如何实现的？队列可以用在哪些地方？</h3>

<p>A:jQuery 的队列是利用数组实现的。队列可以用在实现动画效果上。</p>

<blockquote><p>Queues are the foundation for all animations in jQuery, they allow a series functions to be executed asynchronously on an element. </p></blockquote>

<h3>55.谈一下jQuery中的bind(),live(),delegate(),on()的区别？</h3>

<p>A:</p>

<p>bind():Attach a handler to a specific element.</p>

<p>live():All <code>.live()</code> event handlers are bound to the document root by default.</p>

<p>delegate():The <code>.delegate()</code> method provides a clear difference between the context of where to attach delegated event handler, and the selector to match when the event bubbles up to the delegated element.</p>

<p>on():The .on() method gives us a semantic approach for creating directly bound events as well as delegated events. It eliminates the need to use the deprecated .bind(), .live(), and .delegate() methods, providing a single API for creating events.</p>

<p>Reference:<a href="https://learn.jquery.com/events/history-of-events/">History of jQuery Events</a></p>

<h3>56.jQuery一个对象可以同时绑定多个事件，这是如何实现的？</h3>

<h3>57.是否知道自定义事件。jQuery里的fire函数是什么意思，什么时候用？</h3>

<p>A:</p>

<pre><code>// Create the event.
var event = document.createEvent('Event');

// Define that the event name is 'build'.
event.initEvent('build', true, true);

// Listen for the event.
elem.addEventListener('build', function (e) {
  // e.target matches elem
}, false);

// target can be any Element or other EventTarget.
elem.dispatchEvent(event);
</code></pre>

<p><code>callbacks.fire()</code>:Call all of the callbacks with the given arguments.</p>

<h3>58.jQuery 是通过哪个方法和 Sizzle 选择器结合的？</h3>

<p>A:<code>jQuery.fn.find()</code></p>

<h3>59.针对 jQuery性能的优化方法？</h3>

<h3>60.jQuery与jQuery UI 有啥区别？</h3>

<p>A:</p>

<ul>
<li><p>jQuery is a fast, small, and feature-rich JavaScript library. It makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers. </p></li>
<li><p>jQuery UI is a curated set of user interface interactions, effects, widgets, and themes built on top of the jQuery JavaScript Library.</p></li>
</ul>


<h3>61.jQuery和Zepto的区别？各自的使用场景？</h3>

<h3>62.针对 jQuery 的优化方法？</h3>

<h3>63.Zepto的点透问题如何解决？</h3>

<h3>64.需求：实现一个页面操作不会整页刷新的网站，并且能在浏览器前进、后退时正确响应。给出你的技术实现方案？</h3>

<p>A:实际上就是如何去实现 SPA。</p>

<p>Reference:<a href="https://medium.com/@pshrmn/demystifying-single-page-applications-3068d0555d46">How Single-Page Applications Work</a></p>

<h3>65.如何判断当前脚本运行在浏览器还是node环境中？</h3>

<h3>66.移动端最小触控区域是多大？</h3>

<h3>67.jQuery 的 slideUp动画 ，如果目标元素是被外部事件驱动, 当鼠标快速地连续触发外部元素事件, 动画会滞后的反复执行，该如何处理呢?</h3>

<h3>68.把 Script 标签 放在页面的最底部的body封闭之前 和封闭之后有什么区别？浏览器会如何解析它们？</h3>

<h3>69.移动端的点击事件的有延迟，时间是多久，为什么会有？ 怎么解决这个延时？（click 有 300ms 延迟,为了实现safari的双击事件的设计，浏览器要知道你是不是要双击操作。）</h3>

<h3>70.解释JavaScript中的作用域与变量声明提升？</h3>

<h3>71.Node.js的适用场景？</h3>

<h3>72.什么是“前端路由”?什么时候适合使用“前端路由”? “前端路由”有哪些优点和缺点?</h3>

<h3>73.检测浏览器版本有哪些方式？</h3>

<p>A:</p>

<ul>
<li>Navigator.appVersion</li>
<li>Navigator.userAgent</li>
</ul>


<h3>74.What is a Polyfill?</h3>

<h3>75.做的项目中，有没有用过或自己实现一些 polyfill 方案（兼容性处理方案）？</h3>

<h3>76.我们给一个dom同时绑定两个点击事件，一个用捕获，一个用冒泡。会执行几次事件，会先执行冒泡还是捕获？</h3>

<p>A:按照W3C的标准，先发生捕获事件，后发生冒泡事件。</p>

<h3>77.使用JS实现获取文件扩展名？</h3>

<h3>78.Webpack热更新实现原理?</h3>

<h3>79.请介绍一下JS之事件节流？</h3>

<p>A:事件节流就是降低事件响应的速率。</p>

<blockquote><p>In software, a throttling process, or a throttling controller as it is sometimes called, is a process responsible for regulating the rate at which application processing is conducted, either statically or dynamically.</p></blockquote>

<h3>80.什么是JS的函数防抖？</h3>

<p>A:当调用动作过n毫秒后，才会执行该动作，若在这n毫秒内又调用此动作则将重新计算执行时间。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web 面试题汇总(二)]]></title>
    <link href="http://DamianSheldon.github.io/blog/web-technical-interview-part-2.html"/>
    <updated>2018-09-05T15:52:44+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/web-technical-interview-part-2</id>
    <content type="html"><![CDATA[<h3>1.介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？</h3>

<p>A:每个元素被表示为一个矩形的方框，框的内容、内边距、边界和外边距像洋葱的膜那样，一层包着一层构建起来。</p>

<p>低版本IE的盒子模型的宽度包括框的内容、内边距和边界。</p>

<h3>2.CSS选择符有哪些？哪些属性可以继承？</h3>

<p>A:</p>

<ul>
<li><em>简单选择器</em>（Simple selectors）：通过元素类型、class 或 id 匹配一个或多个元素。</li>
<li><em>属性选择器</em>（Attribute selectors）：通过 属性 / 属性值 匹配一个或多个元素。</li>
<li><em>伪类</em>（Pseudo-classes）：匹配处于确定状态的一个或多个元素，比如被鼠标指针悬停的元素，或当前被选中或未选中的复选框，或元素是DOM树中一父节点的第一个子节点。</li>
<li><em>伪元素</em>（Pseudo-elements）:匹配处于相关的确定位置的一个或多个元素，例如每个段落的第一个字，或者某个元素之前生成的内容。 </li>
<li><em>组合器</em>（Combinators）：这里不仅仅是选择器本身，还有以有效的方式组合两个或更多的选择器用于非常特定的选择的方法。例如，你可以只选择divs的直系子节点的段落，或者直接跟在headings后面的段落。</li>
<li><em>多重选择器</em>（Multiple selectors）：这些也不是单独的选择器；这个思路是将以逗号分隔开的多个选择器放在一个CSS规则下面， 以将一组声明应用于由这些选择器选择的所有元素。</li>
</ul>


<p>哪些属性可以继承？</p>

<ul>
<li>所有元素可继承：visibility和cursor。</li>
<li>内联元素可继承：letter-spacing、word-spacing、white-space、line-height、color、font、font-family、font-size、font-style、font-variant、font-weight、text-decoration、text-transform、direction。</li>
<li>终端块状元素可继承：text-indent和text-align。</li>
<li>列表元素可继承：list-style、list-style-type、list-style-position、list-style-image。</li>
<li>表格元素可继承：border-collapse。</li>
</ul>


<h3>3.CSS优先级算法如何计算？</h3>

<p>A:CSS根据规则的重要性、专用性和源代码次序来计算优先级。</p>

<p>重要性和源代码次序相对简单，专用性是用四种不同的值（或组件）来衡量的，它们可以被认为是千位，百位，十位和个位:</p>

<ol>
<li>千位：如果声明是在style 属性中该列加1分（这样的声明没有选择器，所以它们的专用性总是1000。）否则为0。</li>
<li>百位：在整个选择器中每包含一个ID选择器就在该列中加1分。</li>
<li>十位：在整个选择器中每包含一个类选择器、属性选择器、或者伪类就在该列中加1分。</li>
<li>个位：在整个选择器中每包含一个元素选择器或伪元素就在该列中加1分。</li>
</ol>


<!--more-->


<h3>4.如何居中div？</h3>

<p>A:</p>

<ul>
<li>水平居中</li>
<li>水平垂直居中</li>
</ul>


<h4>水平居中</h4>

<p>给div设置一个宽度，然后添加margin:0 auto属性。</p>

<p><figure class='code'><figcaption><span>html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>div{
</span><span class='line'>    width:200px;
</span><span class='line'>    margin:0 auto;
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<h4>水平垂直居中</h4>

<ul>
<li>容器的宽高确定</li>
</ul>


<p><figure class='code'><figcaption><span>css </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>// 确定容器的宽高 宽500 高 300 的层
</span><span class='line'>// 设置层的外边距
</span><span class='line'>
</span><span class='line'>div {
</span><span class='line'>    position: relative;     /* 相对定位或绝对定位均可 */
</span><span class='line'>    width:500px;
</span><span class='line'>    height:300px;
</span><span class='line'>    top: 50%;
</span><span class='line'>    left: 50%;
</span><span class='line'>    margin: -150px 0 0 -250px;          /* 外边距为自身宽高的一半 */
</span><span class='line'>    background-color: pink;         /* 方便看效果 */
</span><span class='line'> }
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<ul>
<li>容器的宽高未知</li>
</ul>


<p><figure class='code'><figcaption><span>css </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code> // 未知容器的宽高，利用 `transform` 属性
</span><span class='line'>
</span><span class='line'>div {
</span><span class='line'>    position: absolute;     /* 相对定位或绝对定位均可 */
</span><span class='line'>    width:500px;
</span><span class='line'>    height:300px;
</span><span class='line'>    top: 50%;
</span><span class='line'>    left: 50%;
</span><span class='line'>    transform: translate(-50%, -50%);
</span><span class='line'>    background-color: pink;         /* 方便看效果 */
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<ul>
<li>利用 flex 布局</li>
</ul>


<p><figure class='code'><figcaption><span>css </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code> // 利用 flex 布局
</span><span class='line'> // 实际使用时应考虑兼容性
</span><span class='line'>
</span><span class='line'>.container {
</span><span class='line'>    display: flex;
</span><span class='line'>    align-items: center;            /* 垂直居中 */
</span><span class='line'>    justify-content: center;        /* 水平居中 */
</span><span class='line'>
</span><span class='line'> }
</span><span class='line'>.container div {
</span><span class='line'>    width: 100px;
</span><span class='line'>    height: 100px;
</span><span class='line'>    background-color: pink;         /* 方便看效果 */
</span><span class='line'> }  
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<h3>5.display有哪些值？说明他们的作用。</h3>

<p>A:display 所有可能的值太多了，这里说下常见的:</p>

<table>
<thead>
<tr>
<th style="text-align:left;"> display </th>
<th style="text-align:left;"> 作用 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> none </td>
<td style="text-align:left;"> 元素不显示，并从文档流中移除。 </td>
</tr>
<tr>
<td style="text-align:left;"> inline </td>
<td style="text-align:left;"> 行内元素类型。默认宽度为内容宽度，不可设置宽高，同行显示。 </td>
</tr>
<tr>
<td style="text-align:left;"> inline-block </td>
<td style="text-align:left;"> 默认宽度为内容宽度，可以设置宽高，同行显示。 </td>
</tr>
<tr>
<td style="text-align:left;"> block </td>
<td style="text-align:left;"> 块类型。默认宽度为父元素宽度，可设置宽高，换行显示。 </td>
</tr>
<tr>
<td style="text-align:left;"> list-item </td>
<td style="text-align:left;"> 象块类型元素一样显示，并添加样式列表标记。 </td>
</tr>
<tr>
<td style="text-align:left;"> table </td>
<td style="text-align:left;"> 元素会作为块级表格来显示。 </td>
</tr>
</tbody>
</table>


<h3>6.position的值? relative和absolute定位原点是？</h3>

<p>A: position  = static | relative | absolute | sticky | fixed</p>

<p>relative: The element is positioned according to the normal flow of the document, and then offset relative to itself based on the values of top, right, bottom, and left.</p>

<p>absolute: The element is removed from the normal document flow, and no space is created for the element in the page layout. It is positioned relative to its closest positioned ancestor, if any; otherwise, it is placed relative to the initial containing block. Its final position is determined by the values of top, right, bottom, and left.</p>

<h3>7.请解释一下CSS3的Flexbox（弹性盒布局模型），以及适用场景？</h3>

<p>A:Flexbox is a one-dimensional layout method for laying out items in rows or columns. Items flex to fill additional space and shrink to fit into smaller spaces. </p>

<p>适用场景:</p>

<ul>
<li>Vertically centering a block of content inside its parent.</li>
<li>Making all the children of a container take up an equal amount of the available width/height, regardless of how much width/height is available.</li>
<li>Making all columns in a multiple column layout adopt the same height even if they contain a different amount of content.</li>
</ul>


<h3>8.用纯CSS创建一个三角形的原理是什么？</h3>

<p>A:采用的是均分原理。</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>.triangle{  
</span><span class='line'>     width:0;  
</span><span class='line'>     height:0;  
</span><span class='line'>     margin:0 auto;  
</span><span class='line'>     border:6px solid transparent;  
</span><span class='line'>     border-top: 6px solid red;  
</span><span class='line'> }
</span><span class='line'>
</span><span class='line'>// 第二种写法：
</span><span class='line'>
</span><span class='line'>.triangle{  
</span><span class='line'>     width:0;  
</span><span class='line'>     height:0;  
</span><span class='line'>     margin:0 auto;  
</span><span class='line'>     border-width:6px;
</span><span class='line'>     border-color:red transparent transparent transparent;
</span><span class='line'>     border-style:solid dashed dashed dashed;//为了兼容IE6，把没有的边框都设置为虚线
</span><span class='line'> }
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<h3>9.一个满屏 品 字布局 如何设计?</h3>

<p>A:方式一：上面的 div 宽100%，下面的两个 div 分别宽50%，然后用 float 或者 inline 使其不换行即可；方式二：上面的 div 宽100%，内含一个 div 水平居中，下面的div，内含两个 div,使用 absolute 定位。</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>// 方式一
</span><span class='line'>&lt;!DOCTYPE html&gt;
</span><span class='line'>&lt;html&gt;
</span><span class='line'>&lt;head&gt;
</span><span class='line'>    &lt;meta charset="utf-8"&gt;
</span><span class='line'>    &lt;title&gt;满屏品字布局&lt;/title&gt;
</span><span class='line'>    &lt;style type="text/css"&gt;
</span><span class='line'>        *{
</span><span class='line'>            margin: 0;
</span><span class='line'>            padding: 0;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        html,body{
</span><span class='line'>            height: 100%;/*此设置非常关键，因为默认的body，HTML高度为0，所以后面设置的div的高度无法用百分比显示*/
</span><span class='line'>        }       
</span><span class='line'>
</span><span class='line'>        .header{
</span><span class='line'>            height:50%; /*此步结合html,body高度为100%，解决元素相对窗口的定位问题*/
</span><span class='line'>            width: 50%;     
</span><span class='line'>            background: #ccc;           
</span><span class='line'>            margin:0 auto;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        .main{
</span><span class='line'>            width: 100%;
</span><span class='line'>            height: 50%;
</span><span class='line'>            background: #ddd;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        .main .left,.main .right{
</span><span class='line'>            float: left;/*采用float方式，对元素进行左右定位*/
</span><span class='line'>            width:50%;/*此步解决元素相对窗口的定位问题*/
</span><span class='line'>            height:100%;/*此步解决元素相对窗口的定位问题*/
</span><span class='line'>            background: yellow;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        .main .right{
</span><span class='line'>            background: green;
</span><span class='line'>        }
</span><span class='line'>    &lt;/style&gt;
</span><span class='line'>&lt;/head&gt;
</span><span class='line'>&lt;body&gt;
</span><span class='line'>&lt;div class="header"&gt;&lt;/div&gt;
</span><span class='line'>&lt;div class="main"&gt;
</span><span class='line'>    &lt;div class="left"&gt;&lt;/div&gt;
</span><span class='line'>    &lt;div class="right"&gt;&lt;/div&gt;
</span><span class='line'>&lt;/div&gt;
</span><span class='line'>&lt;/body&gt;
</span><span class='line'>&lt;/html&gt;
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>&lt;!DOCTYPE html&gt;
</span><span class='line'>&lt;html&gt;
</span><span class='line'>&lt;head&gt;
</span><span class='line'>&lt;meta charset="utf-8"&gt;
</span><span class='line'>    &lt;title&gt;满屏品字布局&lt;/title&gt;
</span><span class='line'>    &lt;style type="text/css"&gt;
</span><span class='line'>        body{  
</span><span class='line'>          height: 1200px;  
</span><span class='line'>      }  
</span><span class='line'>      .main {  
</span><span class='line'>          position: fixed;  /*此步解决元素相对窗口的定位问题*/
</span><span class='line'>          left: 0;  
</span><span class='line'>          top: 0;  
</span><span class='line'>          height: 100%;  
</span><span class='line'>          width: 100%;  
</span><span class='line'>      }  
</span><span class='line'>      .wrapper-up {  
</span><span class='line'>          height: 50%;  
</span><span class='line'>      }  
</span><span class='line'>
</span><span class='line'>      .wrapper-down {  
</span><span class='line'>          height: 50%;  
</span><span class='line'>          position: relative;  
</span><span class='line'>      }  
</span><span class='line'>      .div-square-up {  
</span><span class='line'>          width: 50%;  
</span><span class='line'>          margin: 0 auto;  
</span><span class='line'>          border: 2px solid red;  
</span><span class='line'>          height: 96%;  
</span><span class='line'>          box-sizing: border-box;  
</span><span class='line'>      }  
</span><span class='line'>
</span><span class='line'>      .div-square-left {  
</span><span class='line'>          position: absolute;  /*此步解决元素左右定位问题*/
</span><span class='line'>          left: 0;  
</span><span class='line'>          width: 48%;  
</span><span class='line'>          height: 100%;  
</span><span class='line'>          box-sizing: border-box;  
</span><span class='line'>          border: 2px solid red;  
</span><span class='line'>      }  
</span><span class='line'>
</span><span class='line'>      .div-square-right {  
</span><span class='line'>          position: absolute;   /*此步解决元素左右定位问题*/
</span><span class='line'>          right: 0;  
</span><span class='line'>          width: 48%;  
</span><span class='line'>          height: 100%;  
</span><span class='line'>          border: 2px solid red;  
</span><span class='line'>          box-sizing: border-box;  
</span><span class='line'>      }  
</span><span class='line'>    &lt;/style&gt;
</span><span class='line'>&lt;/head&gt;
</span><span class='line'>&lt;body&gt;
</span><span class='line'>    &lt;div class="main"&gt;  
</span><span class='line'>         &lt;div class="wrapper-up"&gt;  
</span><span class='line'>           &lt;div class="div-square-up"&gt;&lt;/div&gt;  
</span><span class='line'>         &lt;/div&gt;  
</span><span class='line'>         &lt;div class="wrapper-down"&gt;  
</span><span class='line'>           &lt;div class="div-square-left"&gt;&lt;/div&gt;  
</span><span class='line'>           &lt;div class="div-square-right"&gt;&lt;/div&gt;  
</span><span class='line'>         &lt;/div&gt;  
</span><span class='line'>    &lt;/div&gt; 
</span><span class='line'>&lt;/body&gt;
</span><span class='line'>&lt;/html&gt;
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<h3>10.css多列等高如何实现？</h3>

<p>A:利用padding-bottom|margin-bottom正负值相抵；
设置父容器设置超出隐藏（overflow:hidden），这样子父容器的高度就还是它里面的列没有设定padding-bottom时的高度，当它里面的任 一列高度增加了，则父容器的高度被撑到里面最高那列的高度，其他比这列矮的列会用它们的padding-bottom补偿这部分高度差。</p>

<h3>11.经常遇到的浏览器的兼容性有哪些？原因，解决方法是什么，常用hack的技巧？</h3>

<p>A:
经常遇到的浏览器的兼容性有哪些？原因，解决方法是什么?</p>

<ul>
<li>png24位的图片在iE6浏览器上出现背景，解决方案是做成PNG8.</li>
<li>浏览器默认的margin和padding不同。解决方案是加一个全局的<code>*{margin:0;padding:0;}</code>来统一。</li>
<li>IE6双边距bug:块属性标签float后，又有横行的margin情况下，在ie6显示margin比设置的大。浮动ie产生的双倍距离 <code>#box{ float:left; width:10px; margin:0 0 0 100px;}</code>，这种情况之下IE会产生20px的距离，解决方案是在float的标签样式控制中加入 ——<code>_display:inline;</code>将其转化为行内属性。利用 <code>_</code> 这个符号只有ie6会识别的渐进识别的方式，从总体中逐渐排除局部。</li>
<li>IE下,可以使用获取常规属性的方法来获取自定义属性,也可以使用getAttribute()获取自定义属性;Firefox下,只能使用getAttribute()获取自定义属性。解决方法:统一通过getAttribute()获取自定义属性。</li>
<li>IE下,even对象有x,y属性,但是没有pageX,pageY属性;Firefox下,event对象有pageX,pageY属性,但是没有x,y属性。解决方法：（条件注释）缺点是在IE浏览器下可能会增加额外的HTTP请求数。</li>
<li>超链接访问过后hover样式就不出现了 被点击访问过的超链接样式不在具有hover和active了解决方法是改变CSS属性的排列顺序:L-V-H-A :  <code>a:link {} a:visited {} a:hover {} a:active {}</code></li>
</ul>


<p>常用hack的技巧？</p>

<p>由于不同厂商的流览器或某浏览器的不同版本（如IE6-IE11,Firefox/Safari/Opera/Chrome等），对CSS的支持、解析不一样，导致在不同浏览器的环境中呈现出不一致的页面展现效果。这时，我们为了获得统一的页面效果，就需要针对不同的浏览器或不同版本写特定的CSS样式，我们把这个针对不同的浏览器/不同版本写相应的CSS code的过程，叫做CSS hack!</p>

<p>CSS Hack大致有3种表现形式：CSS属性前缀法、选择器前缀法以及IE条件注释法（即HTML头部引用if IE）。</p>

<ul>
<li>属性前缀法(即类内部Hack)：例如 IE6能识别下划线和星号，IE7能识别星号，但不能识别下划线，IE6~IE10都认识"\9"，但firefox前述三个都不能认识。</li>
<li>选择器前缀法(即选择器Hack)：例如 IE6能识别<code>*html .class{}</code>，IE7能识别<code>*+html .class{}</code>或者<code>*:first-child+html .class{}</code>。</li>
<li>IE条件注释法(即HTML条件注释Hack)(注：IE10+已经不再支持条件注释)： 这类Hack不仅对CSS生效，对写在判断语句里面的所有代码都会生效。</li>
</ul>


<p><figure class='code'><figcaption><span>css</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>.bb{
</span><span class='line'>    background-color:red;/*所有识别*/
</span><span class='line'>    background-color:#00deff\9; /*IE6、7、8识别*/
</span><span class='line'>    +background-color:#a200ff;/*IE6、7识别*/
</span><span class='line'>    _background-color:#1e0bd1;/*IE6识别*/
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<h3>12.li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？</h3>

<p>A:浏览器的默认行为是把inline元素间的空白字符（空格换行tab）渲染成一个空格，也就是我们上面的代码<code>&lt;li&gt;</code>换行后会产生换行字符，而它会变成一个空格，当然空格就占用一个字符的宽度。</p>

<p>解决办法:可以将 ul 的字符间隔消除，将 li 内的字符间隔设为默认。</p>

<p><figure class='code'><figcaption><span>css </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>.wrap ul{letter-spacing: -5px;}
</span><span class='line'>.wrap ul li{letter-spacing: normal;}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<h3>13.为什么要初始化CSS样式。</h3>

<p>A:因为浏览器的兼容问题，不同浏览器对有些标签的默认值是不同的，如果没对CSS初始化往往会出现浏览器之间的页面显示差异。</p>

<h3>14.absolute的containing block(容器块)计算方式跟正常流有什么不同？</h3>

<p>A:</p>

<p>The process for identifying the containing block depends entirely on the value of the element's position property:</p>

<ol>
<li>If the position property is static or relative, the containing block is formed by the edge of the content box of the nearest ancestor element that is a block container(such as an inline-block, block, or list-item element) or which establishes a formatting context (such as a table container, flex container, grid container, or the block container itself).</li>
<li>If the position property is absolute, the containing block is formed by the edge of the padding box of the nearest ancestor element that has a position value other than static (fixed, absolute, relative, or sticky).</li>
<li>If the position property is fixed, the containing block is established by the viewport (in the case of continuous media) or the page area (in the case of paged media).</li>
<li><p>If the position property is absolute or fixed, the containing block may also be formed by the edge of the padding box of the nearest ancestor element that has the following:</p>

<ol>
<li>A transform or perspective value other than none</li>
<li>A will-change value of transform or perspective</li>
<li>A filter  value other than none or a will-change value of filter (only works on Firefox).</li>
</ol>
</li>
</ol>


<p>Reference:<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block">Layout and the containing block</a></p>

<h3>15.CSS里的visibility属性有个collapse属性值是干嘛用的？在不同浏览器下有什么区别？</h3>

<p>A: 对于普通元素 visibility:collapse; 会将元素完全隐藏，不占据页面布局空间，与display:none;表现相同。如果目标元素为table，visibility:collapse;将table隐藏，但是会占据页面布局空间。</p>

<p>仅在Firefox下起作用,IE会显示元素,Chrome会将元素隐藏,但是占据空间.</p>

<h3>16.position跟display、margin collapse、overflow、float这些特性相互叠加后会怎么样？</h3>

<p>A:</p>

<ul>
<li>如果元素的display为none，那么元素不被渲染，position，float不起作用；</li>
<li>如果元素拥有<code>position:absolute;</code>或者<code>position:fixed;</code>属性那么元素将为绝对定位，float不起作用；</li>
<li>如果元素float属性不是none，元素会脱离文档流，根据float属性值来显示，有浮动；</li>
<li>绝对定位、inline-block属性的元素，margin不会和垂直方向上的其他元素margin折叠；</li>
</ul>


<h3>17.对BFC规范(块级格式化上下文：block formatting context)的理解？</h3>

<p>A:块格式化上下文（Block Formatting Context，BFC） 是Web页面的可视化CSS渲染的一部分，是布局过程中生成块级盒子的区域，也是浮动元素与其他元素的交互限定区域。</p>

<p>块格式化上下文包含创建它的元素内部的所有内容。块格式化上下文对浮动定位与清除浮动都很重要。浮动定位和清除浮动时只会应用于同一个BFC内的元素。浮动不会影响其它BFC中元素的布局，而清除浮动只能清除同一BFC中在它前面的元素的浮动。外边距折叠（Margin collapsing）也只会发生在属于同一BFC的块级元素之间。</p>

<p>Reference:<a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context">块格式化上下文</a></p>

<h3>18.css定义的权重</h3>

<p>A:</p>

<ol>
<li>Thousands: Score one in this column if the declaration is inside a style attribute (such declarations don&rsquo;t have selectors, so their specificity is always simply 1000.) Otherwise 0.</li>
<li>Hundreds: Score one in this column for each ID selector contained inside the overall selector.</li>
<li>Tens: Score one in this column for each class selector, attribute selector, or pseudo-class contained inside the overall selector.</li>
<li>Ones: Score one in this column for each element selector or pseudo-element contained inside the overall selector.</li>
</ol>


<h3>19.请解释一下为什么需要清除浮动？清除浮动的方式?</h3>

<p>A:清除浮动是为了清除使用浮动元素产生的影响。浮动的元素，高度会塌陷，而高度的塌陷使我们页面后面的布局不能正常显示。</p>

<p>清除浮动的方式:</p>

<ul>
<li>The clearfix hack</li>
<li>Using overflow</li>
<li>display: flow-root</li>
</ul>


<p>Reference:<a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Floats">Floats</a></p>

<h3>20.什么是外边距合并？</h3>

<p>A:外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。</p>

<h3>21.zoom:1的清除浮动原理?</h3>

<p>A:当设置了zoom的值之后，所设置的元素就会就会扩大或者缩小，高度宽度就会重新计算了，这里一旦改变zoom值时其实也会发生重新渲染，运用这个原理，也就解决了ie下子元素浮动时候父元素不随着自动扩大的问题。</p>

<h3>22.移动端的布局用过媒体查询吗？</h3>

<h3>23.使用 CSS 预处理器吗？喜欢那个？</h3>

<h3>24.CSS优化、提高性能的方法有哪些？</h3>

<p>A:</p>

<p>作者：赵望野
链接：<a href="https://www.zhihu.com/question/19886806/answer/50285495">https://www.zhihu.com/question/19886806/answer/50285495</a>
来源：知乎
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>

<ul>
<li><strong>加载性能</strong>: 这个方面相关的 best practice 太多了，网上随便找一找就是一堆资料，比如不要用 import 啊，压缩啊等等，主要是从减少文件体积、减少阻塞加载、提高并发方面入手的，任何 hint 都逃不出这几个大方向。</li>
<li><strong>选择器性能</strong>: 可以参考 GitHub 的这个分享 <a href="https://speakerdeck.com/jonrohan/githubs-css-performance%EF%BC%8C%E4%BD%86">https://speakerdeck.com/jonrohan/githubs-css-performance%EF%BC%8C%E4%BD%86</a> selector 的对整体性能的影响可以忽略不计了，selector 的考察更多是规范化和可维护性、健壮性方面，很少有人在实际工作当中会把选择器性能作为重点关注对象的，但也像 GitHub 这个分享里面说的一样——知道总比不知道好。</li>
<li><strong>渲染性能</strong>: 渲染性能是 CSS 优化最重要的关注对象。页面渲染 junky 过多？看看是不是大量使用了 text-shadow？是不是开了字体抗锯齿？CSS 动画怎么实现的？合理利用 GPU 加速了吗？什么你用了 Flexible Box Model？有没有测试换个 layout 策略对 render performance 的影响？这个方面搜索一下 CSS render performance 或者 CSS animation performance 也会有一堆一堆的资料可供参考。</li>
<li><strong>可维护性、健壮性</strong>: 命名合理吗？结构层次设计是否足够健壮？对样式进行抽象复用了吗？优雅的 CSS 不仅仅会影响后期的维护成本，也会对加载性能等方面产生影响。这方面可以多找一些 OOCSS（不是说就要用 OOCSS，而是说多了解一下）等等不同 CSS Strategy 的信息，取长补短。</li>
</ul>


<h3>25.浏览器是怎样解析CSS选择器的？</h3>

<p>A:按照从上到下，从右到左的顺序解析。</p>

<h3>26.在网页中的应该使用奇数还是偶数的字体？为什么呢？</h3>

<p>A:一般来说，由于各种终端设备的分辨率是偶数的，设计上普遍采用偶数像素体系，奇数像素体系受到排挤，主要的冲突表现在：奇数像素宽度的东西，无法在偶数像素元素内居中显示，总是要差一个像素。</p>

<h3>27.margin和padding分别适合什么场景使用？</h3>

<p>A:margin是用来隔开元素与元素的间距；padding是用来隔开元素与内容的间隔。</p>

<h3>28.抽离样式模块怎么写，说出思路，有无实践经验？</h3>

<h3>29.元素竖向的百分比设定是相对于容器的高度吗？</h3>

<p>A:如果是height的话，是相对于容器高度，如果是padding-height,margin-height则是相对于容器的宽度。</p>

<h3>30.全屏滚动的原理是什么？用到了CSS的那些属性？</h3>

<p>A:可以利用css3和div的绝对定位来实现。用到了 position, transform.</p>

<p>Reference:<a href="http://www.alloyteam.com/2015/04/quan-ping-gun-dong-xiao-guo-h5fullscreenpage-js/">全屏滚动效果</a></p>

<h3>31.什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的IE？</h3>

<p>A:Responsive web design (RWD) is an approach to web design that makes web pages render well on a variety of devices and window or screen sizes.</p>

<h3>32.视差滚动效果，如何给每页做不同的动画？（回到顶部，向下滑动要再次出现，和只出现一次分别怎么做？）</h3>

<p>A:</p>

<ul>
<li>利用background-attachment属性实现。 background-attachment: fixed || scroll || local 默认情况下，此属性取值scroll，页面滚动时，内容和背景一起运动，如果取值fixed，背景相对浏览器固定。</li>
<li>通过js控制 在页面滚动过程中，我们获取页面的scrollTop的值，根据不同参数值去设置各自scene的top值，这样滚动页面的时候，不同的速度就出来了</li>
</ul>


<p>Reference:<a href="http://www.alloyteam.com/2014/01/parallax-scrolling-love-story/">视差滚动的爱情故事</a></p>

<h3>33.<code>::before</code> 和 <code>:after</code>中双冒号和单冒号 有什么区别？解释一下这2个伪元素的作用。</h3>

<p>A: 单冒号(:)用于CSS3伪类，双冒号(::)用于CSS3伪元素。（伪元素由双冒号和伪元素名称组成）双冒号是在当前规范中引入的，用于区分伪类和伪元素。不过浏览器需要同时支持旧的已经存在的伪元素写法，比如:first-line、:first-letter、:before、:after等，而新的在CSS3中引入的伪元素则不允许再支持旧的单冒号的写法。</p>

<p>想让插入的内容出现在其它内容前，使用::before，否者，使用::after；</p>

<h3>34.如何修改chrome记住密码后自动填充表单的黄色背景 ？</h3>

<p>A:</p>

<p><figure class='code'><figcaption><span>css </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>input:-webkit-autofill, textarea:-webkit-autofill, select:-webkit-autofill {
</span><span class='line'>    background-color: rgb(250, 255, 189); /* #FAFFBD; */
</span><span class='line'>    background-image: none;
</span><span class='line'>    color: rgb(0, 0, 0);
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<h3>35.你对line-height是如何理解的？</h3>

<p>A:“行高”顾名思意指一行文字的高度。具体来说是指两行文字间基线之间的距离。</p>

<p>Reference:<a href="https://www.zhangxinxu.com/wordpress/2009/11/css%E8%A1%8C%E9%AB%98line-height%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%8F%8A%E5%BA%94%E7%94%A8/">css行高line-height的一些深入理解及应用</a></p>

<h3>36.设置元素浮动后，该元素的display值是多少？</h3>

<p>A: 自动变成了 display:block.</p>

<h3>37.怎么让Chrome支持小于12px 的文字？</h3>

<p>A:目前Chrome浏览器已经取消了最小字体限制。</p>

<h3>38.让页面里的字体变清晰，变细用CSS怎么做？</h3>

<p>A: <code>-webkit-font-smoothing: antialiased;</code></p>

<h3>39.font-style属性可以让它赋值为“oblique” oblique是什么意思？</h3>

<p>A:倾斜的字体样式</p>

<h3>40.position:fixed;在android下无效怎么处理？</h3>

<h3>41.如果需要手动写动画，你认为最小时间间隔是多久，为什么？</h3>

<p>A:多数显示器默认频率是60Hz，即1秒刷新60次，所以理论上最小间隔为1/60＊1000ms ＝ 16.7ms</p>

<h3>42.display:inline-block 什么时候会显示间隙</h3>

<p>A:真正意义上的inline-block水平呈现的元素间，换行显示或空格分隔的情况下会有间距。</p>

<p>Reference:<a href="https://www.zhangxinxu.com/wordpress/2012/04/inline-block-space-remove-%E5%8E%BB%E9%99%A4%E9%97%B4%E8%B7%9D/">去除inline-block元素间间距的N种方法</a></p>

<h3>43.overflow: scroll时不能平滑滚动的问题怎么处理？</h3>

<p>A: <code>-webkit-overflow-scrolling: touch;</code> </p>

<h3>44.有一个高度自适应的div，里面有两个div，一个高度100px，希望另一个填满剩下的高度。</h3>

<p>A: <a href="https://www.whitebyte.info/programming/css/how-to-make-a-div-take-the-remaining-height">How to make a div take the remaining height</a></p>

<h3>45.png、jpg、gif 这些图片格式解释一下，分别什么时候用。有没有了解过webp？</h3>

<p>A:</p>

<p>png:
 优点:无损压缩，有透明选项，压缩效率高于bmp 缺点:一般体积比同尺寸的90%压缩率的jpg要大很多(通常是5倍以上),但人眼很难识别其中的区别 用途:最常见的无损压缩图片格式,如果是经常对某图片进行编辑保存,要求图片数据100%完整,或需要透明效果(给PS当素材或用作图标等)则推荐使用</p>

<p>jpg/jpeg:
 优点:体积比png小，打开速度比png快 缺点:属于有损压缩，每次保存都会产生数据损失(jpeg artifacts)，故不适合用于多次编辑保存。压缩率过高图像会失真 用途:网络上最最常见的格式，也是静态图片(不只是照片)就常用的保存格式，就算是同一小组开发的jp2(相当于jpg第2代)也无法取代它。一般如果肉眼无法识别与png的差别和没有特殊要求就用jpg。</p>

<p>gif:</p>

<p>优点:支持动画以及透明，文件小
缺点:色域不广，只有256色
用途:动态图</p>

<p>webp:WebP是谷歌开发的一种新图片格式，同时支持有损和无损压缩的、使用直接色的、点阵图。
从名字就可以看出来它是为Web而生的，什么叫为Web而生呢？就是说相同质量的图片，WebP具有更小的文件体积。现在网站上充满了大量的图片，如果能够降低每一个图片的文件大小，那么将大大减少浏览器和服务器之间的数据传输量，进而降低访问延迟，提升访问体验。</p>

<h3>46.什么是Cookie 隔离？（或者说：请求资源的时候不要让它带cookie怎么做）</h3>

<p>A:如果静态文件都放在主域名下，那静态文件请求的时候都带有的cookie的数据提交给server的，非常浪费流量，所以不如隔离开。</p>

<p>因为cookie有域的限制，因此不能跨域提交请求，利用这点，可以将静态文件放在非主要域名下，这样便隔开了。请求头中就不会带有cookie数据，这样可以降低请求头的大小，降低请求时间，从而达到降低整体请求延时的目的。</p>

<p>同时这种方式不会将cookie传入Web Server，也减少了Web Server对cookie的处理分析环节，提高了webserver的http请求的解析速度。</p>

<h3>47.style标签写在body后与body前有什么区别？</h3>

<p>A:从有html标准以来到目前为止（2017年5月），标准一直是规定style元素不应出现在body元素中。
不过网页浏览器一直有容错设计。如果style元素出现在body元素，最终效果和style元素出现在head里是一样的。但是可能引起界面闪烁、重绘或重新布局。</p>

<h3>48.什么是CSS 预处理器 / 后处理器？</h3>

<p>A:预处理器例如：LESS、Sass、Stylus，用来预编译Sass或less，增强css代码的复用性，提高工作效率。</p>

<p>后处理器例如：PostCSS，通常被视为在完成的样式表中根据CSS规范处理CSS，让其更有效；目前最常做的是给CSS属性添加浏览器私有前缀，实现跨浏览器兼容性的问题。</p>

<h3>49.rem布局的优缺点?</h3>

<p>A:</p>

<p>优点：大小不受层次元素字体影响<br/>
缺点：字体不会跟随缩放；需要使用像素值兼容部分浏览器，不便于维护。</p>

<h2>Reference:</h2>

<ul>
<li><a href="https://github.com/markyun/My-blog/tree/master/Front-end-Developer-Questions/Questions-and-Answers">前端开发面试题</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web 面试题汇总(一)]]></title>
    <link href="http://DamianSheldon.github.io/blog/web-technical-interview-part-1.html"/>
    <updated>2018-09-03T17:26:10+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/web-technical-interview-part-1</id>
    <content type="html"><![CDATA[<h3>1.Doctype作用？标准模式与兼容模式各有什么区别?</h3>

<p>A: 告知浏览器的解析器用什么文档标准解析这个文档。DOCTYPE不存在或格式不正确会导致文档以兼容模式呈现。</p>

<h3>2.HTML5 为什么只需要写 &lt;!DOCTYPE HTML>？</h3>

<p>A: HTML5 不基于 SGML，因此不需要对DTD进行引用，但是需要doctype来规范浏览器的行为（让浏览器按照它们应该的方式来运行；而HTML4.01基于SGML,所以需要对DTD进行引用，才能告知浏览器文档所使用的文档类型。</p>

<h3>3.行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？</h3>

<p>A:</p>

<ul>
<li>行内元素有：a b span img input select strong（强调的语气）</li>
<li>块级元素有：div ul ol li dl dt dd h1 h2 h3 h4…p</li>
<li>常见的空元素：br hr img input link meta</li>
<li>鲜为人知的空元素：area base col command embed keygen param source track wbr</li>
</ul>


<h3>4.页面导入样式时，使用link和@import有什么区别？</h3>

<p>A:</p>

<ul>
<li>link属于XHTML标签，除了加载CSS外，还能用于定义RSS, 定义rel连接属性等作用；而@import是CSS提供的，只能用于加载CSS;</li>
<li>页面被加载的时，link会同时被加载，而@import引用的CSS会等到页面被加载完再加载;</li>
<li>import是CSS2.1 提出的，只在IE5以上才能被识别，而link是XHTML标签，无兼容问题;</li>
<li>link支持使用js控制DOM去改变样式，而@import不支持;</li>
</ul>


<h3>5.介绍一下你对浏览器内核的理解？</h3>

<h3>6.简述一下你对HTML语义化的理解？</h3>

<p>A:用正确的标签做正确的事情。</p>

<ul>
<li>html语义化让页面的内容结构化，结构更清晰，便于对浏览器、搜索引擎解析;</li>
<li>即使在没有样式CSS情况下也以一种文档格式显示，并且是容易阅读的;搜索引擎的爬虫也依赖于HTML标记</li>
<li>确定上下文和各个关键字的权重，利于SEO;</li>
<li>使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解。</li>
</ul>


<h3>7.HTML5的离线储存怎么使用，工作原理能不能解释一下？</h3>

<h3>8.浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢？</h3>

<!--more-->


<h3>9.请描述一下 cookies，sessionStorage 和 localStorage 的区别？</h3>

<h3>10.iframe有那些缺点？</h3>

<p>A:</p>

<ul>
<li>iframe会阻塞主页面的Onload事件；</li>
<li>搜索引擎的检索程序无法解读这种页面，不利于SEO；</li>
<li>iframe和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载。</li>
</ul>


<p>使用iframe之前需要考虑这两个缺点。如果需要使用iframe，最好是通过javascript 动态给iframe添加src属性值，这样可以绕开以上两个问题。</p>

<h3>11.HTML5的form如何关闭自动完成功能？</h3>

<p>A: 给不想要提示的 form 或某个 input 设置为 autocomplete=off。</p>

<h3>12.如何实现浏览器内多个标签页之间的通信?</h3>

<h3>13.webSocket如何兼容低浏览器？</h3>

<h3>14.页面可见性（Page Visibility API） 可以有哪些用途？</h3>

<p>A: 通过 visibilityState 的值检测页面当前是否可见，以及打开网页的时间等;在页面被切换到其他后台进程的时候，自动暂停音乐或视频的播放；</p>

<h3>15.如何在页面上实现一个圆形的可点击区域？</h3>

<p>A:</p>

<ol>
<li>map+area或者svg</li>
<li>border-radius</li>
<li>纯js实现 需要求一个点在不在圆上简单算法、获取鼠标坐标等等</li>
</ol>


<h3>16.实现不使用 border 画出1px高的线，在不同浏览器的标准模式与怪异模式下都能保持一致的效果。</h3>

<p>A:</p>

<p><figure class='code'><figcaption><span>html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>&lt;div style="height:1px;overflow:hidden;background:red"&gt;&lt;/div&gt;
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<h3>17.网页验证码是干嘛的，是为了解决什么安全问题?</h3>

<p>A:区分用户是计算机还是人。</p>

<p>可以防止恶意破解密码、刷票、论坛灌水；有效防止黑客对某一个特定注册用户用暴力破解方式进行不断的登陆尝试。</p>

<h3>18.title与h1的区别、b与strong的区别、i与em的区别？</h3>

<p>A:</p>

<ul>
<li>title属性没有明确意义只表示是个标题，h1则表示层次明确的标题，对页面信息的抓取也有很大的影响。</li>
<li>b 元素用来吸引读者的注意力到文本，却不表示该文本更重要；strong 元素表示内容更重要。</li>
<li>i 内容展示为斜体，em表示强调的文本。</li>
</ul>


<h3>19.Label的作用是什么？是怎么用的？</h3>

<p>A:label标签来定义表单控制间的关系,当用户选择该标签时，浏览器会自动将焦点转到和标签相关的表单控件上。</p>

<p><figure class='code'><figcaption><span>html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>&lt;label for="Name"&gt;Number:&lt;/label&gt;
</span><span class='line'>&lt;input type="text" name="Name" id="Name"/&gt;
</span><span class='line'>
</span><span class='line'>&lt;label&gt;Date:&lt;input type="text" name="B"/&gt;&lt;/label&gt;
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<h2>Reference:</h2>

<ul>
<li><a href="https://github.com/markyun/My-blog/tree/master/Front-end-Developer-Questions/Questions-and-Answers">前端开发面试题</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blocks 的实现]]></title>
    <link href="http://DamianSheldon.github.io/blog/the-implementation-of-blocks.html"/>
    <updated>2018-09-01T15:42:34+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/the-implementation-of-blocks</id>
    <content type="html"><![CDATA[<p>Block 的实现是面试中高频出现的问题，背后的原因我想是希望借此考察面试者对 Block 的掌握程度，在日后的工作中能够用好它；同时能从侧面反映面试者有没有深入钻研技术，以及独立思考能力如何，可谓一举多得。</p>

<p>下面我们就来看看 ObjC 中的 Blocks 是如何实现。Clang 的 <code>-rewrite-objc</code> 选项可以将含有 Block 语法的源代码转换为 C++，说是 C++，其实也仅使用了 struct 结构，其本质是 C 语言。</p>

<p>下面我们先转换一个简单的文件试试:</p>

<pre><code class="objc">#import &lt;Foundation/Foundation.h&gt;

int main(int argc, char ** argv)
{
    @autoreleasepool {
        void (^blk)(void) = ^{
            printf("Block\n");
        };

        blk();
    }    

    return 0;
}

// 使用命令:
$ clang -fobjc-arc -ObjC -rewrite-objc -mios-version-min=6.0.0 -fobjc-runtime=ios-6.0.0 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS11.3.sdk -arch arm64 block-essense.m  -o block-essense-in-c.c

//限于篇幅，省略不相关的部分，结果如下:
struct __block_impl {
  void *isa;
  int Flags;
  int Reserved;
  void *FuncPtr;
};

struct __main_block_impl_0 {
  struct __block_impl impl;
  struct __main_block_desc_0* Desc;
  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, int flags=0) {
    impl.isa = &amp;_NSConcreteStackBlock;
    impl.Flags = flags;
    impl.FuncPtr = fp;
    Desc = desc;
  }
};
static void __main_block_func_0(struct __main_block_impl_0 *__cself) {

            printf("Block\n");
        }

static struct __main_block_desc_0 {
  size_t reserved;
  size_t Block_size;
} __main_block_desc_0_DATA = { 0, sizeof(struct __main_block_impl_0)};
int main(int argc, char ** argv)
{
    /* @autoreleasepool */ { __AtAutoreleasePool __autoreleasepool; 
        void (*blk)(void) = ((void (*)())&amp;__main_block_impl_0((void *)__main_block_func_0, &amp;__main_block_desc_0_DATA));

        ((void (*)(__block_impl *))((__block_impl *)blk)-&gt;FuncPtr)((__block_impl *)blk);
    }

    return 0;
}
</code></pre>

<!--more-->


<p>可以看到持有 block 的变量实际上就是指针，而 block 本身则是结构体，在我们的例子中对应的是 <code>__main_block_impl_0</code>,功能代码则是通过函数来实现的，block 结构体内有成员变量指向该函数，这样我们对 block 的实现渐渐清晰起来了。</p>

<p>Block 有一个重要的特性&ndash;自动捕获变量。这又是怎么实现的呢？我们同样可以使用上述的方法来得到答案。我们构造一个捕获变量的例子，然后来查看它的结果：</p>

<pre><code class="objc">#import &lt;Foundation/Foundation.h&gt;

int main(int argc, char ** argv)
{
    @autoreleasepool {

        BOOL flag = YES;
        int i = 28;
        float pi = 3.1415;
        char c = 'x';

        void (^blk)(void) = ^{
            printf("Block\n");
            printf("flag:%d\n", flag);
            printf("i:%d\n", i);
            printf("pi:%d\n", pi);
            printf("c:%d\n", c);
        };

        blk();
    }

    return 0;
}

// 转换之后相关部分
struct __main_block_impl_0 {
  struct __block_impl impl;
  struct __main_block_desc_0* Desc;
  BOOL flag;
  int i;
  float pi;
  char c;
  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, BOOL _flag, int _i, float _pi, char _c, int flags=0) : flag(_flag), i(_i), pi(_pi), c(_c) {
    impl.isa = &amp;_NSConcreteStackBlock;
    impl.Flags = flags;
    impl.FuncPtr = fp;
    Desc = desc;
  }
};
static void __main_block_func_0(struct __main_block_impl_0 *__cself) {
  BOOL flag = __cself-&gt;flag; // bound by copy
  int i = __cself-&gt;i; // bound by copy
  float pi = __cself-&gt;pi; // bound by copy
  char c = __cself-&gt;c; // bound by copy

            printf("Block\n");
            printf("flag:%d\n", flag);
            printf("i:%d\n", i);
            printf("pi:%d\n", pi);
            printf("c:%d\n", c);
        }

static struct __main_block_desc_0 {
  size_t reserved;
  size_t Block_size;
} __main_block_desc_0_DATA = { 0, sizeof(struct __main_block_impl_0)};
int main(int argc, char ** argv)
{
    /* @autoreleasepool */ { __AtAutoreleasePool __autoreleasepool; 

        BOOL flag = ((bool)1);
        int i = 28;
        float pi = 3.1415;
        char c = 'x';

        void (*blk)(void) = ((void (*)())&amp;__main_block_impl_0((void *)__main_block_func_0, &amp;__main_block_desc_0_DATA, flag, i, pi, c));

        ((void (*)(__block_impl *))((__block_impl *)blk)-&gt;FuncPtr)((__block_impl *)blk);
    }

    return 0;
}
</code></pre>

<p>可以看到自动捕获的标量数据是直接声明为 block 结构体的成员变量。</p>

<p>除了读取捕获自动变量的值，block 还支持使用 <code>__block</code> 修饰符来修改自动捕获的变量。我们同样来看个例子：</p>

<pre><code class="objc">#import &lt;Foundation/Foundation.h&gt;

int main(int argc, char ** argv)
{
    @autoreleasepool {

        __block BOOL flag = YES;
        __block int i = 28;
        __block float pi = 3.1415;
        __block char c = 'x';

        void (^blk)(void) = ^{
            printf("Block\n");

            flag = NO;
            i = 88;
            pi = 3.1415926;
            c = 'a';

            printf("flag:%d\n", flag);
            printf("i:%d\n", i);
            printf("pi:%f\n", pi);
            printf("c:%d\n", c);
        };

        blk();
    }

    return 0;
}

// 转换之后相关部分的结果:
struct __Block_byref_flag_0 {
  void *__isa;
__Block_byref_flag_0 *__forwarding;
 int __flags;
 int __size;
 BOOL flag;
};
struct __Block_byref_i_1 {
  void *__isa;
__Block_byref_i_1 *__forwarding;
 int __flags;
 int __size;
 int i;
};
struct __Block_byref_pi_2 {
  void *__isa;
__Block_byref_pi_2 *__forwarding;
 int __flags;
 int __size;
 float pi;
};
struct __Block_byref_c_3 {
  void *__isa;
__Block_byref_c_3 *__forwarding;
 int __flags;
 int __size;
 char c;
};

struct __main_block_impl_0 {
  struct __block_impl impl;
  struct __main_block_desc_0* Desc;
  __Block_byref_flag_0 *flag; // by ref
  __Block_byref_i_1 *i; // by ref
  __Block_byref_pi_2 *pi; // by ref
  __Block_byref_c_3 *c; // by ref
  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, __Block_byref_flag_0 *_flag, __Block_byref_i_1 *_i, __Block_byref_pi_2 *_pi, __Block_byref_c_3 *_c, int flags=0) : flag(_flag-&gt;__forwarding), i(_i-&gt;__forwarding), pi(_pi-&gt;__forwarding), c(_c-&gt;__forwarding) {
    impl.isa = &amp;_NSConcreteStackBlock;
    impl.Flags = flags;
    impl.FuncPtr = fp;
    Desc = desc;
  }
};
static void __main_block_func_0(struct __main_block_impl_0 *__cself) {
  __Block_byref_flag_0 *flag = __cself-&gt;flag; // bound by ref
  __Block_byref_i_1 *i = __cself-&gt;i; // bound by ref
  __Block_byref_pi_2 *pi = __cself-&gt;pi; // bound by ref
  __Block_byref_c_3 *c = __cself-&gt;c; // bound by ref

            printf("Block\n");

            (flag-&gt;__forwarding-&gt;flag) = ((bool)0);
            (i-&gt;__forwarding-&gt;i) = 88;
            (pi-&gt;__forwarding-&gt;pi) = 3.1415926;
            (c-&gt;__forwarding-&gt;c) = 'a';

            printf("flag:%d\n", (flag-&gt;__forwarding-&gt;flag));
            printf("i:%d\n", (i-&gt;__forwarding-&gt;i));
            printf("pi:%f\n", (pi-&gt;__forwarding-&gt;pi));
            printf("c:%d\n", (c-&gt;__forwarding-&gt;c));
        }
static void __main_block_copy_0(struct __main_block_impl_0*dst, struct __main_block_impl_0*src) {_Block_object_assign((void*)&amp;dst-&gt;flag, (void*)src-&gt;flag, 8/*BLOCK_FIELD_IS_BYREF*/);_Block_object_assign((void*)&amp;dst-&gt;i, (void*)src-&gt;i, 8/*BLOCK_FIELD_IS_BYREF*/);_Block_object_assign((void*)&amp;dst-&gt;pi, (void*)src-&gt;pi, 8/*BLOCK_FIELD_IS_BYREF*/);_Block_object_assign((void*)&amp;dst-&gt;c, (void*)src-&gt;c, 8/*BLOCK_FIELD_IS_BYREF*/);}

static void __main_block_dispose_0(struct __main_block_impl_0*src) {_Block_object_dispose((void*)src-&gt;flag, 8/*BLOCK_FIELD_IS_BYREF*/);_Block_object_dispose((void*)src-&gt;i, 8/*BLOCK_FIELD_IS_BYREF*/);_Block_object_dispose((void*)src-&gt;pi, 8/*BLOCK_FIELD_IS_BYREF*/);_Block_object_dispose((void*)src-&gt;c, 8/*BLOCK_FIELD_IS_BYREF*/);}

static struct __main_block_desc_0 {
  size_t reserved;
  size_t Block_size;
  void (*copy)(struct __main_block_impl_0*, struct __main_block_impl_0*);
  void (*dispose)(struct __main_block_impl_0*);
} __main_block_desc_0_DATA = { 0, sizeof(struct __main_block_impl_0), __main_block_copy_0, __main_block_dispose_0};
int main(int argc, char ** argv)
{
    /* @autoreleasepool */ { __AtAutoreleasePool __autoreleasepool; 

        __attribute__((__blocks__(byref))) __Block_byref_flag_0 flag = {(void*)0,(__Block_byref_flag_0 *)&amp;flag, 0, sizeof(__Block_byref_flag_0), ((bool)1)};
        __attribute__((__blocks__(byref))) __Block_byref_i_1 i = {(void*)0,(__Block_byref_i_1 *)&amp;i, 0, sizeof(__Block_byref_i_1), 28};
        __attribute__((__blocks__(byref))) __Block_byref_pi_2 pi = {(void*)0,(__Block_byref_pi_2 *)&amp;pi, 0, sizeof(__Block_byref_pi_2), 3.1415};
        __attribute__((__blocks__(byref))) __Block_byref_c_3 c = {(void*)0,(__Block_byref_c_3 *)&amp;c, 0, sizeof(__Block_byref_c_3), 'x'};

        void (*blk)(void) = ((void (*)())&amp;__main_block_impl_0((void *)__main_block_func_0, &amp;__main_block_desc_0_DATA, (__Block_byref_flag_0 *)&amp;flag, (__Block_byref_i_1 *)&amp;i, (__Block_byref_pi_2 *)&amp;pi, (__Block_byref_c_3 *)&amp;c, 570425344));

        ((void (*)(__block_impl *))((__block_impl *)blk)-&gt;FuncPtr)((__block_impl *)blk);
    }

    return 0;
}
</code></pre>

<p>可以看到使用 <code>__block</code> 修饰的变量实际上转换成了结构体变量，同样在 block 结构体中有成员变量指向它们。</p>

<p>上面我们看过了使用 block 时的几种情况，我们可以尝试来总结使用 block 的情况，然后查看各种情况转换之后的代码来进一步探索 block 的实现，进而得到比较完善的答案。</p>

<p>首先 block 可以按是否捕获变量分为两大类，其次捕获变量时根据是否支持修改又可以分为两类，最后捕获变量又可以分为程序的数据区域、栈上和堆上三种情况。综上，我们可以得到得到如下的 block 分类列表:</p>

<ul>
<li>不捕获变量(1)</li>
<li><p>捕获变量</p>

<ul>
<li><p>不修改捕获的变量</p>

<ul>
<li>存在程序数据区的变量(2)</li>
<li>存在栈上的变量(3)</li>
<li>存在堆上的变量(4)</li>
</ul>
</li>
<li><p>修改捕获的变量(<code>__block</code> 修饰的变量)</p>

<ul>
<li>存在程序数据区的变量(5)</li>
<li>存在栈上的变量(6)</li>
<li>存在堆上的变量(7)</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>这样算下来应该是存在七种情况，我们可以分别构造各种情况的例子，然后得到 block 的实现全貌。</p>

<p>全局变量和 static 变量是程序数据区变量，block 中访问全局变量和在其他地方没有什么不同，所以 block 的实现中不需要对它进行特别考虑。Static 变量在捕获时会在 block 结构体中有对应的成员变量，可以用该成员变量来读写。由于它在程序的生命周期中一直存在，所以当 block 捕获并修改它时，不需要生成对应的结构体变量，这和其他 <code>__block</code> 修饰的变量不同。</p>

<p>情况三和四比较类似，它们都会在 block 结构体中增加相应的成员变量，不同之处是捕获堆上的变量， block 的描述结构体变量中会增加 copy 和 dipose 函数，用来管理对应的内存。</p>

<p>情况六和七也类似，它们都是将变量转换为结构体，然后在 block 结构体增加成员变量指向它们。捕获堆上的变量时，block 内的成员变量指向变量，而这个变量是指向堆上分配的一块内存的，也就是一个对象，对象就是一块内存区域嘛，用代码示例如下：</p>

<pre><code class="objc">blk_t blk;

{
  __block id __strong array = [[NSMutableArray alloc] init];

  blk = [^(id obj){

      [array addObject:obj];
      NSLog(@"array count = %ld", [array count]);

  } copy];
}

// __block 修饰指向 array 的变量
struct __Block_byref_array_0 {
  void *__isa;
__Block_byref_array_0 *__forwarding;
 int __flags;
 int __size;
 void (*__Block_byref_id_object_copy)(void*, void*);
 void (*__Block_byref_id_object_dispose)(void*);
 __strong id array;
};

// 表示 block 的结构体
struct __main_block_impl_0 {
  struct __block_impl impl;
  struct __main_block_desc_0* Desc;
  __Block_byref_array_0 *array; // by ref
  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, __Block_byref_array_0 *_array, int flags=0) : array(_array-&gt;__forwarding) {
    impl.isa = &amp;_NSConcreteStackBlock;
    impl.Flags = flags;
    impl.FuncPtr = fp;
    Desc = desc;
  }
};
</code></pre>

<p>看到这里，我们有了 block 捕获变量出了作用域后还能存在原因的线索，当表示 block 的结构体从栈上拷贝到堆上，如果是只读变量，它的值赋值给 block 结构体的成员变量了；如果是 <code>__block</code> 修饰的变量，表示该变量的结构体也会一并拷贝到堆上，并由 block 持有和管理。</p>

<p>至此，我们应该对 block 的实现比较清晰了。</p>

<h2>Reference</h2>

<ul>
<li>Objective-C 高级编程</li>
</ul>

]]></content>
  </entry>
  
</feed>
