<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: archives | Hello World]]></title>
  <link href="http://DamianSheldon.github.io/blog/categories/archives/atom.xml" rel="self"/>
  <link href="http://DamianSheldon.github.io/"/>
  <updated>2020-09-02T15:50:02+08:00</updated>
  <id>http://DamianSheldon.github.io/</id>
  <author>
    <name><![CDATA[Sheldon]]></name>
    <email><![CDATA[dongmeilianghy@sina.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Linux 使用笔记(二)]]></title>
    <link href="http://DamianSheldon.github.io/blog/linux-useful-command-line-part-3.html"/>
    <updated>2020-09-02T11:40:17+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/linux-useful-command-line-part-3</id>
    <content type="html"><![CDATA[<h3>1.系统迁移和备份</h3>

<p>A:为了数据安全，我们需要对系统备份，换新电脑或者更换云服务时我们需要迁移系统。Linux 系统备份和迁移的方法很多，我这里打算使用 tar 。</p>

<h4>系统备份</h4>

<p>首先是根据自己的实际情况列出需要备份的目录，通常有：</p>

<pre><code>* `/etc/` 
* `/home/`
* `/var/spool/mail/`
* `/var/spool/cron/`
* `/root`
* `/usr/local/bin`
</code></pre>

<p>然后使用 tar 命令打包：</p>

<pre><code>tar -jcv -f /backups/backup-system-20200902.tar.bz2 \
&gt; --exclude=/root/*.bz2 --exclude=/root/*.gz --exclude=/home/loop* \
&gt; /etc /home /var/spool/mail /var/spool/cron /root /usr/local/bin
</code></pre>

<h4>系统恢复</h4>

<p>首先可以将备份解压到 <code>/tmp</code> 目录，之后使用 rsync 命令复制到对应目录便可恢复。</p>

<pre><code>tar -jxv -f /backups/backup-system-20200902.tar.bz2 -C /tmp
rsync -avuzb /tmp/etc/ /etc
rsync -avuzb /tmp/home/ /home
rsync -avuzb /tmp/var/spool/mail/ /var/spool/mail
rsync -avuzb /tmp/var/spool/cron/ /var/spool/cron
rsync -avuzb /tmp/root/ /root
rsync -avuzb /tmp/usr/local/bin/ /usr/local/bin
</code></pre>

<h4>系统迁移</h4>

<p>换新电脑或者更换云服务时我们可能不想要上面那么麻烦，而可能想直接迁移系统，至少我是这么想的，这时我们可以使用下面的方法：</p>

<pre><code># 全系统备份
tar --create --absolute-names --preserve-permissions --bzip2  --file=/media/sf_Windows10-shared-folder/virtual-box-centos-8.tar.bz2 --exclude=/dev --exclude=/media --exclude=/metainfo --exclude=/mnt --exclude=/proc --exclude=/run --exclude=/sys  --exclude=/tmp --exclude=/var --exclude=/@System.solv /

# 如有需要也可检查备份的文件
tar -tjpPvf /media/sf_Windows10-shared-folder/virtual-box-centos-8.tar.bz2 | less

# 将备份包放到 /tmp 下解压
tar -xjvf virtual-box-centos-8.tar.bz2
</code></pre>

<h3>2.dnf list plugins command missing</h3>

<p>A:The information is provided for nearly all command with &ldquo;-v&rdquo; option. See:</p>

<p>Loaded plugins: builddep, changelog, config-manager, copr, debug, debuginfo-install, download, generate_completion_cache, needs-restarting, playground, product-id, repoclosure, repodiff, repograph, repomanage, reposync, subscription-manager, uploadprofile
Updating Subscription Management repositories.</p>

<p>Reference:</p>

<ul>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=1694041">dnf list plugins command missing</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL 使用笔记(二)]]></title>
    <link href="http://DamianSheldon.github.io/blog/using-mysql-note-part-two.html"/>
    <updated>2020-07-18T15:57:24+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/using-mysql-note-part-two</id>
    <content type="html"><![CDATA[<h3>1.如何查看数据库中所有的存储过程?</h3>

<p>A: <code>mysql&gt; show procedure status where db = 'db_for_mysql_crash_course'\G;</code>;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web API 的设计与开发--读书笔记]]></title>
    <link href="http://DamianSheldon.github.io/blog/notes-of-web-api-the-good-parts.html"/>
    <updated>2020-04-29T10:31:16+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/notes-of-web-api-the-good-parts</id>
    <content type="html"><![CDATA[<p>Web API 的设计与开发是开发者日常工作的重要内容，我们该如何来做好这项工作呢？我觉得一个务实的方法是先参考前辈们的做法，也就是站在巨人的肩上，理解消化后再尝试去突破，这样可能会事半功倍。经过一番搜索，找到了 <code>&lt;&lt;Web API 的设计与开发&gt;&gt;</code>， 我个人觉得这是一本对 Web API 进行全面、细致和深入剖析的书，对 Web API 的设计与开发很有帮助，值得一读。</p>

<p>书的内容是按照整分的逻辑组织，并依先易后难的顺序来讲解相关知识。下面我按自己的理解尝试对书中内容做个简单的总结。</p>

<p>Web API 是用于完成某种需求，由于需求会变化，所以一次就设计出完美 Web API 的想法是不现实的，所以一开始应该要给 Web API 的更改留有余地，这是很容易忽视的地方。推荐的做法是在 URI 中嵌入版本信息，典型的形式是 <code>http://api.linkedin.com/v1/people</code>。</p>

<p>虽然一次就完美地设计 Web API 的想法不现实，但我们还是想尽量做好，减少 Web API 版本变更的次数，毕竟版本越多维护成本越高，那么我们该如何设计 Web API 呢？</p>

<p>Web API 通过 HTTP 协议来完成通信，在设计时我们应该最大程度地利用 HTTP 协议规范。基于标准协议设计的 API 至少要比使用私有协议设计的 API 更容易理解，还会减少使用时引入的 bug，使你的 API 得到更广泛的使用，提高利用已有的程序库或代码的可能。</p>

<p>有了整体设计原则后，我们来看下具体的请求和响应设计。API 的功能是为了完成项目的需求，最完备的请求会包含请求端点、请求方法、请求参数和请求数据体(Request Body)，我们依次来审视请求的每个部分。</p>

<p>端点是指用于访问 API 的 URI，普适又重要的设计原则有：</p>

<ul>
<li>短小便于输入的 URI</li>
<li>人可以读懂的 URI</li>
<li>没有大小写混用的 URI</li>
<li>不会暴露服务端架构的 URI</li>
<li>规则统一的 URI</li>
</ul>


<p>端点设计的注意事项：</p>

<ul>
<li>使用名词的复数形式</li>
<li>注意所用的单词</li>
<li>不使用空格及需要编码的字符</li>
<li>使用连字符来连接多个单词</li>
</ul>


<p>URI 和 HTTP 方法之间的关系可以认为是操作对象和操作方法的关系。如果把 URI 当作 API(HTTP) 的 “操作对象 = 资源”， HTTP 方法则表示 “进行怎样的操作”。通过用不同方法访问同一个 URI 端点，不但可以获取信息，还能修改信息、删除信息等，这样的思想正成为 Web API 设计的主流方式。</p>

<table>
<thead>
<tr>
<th> 方法名 </th>
<th> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td> GET </td>
<td> 获取资源 </td>
</tr>
<tr>
<td> POST </td>
<td> 新增资源 </td>
</tr>
<tr>
<td> PUT </td>
<td> 覆盖已有资源 </td>
</tr>
<tr>
<td> DELETE </td>
<td> 删除资源 </td>
</tr>
<tr>
<td> PATCH </td>
<td> 更新部分资源 </td>
</tr>
<tr>
<td> HEAD </td>
<td> 获取资源的元信息 </td>
</tr>
</tbody>
</table>


<p>有时请求可能还需要传递参数，在设计 URI 时，必须决定是把特定参数放在查询参数里还是路径里，决策的依据有以下两点：</p>

<ul>
<li>是否是表示唯一资源所需的信息</li>
<li>是否可以省略</li>
</ul>


<p>请求数据体，个人认为可以采用面向对象编程的思想来设计，整个处理过程会轻松很多。</p>

<p>说完请求，让我们来看下响应。首先是正确使用状态码，国内由于历史原因遗留下来无论请求是否成功都一律返回 200 的问题，全站切换到 HTTPS 后，我们还是应该最大程度地利用 HTTP 规范，这样我们能受益于通用的 HTTP 程序库，减轻客户端的负担。</p>

<p>其次是数据格式，这里的数据格式是指该用怎样的形式来描述 API 返回的结构化数据，具体而言就是指 JSON、XML 等数据格式。关于这一点，事实上几乎没有可讨论的，因为我们通常就是使用 JSON 作为默认的数据格式，若有需求 API 也可以支持 XML 的格式，这是最贴近现实的做法。</p>

<p>再次是数据内部结构，我们重点看下数据应该以数组还是对象返回，作者更推荐使用对象来封装数据的方式，因为该方式有如下几个优点:</p>

<ul>
<li>更容易理解响应数据表示什么</li>
<li>响应数据通过对象的封装实现了结构统一</li>
<li>可以避免安全方面的风险</li>
</ul>


<p>从次是各个数据的格式，各个数据项组成了最终的数据，只有掌握了如何处理单个数据项格式才能设计出合理的响应体数据格式。作者重点介绍了如何描述性别数据、日期格式和大整数，受益匪浅。</p>

<p>最后是出错信息的表示，同样，我们需要选择合适的状态码，出误信息建议以消息体的形式返回，出错信息应该包含详细的错误代码、人们能够读懂的相关信息，以及记载有详细说明的文档页面的 URI，如下所示：</p>

<pre><code>{
    "error": {
        "code": 2013,
        "message": "Bad authentication token",
        "info": "http://docs.example.com/api/v1/authentication"
    }
}
</code></pre>

<p>如果想支持描述多个错误同时发生，可以返回出错信息数组，</p>

<pre><code>{
    "errors": [
        {
            "code": 2013,
            "message": "Bad authentication token",
            "info": "http://docs.example.com/api/v1/authentication"
        }
    ]
}
</code></pre>

<p>以上是基础内容，作者最后还介绍进阶内容，开发牢固的 Web API，对我们把 Web API 设计和开发提高到新高度有非常大的帮助。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ionic App 使用 cordova hot code push 实现热更新]]></title>
    <link href="http://DamianSheldon.github.io/blog/ionic-app-use-cordova-hot-code-push-achieve-live-update.html"/>
    <updated>2020-01-07T17:02:35+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/ionic-app-use-cordova-hot-code-push-achieve-live-update</id>
    <content type="html"><![CDATA[<p>本文主要记录 Ionic App 使用 cordova hot code push 实现热更新时遇到问题的解决方法，另外也简单记录下使用方法，方便日后查阅。</p>

<p>Cordova hot code push 插件的原作者已经不维护了，我们可以选择一个可能最好的 fork 来使用。 <a href="http://gitpop2.herokuapp.com/">gitpop2</a> 可以帮助我们选择，我从中选择了当前 star 最多的一个 fork。</p>

<p>Ionic App 使用 cordova hot code push 实现热更新的基本步骤如下：</p>

<ol>
<li><p>在 ionic 工程中添加 cordova hot code push plugin</p>

<pre><code class="`"> $ ionic cordova plugin add https://github.com/snipking/cordova-hot-code-push.git
</code></pre></li>
<li><p>安装 Cordova Hot Code Push CLI client</p>

<pre><code class="`"> $ npm install -g cordova-hot-code-push-cli
</code></pre></li>
<li><p>为指定平台编译工程</p>

<pre><code class="`"> $ ionic cordova prepare android
</code></pre></li>
<li><p>执行插件初始化</p>

<pre><code class="`"> $ cd /path/to/project/root
 $ cordova-hcp init
</code></pre></li>
<li><p>生成插件配置文件</p>

<pre><code class="`"> $ cordova-hcp build
</code></pre></li>
<li><p>运行到设备上</p></li>
<li><p>开发和发布应用新版本的 web</p>

<pre><code class="`"> // 1. 开发
 // 2. 为指定平台编译工程生成 web 
 $ ionic build --engine=cordova --platform=android
 // 3. 生成新插件配置文件
 $ cordova-hcp build
 // 4. 部署到服务器
</code></pre></li>
</ol>


<p>在使用的过程中遇到的第一个问题是更新之后白屏。使用 Chrome 的 remote devices 调试 android webview 找到了问题的原因，ionic 应用中 <code>&lt;base href="http://DamianSheldon.github.io/" /&gt;</code>， cordova hot code push 会将 web 代码拷贝到外部存储上，webview 使用形如 <code>file:///data/user/0/com.tenneshop.liveupdatedemo/files/cordova-hot-code-push-plugin/2020.01.07-16.16.39/www/index.html</code> 的路径来加载应用，此时 <code>document.baseURI = /</code>，加载其他相对路径的 js 文件时，是相对这个路径，例如 <code>&lt;script src="cordova.js"&gt;&lt;/script&gt;</code>，就是以 <code>/cordova.js</code> 去加载，于是就会提示找不到文件。从上面的分析我们也知道，解决问题的一个办法是修正 base href 的值，我们可以在 index.html 的 head 元素加入下面的代码：</p>

<p>```</p>

<script>
    document.write('<base href="' + document.location.href + '" />');
</script>


<p>```</p>

<p>这样我们就修正文件路径的问题，很不巧，虽然文件的路径是对了，但是 ionic 默认不响应 file schema 的请求，我们需要做些工作，先让 WebViewLocalServer.java 支持响应 file schema，将 createHostingDetails 改成如下实现：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>private void createHostingDetails() {
</span><span class='line'>  final String assetPath = this.basePath;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  if (assetPath.indexOf(&lsquo;&lt;em>&rsquo;) != -1) {
</span><span class='line'>    throw new IllegalArgumentException(&ldquo;assetPath cannot contain the &lsquo;&lt;/em>&rsquo; character.&rdquo;);
</span><span class='line'>  }&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  PathHandler handler = new PathHandler() {
</span><span class='line'>    @Override
</span><span class='line'>    public InputStream handle(Uri url) {
</span><span class='line'>      InputStream stream = null;
</span><span class='line'>      String path = url.getPath();
</span><span class='line'>      try {
</span><span class='line'>        if (url.getScheme().equals(&ldquo;file&rdquo;)) {
</span><span class='line'>          stream = protocolHandler.openFile(path);
</span><span class='line'>        } else if (path.startsWith(contentStart)) {
</span><span class='line'>          stream = protocolHandler.openContentUrl(url);
</span><span class='line'>        } else if (path.startsWith(fileStart) || !isAsset) {
</span><span class='line'>          if (!path.startsWith(fileStart)) {
</span><span class='line'>            path = basePath + url.getPath();
</span><span class='line'>          }
</span><span class='line'>          stream = protocolHandler.openFile(path);
</span><span class='line'>        } else {
</span><span class='line'>          stream = protocolHandler.openAsset(assetPath + path);
</span><span class='line'>        }
</span><span class='line'>      } catch (IOException e) {
</span><span class='line'>        Log.e(TAG, &ldquo;Unable to open asset URL: &rdquo; + url);
</span><span class='line'>        Log.e(TAG, e.getLocalizedMessage());
</span><span class='line'>        return null;
</span><span class='line'>      }&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>  return stream;
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>  };&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  registerUriForScheme(httpScheme, handler, authority);
</span><span class='line'>  registerUriForScheme(httpsScheme, handler, authority);
</span><span class='line'>  if (!customScheme.equals(httpScheme) &amp;&amp; !customScheme.equals(httpsScheme)) {
</span><span class='line'>    registerUriForScheme(customScheme, handler, authority);
</span><span class='line'>  }&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  registerUriForScheme(&ldquo;file&rdquo;, handler, &ldquo;&rdquo;);&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<p>然后是 isLocalFile 方法：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>private boolean isLocalFile(Uri uri) {
</span><span class='line'>  String path = uri.getPath();
</span><span class='line'>  if (path.startsWith(contentStart) || path.startsWith(fileStart) || uri.getScheme().equals(&ldquo;file&rdquo;)) {
</span><span class='line'>    return true;
</span><span class='line'>  }
</span><span class='line'>  return false;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></p>

<p>做完这些工作后 ionic 就可以响应 file schema 请求了。</p>

<p>继续测试，我发现更新后第二次打开还是显示 App bundle asset 中的 web，这有点奇怪。仔细查看日志，确实有加载外部存储的 web , 但却被 <code>http://localhost/</code> 的请求覆盖了，这是什么原因呢？经过对代码逻辑的一番梳理，我发现是 IonicWebViewEngine 中 onPageStarted 方法的原因：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public void onPageStarted(WebView view, String url, Bitmap favicon) {
</span><span class='line'>  super.onPageStarted(view, url, favicon);
</span><span class='line'>  String launchUrl = parser.getLaunchUrl();
</span><span class='line'>  if (!launchUrl.contains(WebViewLocalServer.httpsScheme) &amp;&amp; !launchUrl.contains(WebViewLocalServer.httpScheme) &amp;&amp; url.equals(launchUrl)) {
</span><span class='line'>    view.stopLoading();
</span><span class='line'>    // When using a custom scheme the app won&rsquo;t load if server start url doesn&rsquo;t end in /
</span><span class='line'>    String startUrl = CDV_LOCAL_SERVER;
</span><span class='line'>    if (!scheme.equalsIgnoreCase(WebViewLocalServer.httpsScheme) &amp;&amp; !scheme.equalsIgnoreCase(WebViewLocalServer.httpScheme)) {
</span><span class='line'>      startUrl += &ldquo;/&rdquo;;
</span><span class='line'>    }
</span><span class='line'>    view.loadUrl(startUrl);
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></p>

<p>MainActivity 触发 webview 加载 <code>file:///android_asset/www/index.html</code>，然后 cordova hot code push plugin 启动工作，它会让 webview 加载外部存储的 web，之后 IonicWebViewEngine 的 onPageStarted 收到 <code>file:///android_asset/www/index.html</code> 的请求的回调，它先停止了 webview 的加载工作，即 cordova hot code push plugin 启动加载外部存储的 web 的请求，再开始 <code>http://localhost/</code> 的请求，也就是打印出来日志的记录。正是这个方法时序的问题导致成功更新之后再重启应用仍然加载 app bundle asset 的 web。一种解决办法是我们直接让 MainActivity 直接加载 <code>http://localhost/</code>，就像下面这样:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public void onCreate(Bundle savedInstanceState)
</span><span class='line'>{
</span><span class='line'>   super.onCreate(savedInstanceState);&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>   // enable Cordova apps to be started in the background
</span><span class='line'>   Bundle extras = getIntent().getExtras();
</span><span class='line'>   if (extras != null &amp;&amp; extras.getBoolean(&ldquo;cdvStartInBackground&rdquo;, false)) {
</span><span class='line'>       moveTaskToBack(true);
</span><span class='line'>   }
</span><span class='line'>   launchUrl = &ldquo;&lt;a href="http://localhost/">http://localhost/&lt;/a>&rdquo;;
</span><span class='line'>   // Set by &lt;content src="index.html" /> in config.xml
</span><span class='line'>   loadUrl(launchUrl);
</span><span class='line'>}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<p>这样热更新就可以正常工作了。</p>

<p>我继续做了点测试，又发现一个和 ionic icon 相关的问题，ionic 4 使用了 Fetch API 来请求 ionic icon 的 svg 资源，由于现在是使用 file schema 来指定资源路径，由于 Fetch API 不支持 file schema 所以就报错 <code>Fetch API cannot load file:///xxx/www/svg/md-star.svg. URL scheme "file" is not supported.</code> 我们得想办法来解决这个问题，一个办法替换 fetch 方法的实现，如:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;script>
</span><span class='line'>   document.write('&lt;base href="' + document.location.href + '" />');
</span><span class='line'>
</span><span class='line'>   var originalFetch = window.fetch;
</span><span class='line'>
</span><span class='line'>   window.fetch = function() {
</span><span class='line'>       var args = [];
</span><span class='line'>       for (var _i = 0; _i &lt; arguments.length; _i++) {
</span><span class='line'>           args[_i] = arguments[_i];
</span><span class='line'>       }
</span><span class='line'>       var url = args[0];
</span><span class='line'>       if (typeof url === 'string' && url.match(/\.svg/)) {
</span><span class='line'>           return new Promise(function(resolve, reject) {
</span><span class='line'>               var req = new XMLHttpRequest();
</span><span class='line'>               req.open('GET', url, true);
</span><span class='line'>               req.addEventListener('load', function() {
</span><span class='line'>                   resolve({
</span><span class='line'>                       ok: true,
</span><span class='line'>                       status: 200,
</span><span class='line'>                       text: function() {
</span><span class='line'>                           return Promise.resolve(req.responseText);
</span><span class='line'>                       }
</span><span class='line'>                   });
</span><span class='line'>               });
</span><span class='line'>               req.addEventListener('error', reject);
</span><span class='line'>               req.send();
</span><span class='line'>           });
</span><span class='line'>       } else {
</span><span class='line'>           return originalFetch.apply(void 0, args);
</span><span class='line'>       }
</span><span class='line'>   };
</span><span class='line'>&lt;/script>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<p>在这些测试过程中，我还发现 cordova hot code push 更新时只做了版本字符是否相等的判断，这在服务器端的版本低于本地版本时，插件仍然会做更新，这是有问题的，我们需要严格这里的判断，让它只有在服务端的版本高于本地版本时才做更新。相关代码位于 UpdateLoaderWorker 的 run 方法中。</p>

<p>最后一个要考虑的问题是如何将我们修改的代码和 ionic 的代码很好的整合起来？我现在的想法是创建一个私有的扩展 IonicWebViewEngine 和 WebViewLocalServer，然后借鉴 ionic 通过 config.xml 的 web 偏好设置的方法，像下面的代码:</p>

<pre><code>&lt;preference name="webView" value="com.ionicframework.cordova.webview.IonicWebViewEngine" /&gt;
</code></pre>

<p>回头测试下这个想法，好了有时间也许可以整理好代码提个 Pull Request。</p>

<p>Reference:</p>

<ul>
<li><a href="https://github.com/angular/angular/issues/13948">Cannot run angular 2+ from file:/// - looks like &lsquo;base href=&ldquo;http://DamianSheldon.github.io/&rdquo;&rsquo; is the issue</a></li>
<li><a href="https://github.com/ionic-team/ionicons/issues/572">IONIC v4: Icon won&rsquo;t work in android</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在 macOS 上用 VirtualBox 安装 CentOS]]></title>
    <link href="http://DamianSheldon.github.io/blog/install-centos-8-on-macos-with-virtualbox.html"/>
    <updated>2020-01-04T13:49:46+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/install-centos-8-on-macos-with-virtualbox</id>
    <content type="html"><![CDATA[<p>最近为了更好的实践 Linux，决定在 mac 上使用 VirtualBox 安装一个 CentOS，主要是参考鸟哥的这篇<a href="http://linux.vbird.org/linux_basic/0157installcentos7.php#centos_1">安裝 CentOS7.x</a>。</p>

<p>安装之后打开系统出现闪屏，英语应该是称为 screen flicker，google 之后在 VirtualBox 的论坛找到解决方法:</p>

<ol>
<li><p>进入单用户维护模式</p>

<pre><code class="`"> a. 重启系统
 b. 在菜单选择界面键入 e，进入 grub2 的指令编辑模式
 c. 在指定内核和根文件系统这行最后加上 systemd.unit=rescue.target
 d. 键入 ctrl + x 进入系统
</code></pre></li>
<li><p>强制使用 Xorg</p>

<pre><code class="`">  a. 用 vim 打开 /etc/gdm3/custom.conf
  b. 删除 WaylandEnable=false 前的 # 注释符号
  c. 保存文件后，systemctl default 来进入正常模式 
</code></pre></li>
</ol>


<p>解决了闪屏之后，想通过虚拟机菜单中的调整窗口大小来让系统的屏幕全屏发现无用，想起来应该要安装 VirtualBox Guest Additions，于是插入虚拟机提供的光盘来安装。</p>

<p>首先是提示 kernel headers not found for target kernel 的错误，也提示详细的错误信息位于 /var/log/vboxadd-setup.log，我们可以通过查看该错误日志来找到对应解决方法。于是尝试安装对应的内核头文件，命令为 <code>yum install kernel-headers kernel-devel</code>，之后执行 <code>/sbin/rcvboxadd setup</code>.</p>

<p>仍然提示 kernel headers not found for target kernel，通过 <code>uname -r</code> 和 <code>rpm -q kernel-headers</code> 发现版本不一致，于是重启系统选择最新的内核版本。</p>

<p>再次尝试安装，提示 Error building the module，查看错误日志提示需要安装 <code>libelf-dev, libelf-devel or elfutils-libelf-devel</code> ，CentOS 上只有 elfutils-libelf-devel ，安装之后再次安装 VirtualBox Guest Additions。</p>

<p>提示</p>

<pre><code>ValueError: File context for /opt/VBoxGuestAdditions-6.0.14/other/mount.vboxsf already defined
VirtualBox Guest Additions: Running kernel modules will not be replaced until
the system is restarted
</code></pre>

<p>这个问题暂时没找到解决方法，但是可以让 CentOS 全屏了，就暂时先不管这个问题了。</p>

<p>Reference:</p>

<ul>
<li><a href="http://linux.vbird.org/linux_basic/0157installcentos7.php#centos_1">第三章、安裝 CentOS7.x</a></li>
<li><a href="https://forums.virtualbox.org/viewtopic.php?f=8&amp;t=85110">Ubuntu 1710 screen flicker</a></li>
<li><a href="https://forums.virtualbox.org/viewtopic.php?t=91563">Centos7 Guest Additions fails: kernel headers not found</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
