<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hello World]]></title>
  <link href="http://DamianSheldon.github.io/atom.xml" rel="self"/>
  <link href="http://DamianSheldon.github.io/"/>
  <updated>2023-02-28T13:05:12+08:00</updated>
  <id>http://DamianSheldon.github.io/</id>
  <author>
    <name><![CDATA[Sheldon]]></name>
    <email><![CDATA[dongmeilianghy@sina.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[HotSpot 虚拟机垃圾收集调优总结]]></title>
    <link href="http://DamianSheldon.github.io/blog/hotspot-virtual-machine-garbage-collection-tuning-summary.html"/>
    <updated>2023-02-03T09:34:30+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/hotspot-virtual-machine-garbage-collection-tuning-summary</id>
    <content type="html"><![CDATA[<p>工作中我们可能需要对 HotSpot 虚拟机垃圾收集调优，那么应该怎么做呢？</p>

<p>Oracle 在 HotSpot Virtual Machine Garbage Collection Tuning Guide 提到过一个调优策略：</p>

<blockquote><p>Tuning Strategy</p>

<p>Do not choose a maximum value for the heap unless you know that you need a heap greater than the default maximum heap size. Choose a throughput goal that is sufficient for your application.</p>

<p>The heap will grow or shrink to a size that will support the chosen throughput goal. A change in the application&rsquo;s behavior can cause the heap to grow or shrink. For example, if the application starts allocating at a higher rate, the heap will grow to maintain the same throughput.</p>

<p>If the heap grows to its maximum size and the throughput goal is not being met, the maximum heap size is too small for the throughput goal. Set the maximum heap size to a value that is close to the total physical memory on the platform but which does not cause swapping of the application. Execute the application again. If the throughput goal is still not met, then the goal for the application time is too high for the available memory on the platform.</p>

<p>If the throughput goal can be met, but there are pauses that are too long, then select a maximum pause time goal. Choosing a maximum pause time goal may mean that your throughput goal will not be met, so choose values that are an acceptable compromise for the application.</p>

<p>It is typical that the size of the heap will oscillate as the garbage collector tries to satisfy competing goals. This is true even if the application has reached a steady state. The pressure to achieve a throughput goal (which may require a larger heap) competes with the goals for a maximum pause time and a minimum footprint (which both may require a small heap).</p></blockquote>

<p>这个调优的策略比较粗，可以作为我们调优的总纲领，还需要更细化一下才更具可操作性。</p>

<!--more-->


<blockquote><p>Selecting a Collector</p>

<p>Unless your application has rather strict pause-time requirements, first run your application and allow the VM to select a collector.</p>

<p>If necessary, adjust the heap size to improve performance. If the performance still doesn&rsquo;t meet your goals, then use the following guidelines as a starting point for selecting a collector:</p>

<ul>
<li>If the application has a small data set (up to approximately 100 MB), then select the serial collector with the option <code>-XX:+UseSerialGC</code>. </li>
<li>If the application will be run on a single processor and there are no pause-time requirements, then select the serial collector with the option <code>-XX:+UseSerialGC</code>. </li>
<li>If (a) peak application performance is the first priority and (b) there are no pause-time requirements or pauses of one second or longer are acceptable, then let the VM select the collector or select the parallel collector with <code>-XX:+UseParallelGC</code>. </li>
<li>If response time is more important than overall throughput and garbage collection pauses must be kept shorter, then select the mostly concurrent collector with <code>-XX:+UseG1GC</code>. </li>
<li>If response time is a high priority, then select a fully concurrent collector with <code>-XX:+UseZGC</code>.
 这份指南就更具操作性了。</li>
</ul>
</blockquote>

<p>周志明老师在他的《深入理解 java 虚拟机》中介绍了如何权衡收集器：</p>

<blockquote><p>现在可能有读者要犯选择困难症了，我们应该如何选择一款适合自己应用的收集器呢？这个问题主要受以下三个因素影响：</p>

<ul>
<li><p>应用程序的主要关注点是什么?如果是数据分析、科学计算类的任务，目标是尽可能快算出结果，那吞吐量就是主要关注点；如果是 SLA 应用，那停顿时间直接影响服务质量，严重的甚至会导致事务超时，这样延时就是主要关注点；而如果是客户端应用或者嵌入式应用，那垃圾收集的内存占用则是不可忽视的。</p></li>
<li><p>运行应用的基础设施如何？譬如硬件规格，要涉及的系统架构是x86-32/64、SPAR 还是 ARM/Aarch64；处理器的数量多少，分配的内存大小；选择的操作系统是Linux、Solaris 还是 Windows 等。</p></li>
<li><p>使用 JDK 的发行商是什么？版本号是多少？是 ZingJDK/Zulu、OracleJDK、OpenJDK、OpenJ9 抑或是其他公司的发行版? 该 JDK 对应了《 Java 虚拟机规范 》的哪个版本？</p></li>
</ul>


<p>一般来说，收集器的选择就从以上这几点出发来考虑。举个例子，假设某个直接面向用户提供服务的 B/S 系统准备选择垃圾收集器，一般来说延迟时间是这类应用的主要关注点，那么：</p>

<ul>
<li><p>如果你有充足的预算但没有太多调优经验，那么一套带有商业技术支持的专有硬件或软件解决方案是不错的选择。Azul 公司以前主推的 Vega 系统和现在主推的 Zing VM 是这方面的代表，这样你就可以使用传说中的 C4 收集器。</p></li>
<li><p>如果你虽然没有充足的预算去使用商业解决方案，但能掌握软硬件型号，使用较新的版本，同时又特别注重延时，那 ZGC 很值得尝试。</p></li>
<li><p>如果你对还处于实验状态的收集器的稳定性有顾虑，或者必须运行在 Windows 操作系统下，那 ZGC 无缘了，试试 Shenandoah 吧。</p></li>
<li><p>如果你接手的是遗留系统，软硬件基础设施和 JDK 版本都比较落后，那就根据内存规模衡量一下，对于大概 4GB 到 6GB 以下的堆内存，CMS 一般能处理得比较好，而对于更大的堆内存，可重点考察一下 G1。</p></li>
</ul>


<p>当然，以上都是仅从理论出发的分析，实战中切不可纸上谈兵，根据系统实际情况去测试才是选择收集器的最终依据。</p></blockquote>

<p>这里的建议更具体，结合这两份建议，谈谈我个人的理解。</p>

<p>目前 HotSpot 虚拟机主要有 Serial, Parallel, CMS, Shenandoah 和 ZGC 这几款收集器，Serial, Parallel 主要关注吞吐量; CMS, Shenandoah 和 ZGC 主要关注低延时。</p>

<p>在做 Java 服务端开发时，我们基本可以不考虑 Serial 收集器。而服务端的应用主要是面向用户提供服务的，所以要选择低延时的收集器。根据使用 java 版本和堆内存大小从 CMS, G1 和 ZGC 中选择，然后进行测试，根据测试结果选择。</p>

<p>下面举个 Tomcat 的例子，Tomcat 9 支持 java 8 及以上的版本，可以用来试验各自收集器。</p>

<p>在 Tomcat 的安装包对应的 bin 目录下新建 setenv.sh 文件:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/sh
</span><span class='line'># Set any additional Tomcat options
</span><span class='line'>#CATALINA_OPTS="-Dcatalina.base=$CATALINA_HOME -Dcatalina.home=$CATALINA_HOME"
</span><span class='line'>#CATALINA_OPTS="-XX:+PrintGC -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+PrintHeapAtGC -Xloggc:/usr/local/apache-tomcat-9.0.35/logs/parallel-gc.log"
</span><span class='line'>#CATALINA_OPTS="-XX:+UseConcMarkSweepGC -XX:+PrintGC -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+PrintHeapAtGC -Xloggc:/usr/local/apache-tomcat-9.0.35/logs/cms-gc.log"
</span><span class='line'>#CATALINA_OPTS="-XX:+UseG1GC -Xlog:gc*=debug:file=/usr/local/apache-tomcat-9.0.35/logs/g1-gc.log"
</span><span class='line'>#CATALINA_OPTS="-XX:+UseZGC -Xlog:gc*=debug:file=/usr/local/apache-tomcat-9.0.35/logs/z-gc.log"
</span><span class='line'>#JDK_JAVA_OPTIONS="--add-opens=java.base/java.lang=ALL-UNNAMED --add-opens=java.base/java.io=ALL-UNNAMED --add-opens=java.rmi/sun.rmi.transport=ALL-UNNAMED"</span></code></pre></td></tr></table></div></figure>


<p>取消对应行的注释去试验对应的收集器，可以考虑使用 ab 之类压测工具观察性能变化，<a href="gceasy.io">gceasy</a> 可以用来辅助分析 gc 日志。</p>

<h2>Reference</h2>

<ul>
<li><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning">HotSpot Virtual Machine Garbage Collection Tuning Guide</a></li>
<li>深入理解 java 虚拟机</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MyBatis 的工作流程(一)]]></title>
    <link href="http://DamianSheldon.github.io/blog/mybatis-workflow.html"/>
    <updated>2022-10-11T16:06:03+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/mybatis-workflow</id>
    <content type="html"><![CDATA[<p>MyBatis 的工作流程主要是以下几步：</p>

<ul>
<li>加载配置并初始化</li>
<li>接收调用请求</li>
<li>处理操作请求</li>
<li>返回处理结果</li>
</ul>


<p>本文我们先具体来看看它与 Spring Boot 集成时的初始化。</p>

<p>MyBatis 官方团队有开发一个 Spring Boot Starter，我们通过它的代码来看下配置加载和初始化。配置的入口是 MybatisAutoConfiguration，它会按需创建 sqlSessionFactory 和 sqlSessionTemplate 这两个 bean 对象，同时它还包含一个内部配置类 MapperScannerRegistrarNotFoundConfiguration:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@org.springframework.context.annotation.Configuration
</span><span class='line'>@Import(AutoConfiguredMapperScannerRegistrar.class)
</span><span class='line'>@ConditionalOnMissingBean({ MapperFactoryBean.class, MapperScannerConfigurer.class })
</span><span class='line'>public static class MapperScannerRegistrarNotFoundConfiguration implements InitializingBean {
</span><span class='line'>
</span><span class='line'>  @Override
</span><span class='line'>  public void afterPropertiesSet() {
</span><span class='line'>    logger.debug(
</span><span class='line'>        "Not found configuration for registering mapper bean using @MapperScan, MapperFactoryBean and MapperScannerConfigurer.");
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>MapperScannerRegistrarNotFoundConfiguration 导入了 AutoConfiguredMapperScannerRegistrar，它会向 IoC 容器注册 MapperScannerConfigurer。</p>

<!--more-->


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/**
</span><span class='line'> * This will just scan the same base package as Spring Boot does. If you want more power, you can explicitly use
</span><span class='line'> * {@link org.mybatis.spring.annotation.MapperScan} but this will get typed mappers working correctly, out-of-the-box,
</span><span class='line'> * similar to using Spring Data JPA repositories.
</span><span class='line'> */
</span><span class='line'>public static class AutoConfiguredMapperScannerRegistrar implements BeanFactoryAware, ImportBeanDefinitionRegistrar {
</span><span class='line'>
</span><span class='line'>  private BeanFactory beanFactory;
</span><span class='line'>
</span><span class='line'>  @Override
</span><span class='line'>  public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {
</span><span class='line'>
</span><span class='line'>    if (!AutoConfigurationPackages.has(this.beanFactory)) {
</span><span class='line'>      logger.debug("Could not determine auto-configuration package, automatic mapper scanning disabled.");
</span><span class='line'>      return;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    logger.debug("Searching for mappers annotated with @Mapper");
</span><span class='line'>
</span><span class='line'>    List&lt;String&gt; packages = AutoConfigurationPackages.get(this.beanFactory);
</span><span class='line'>    if (logger.isDebugEnabled()) {
</span><span class='line'>      packages.forEach(pkg -&gt; logger.debug("Using auto-configuration base package '{}'", pkg));
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    BeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition(MapperScannerConfigurer.class);
</span><span class='line'>    builder.addPropertyValue("processPropertyPlaceHolders", true);
</span><span class='line'>    builder.addPropertyValue("annotationClass", Mapper.class);
</span><span class='line'>    builder.addPropertyValue("basePackage", StringUtils.collectionToCommaDelimitedString(packages));
</span><span class='line'>    BeanWrapper beanWrapper = new BeanWrapperImpl(MapperScannerConfigurer.class);
</span><span class='line'>    Set&lt;String&gt; propertyNames = Stream.of(beanWrapper.getPropertyDescriptors()).map(PropertyDescriptor::getName)
</span><span class='line'>        .collect(Collectors.toSet());
</span><span class='line'>    if (propertyNames.contains("lazyInitialization")) {
</span><span class='line'>      // Need to mybatis-spring 2.0.2+
</span><span class='line'>      builder.addPropertyValue("lazyInitialization", "${mybatis.lazy-initialization:false}");
</span><span class='line'>    }
</span><span class='line'>    if (propertyNames.contains("defaultScope")) {
</span><span class='line'>      // Need to mybatis-spring 2.0.6+
</span><span class='line'>      builder.addPropertyValue("defaultScope", "${mybatis.mapper-default-scope:}");
</span><span class='line'>    }
</span><span class='line'>    registry.registerBeanDefinition(MapperScannerConfigurer.class.getName(), builder.getBeanDefinition());
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  @Override
</span><span class='line'>  public void setBeanFactory(BeanFactory beanFactory) {
</span><span class='line'>    this.beanFactory = beanFactory;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>MapperScannerConfigurer 是一个 BeanDefinitionRegistryPostProcessor，IoC 会调用它的 postProcessBeanDefinitionRegistry 方法来处理 bean 定义:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/**
</span><span class='line'> * {@inheritDoc}
</span><span class='line'> *
</span><span class='line'> * @since 1.0.2
</span><span class='line'> */
</span><span class='line'>@Override
</span><span class='line'>public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {
</span><span class='line'>  if (this.processPropertyPlaceHolders) {
</span><span class='line'>    processPropertyPlaceHolders();
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  ClassPathMapperScanner scanner = new ClassPathMapperScanner(registry);
</span><span class='line'>  scanner.setAddToConfig(this.addToConfig);
</span><span class='line'>  scanner.setAnnotationClass(this.annotationClass);
</span><span class='line'>  scanner.setMarkerInterface(this.markerInterface);
</span><span class='line'>  scanner.setSqlSessionFactory(this.sqlSessionFactory);
</span><span class='line'>  scanner.setSqlSessionTemplate(this.sqlSessionTemplate);
</span><span class='line'>  scanner.setSqlSessionFactoryBeanName(this.sqlSessionFactoryBeanName);
</span><span class='line'>  scanner.setSqlSessionTemplateBeanName(this.sqlSessionTemplateBeanName);
</span><span class='line'>  scanner.setResourceLoader(this.applicationContext);
</span><span class='line'>  scanner.setBeanNameGenerator(this.nameGenerator);
</span><span class='line'>  scanner.setMapperFactoryBeanClass(this.mapperFactoryBeanClass);
</span><span class='line'>  if (StringUtils.hasText(lazyInitialization)) {
</span><span class='line'>    scanner.setLazyInitialization(Boolean.valueOf(lazyInitialization));
</span><span class='line'>  }
</span><span class='line'>  if (StringUtils.hasText(defaultScope)) {
</span><span class='line'>    scanner.setDefaultScope(defaultScope);
</span><span class='line'>  }
</span><span class='line'>  scanner.registerFilters();
</span><span class='line'>  scanner.scan(
</span><span class='line'>      StringUtils.tokenizeToStringArray(this.basePackage, ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS));
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>从方法中我们可以知道，它使用 ClassPathMapperScanner 来扫描注册 Mapper，ClassPathMapperScanner 覆盖了父类 ClassPathBeanDefinitionScanner 的 doScan 方法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/**
</span><span class='line'> * Calls the parent search that will search and register all the candidates. Then the registered objects are post
</span><span class='line'> * processed to set them as MapperFactoryBeans
</span><span class='line'> */
</span><span class='line'>@Override
</span><span class='line'>public Set&lt;BeanDefinitionHolder&gt; doScan(String... basePackages) {
</span><span class='line'>  Set&lt;BeanDefinitionHolder&gt; beanDefinitions = super.doScan(basePackages);
</span><span class='line'>
</span><span class='line'>  if (beanDefinitions.isEmpty()) {
</span><span class='line'>    LOGGER.warn(() -&gt; "No MyBatis mapper was found in '" + Arrays.toString(basePackages)
</span><span class='line'>        + "' package. Please check your configuration.");
</span><span class='line'>  } else {
</span><span class='line'>    processBeanDefinitions(beanDefinitions);
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  return beanDefinitions;
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>它在 processBeanDefinitions 方法中对 bean 定义进行了进一步的处理，把 bean 的 bean class 换成了 MapperFactoryBean，由它来生成创建对应的 Mapper。另外就是设置按类型自动连线 <code>definition.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_BY_TYPE)</code>，我在跟代码的过程中一开始很奇怪 ClassPathMapperScanner 注册 MapperFactoryBean 的 bean 定义时 sqlSessionTemplate 为 null，那么是在什么时候设置的 sqlSessionTemplate 呢？经过一番代码追踪，发现是 beanDefinition 设置了 AutowireMode，AbstractAutowireCapableBeanFactory 会帮助自动关联。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>private void processBeanDefinitions(Set&lt;BeanDefinitionHolder&gt; beanDefinitions) {
</span><span class='line'>  AbstractBeanDefinition definition;
</span><span class='line'>  BeanDefinitionRegistry registry = getRegistry();
</span><span class='line'>  for (BeanDefinitionHolder holder : beanDefinitions) {
</span><span class='line'>    definition = (AbstractBeanDefinition) holder.getBeanDefinition();
</span><span class='line'>    boolean scopedProxy = false;
</span><span class='line'>    if (ScopedProxyFactoryBean.class.getName().equals(definition.getBeanClassName())) {
</span><span class='line'>      definition = (AbstractBeanDefinition) Optional
</span><span class='line'>          .ofNullable(((RootBeanDefinition) definition).getDecoratedDefinition())
</span><span class='line'>          .map(BeanDefinitionHolder::getBeanDefinition).orElseThrow(() -&gt; new IllegalStateException(
</span><span class='line'>              "The target bean definition of scoped proxy bean not found. Root bean definition[" + holder + "]"));
</span><span class='line'>      scopedProxy = true;
</span><span class='line'>    }
</span><span class='line'>    String beanClassName = definition.getBeanClassName();
</span><span class='line'>    LOGGER.debug(() -&gt; "Creating MapperFactoryBean with name '" + holder.getBeanName() + "' and '" + beanClassName
</span><span class='line'>        + "' mapperInterface");
</span><span class='line'>
</span><span class='line'>    // the mapper interface is the original class of the bean
</span><span class='line'>    // but, the actual class of the bean is MapperFactoryBean
</span><span class='line'>    definition.getConstructorArgumentValues().addGenericArgumentValue(beanClassName); // issue #59
</span><span class='line'>    definition.setBeanClass(this.mapperFactoryBeanClass);
</span><span class='line'>
</span><span class='line'>    definition.getPropertyValues().add("addToConfig", this.addToConfig);
</span><span class='line'>
</span><span class='line'>    // Attribute for MockitoPostProcessor
</span><span class='line'>    // https://github.com/mybatis/spring-boot-starter/issues/475
</span><span class='line'>    definition.setAttribute(FACTORY_BEAN_OBJECT_TYPE, beanClassName);
</span><span class='line'>
</span><span class='line'>    boolean explicitFactoryUsed = false;
</span><span class='line'>    if (StringUtils.hasText(this.sqlSessionFactoryBeanName)) {
</span><span class='line'>      definition.getPropertyValues().add("sqlSessionFactory",
</span><span class='line'>          new RuntimeBeanReference(this.sqlSessionFactoryBeanName));
</span><span class='line'>      explicitFactoryUsed = true;
</span><span class='line'>    } else if (this.sqlSessionFactory != null) {
</span><span class='line'>      definition.getPropertyValues().add("sqlSessionFactory", this.sqlSessionFactory);
</span><span class='line'>      explicitFactoryUsed = true;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    if (StringUtils.hasText(this.sqlSessionTemplateBeanName)) {
</span><span class='line'>      if (explicitFactoryUsed) {
</span><span class='line'>        LOGGER.warn(
</span><span class='line'>            () -&gt; "Cannot use both: sqlSessionTemplate and sqlSessionFactory together. sqlSessionFactory is ignored.");
</span><span class='line'>      }
</span><span class='line'>      definition.getPropertyValues().add("sqlSessionTemplate",
</span><span class='line'>          new RuntimeBeanReference(this.sqlSessionTemplateBeanName));
</span><span class='line'>      explicitFactoryUsed = true;
</span><span class='line'>    } else if (this.sqlSessionTemplate != null) {
</span><span class='line'>      if (explicitFactoryUsed) {
</span><span class='line'>        LOGGER.warn(
</span><span class='line'>            () -&gt; "Cannot use both: sqlSessionTemplate and sqlSessionFactory together. sqlSessionFactory is ignored.");
</span><span class='line'>      }
</span><span class='line'>      definition.getPropertyValues().add("sqlSessionTemplate", this.sqlSessionTemplate);
</span><span class='line'>      explicitFactoryUsed = true;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    if (!explicitFactoryUsed) {
</span><span class='line'>      LOGGER.debug(() -&gt; "Enabling autowire by type for MapperFactoryBean with name '" + holder.getBeanName() + "'.");
</span><span class='line'>      definition.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_BY_TYPE);
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    definition.setLazyInit(lazyInitialization);
</span><span class='line'>
</span><span class='line'>    if (scopedProxy) {
</span><span class='line'>      continue;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    if (ConfigurableBeanFactory.SCOPE_SINGLETON.equals(definition.getScope()) && defaultScope != null) {
</span><span class='line'>      definition.setScope(defaultScope);
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    if (!definition.isSingleton()) {
</span><span class='line'>      BeanDefinitionHolder proxyHolder = ScopedProxyUtils.createScopedProxy(holder, registry, true);
</span><span class='line'>      if (registry.containsBeanDefinition(proxyHolder.getBeanName())) {
</span><span class='line'>        registry.removeBeanDefinition(proxyHolder.getBeanName());
</span><span class='line'>      }
</span><span class='line'>      registry.registerBeanDefinition(proxyHolder.getBeanName(), proxyHolder.getBeanDefinition());
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>  }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>MapperFactoryBean 的 getObject 方法如下，它使用上文所述，容器中的 sqlSession bean 来创建 mapper，通常也就是 MybatisAutoConfiguration 定义的 sqlSession bean。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public T getObject() throws Exception {
</span><span class='line'>  return getSqlSession().getMapper(this.mapperInterface);
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>MybatisAutoConfiguration 是定义 sqlSession bean 的代码如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Bean
</span><span class='line'>@ConditionalOnMissingBean
</span><span class='line'>public SqlSessionTemplate sqlSessionTemplate(SqlSessionFactory sqlSessionFactory) {
</span><span class='line'>  ExecutorType executorType = this.properties.getExecutorType();
</span><span class='line'>  if (executorType != null) {
</span><span class='line'>    return new SqlSessionTemplate(sqlSessionFactory, executorType);
</span><span class='line'>  } else {
</span><span class='line'>    return new SqlSessionTemplate(sqlSessionFactory);
</span><span class='line'>  }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>它依赖的 SqlSessionFactory MybatisAutoConfiguration 也有定义:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Bean
</span><span class='line'>@ConditionalOnMissingBean
</span><span class='line'>public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception {
</span><span class='line'>  SqlSessionFactoryBean factory = new SqlSessionFactoryBean();
</span><span class='line'>  factory.setDataSource(dataSource);
</span><span class='line'>  factory.setVfs(SpringBootVFS.class);
</span><span class='line'>  if (StringUtils.hasText(this.properties.getConfigLocation())) {
</span><span class='line'>    factory.setConfigLocation(this.resourceLoader.getResource(this.properties.getConfigLocation()));
</span><span class='line'>  }
</span><span class='line'>  applyConfiguration(factory);
</span><span class='line'>  if (this.properties.getConfigurationProperties() != null) {
</span><span class='line'>    factory.setConfigurationProperties(this.properties.getConfigurationProperties());
</span><span class='line'>  }
</span><span class='line'>  if (!ObjectUtils.isEmpty(this.interceptors)) {
</span><span class='line'>    factory.setPlugins(this.interceptors);
</span><span class='line'>  }
</span><span class='line'>  if (this.databaseIdProvider != null) {
</span><span class='line'>    factory.setDatabaseIdProvider(this.databaseIdProvider);
</span><span class='line'>  }
</span><span class='line'>  if (StringUtils.hasLength(this.properties.getTypeAliasesPackage())) {
</span><span class='line'>    factory.setTypeAliasesPackage(this.properties.getTypeAliasesPackage());
</span><span class='line'>  }
</span><span class='line'>  if (this.properties.getTypeAliasesSuperType() != null) {
</span><span class='line'>    factory.setTypeAliasesSuperType(this.properties.getTypeAliasesSuperType());
</span><span class='line'>  }
</span><span class='line'>  if (StringUtils.hasLength(this.properties.getTypeHandlersPackage())) {
</span><span class='line'>    factory.setTypeHandlersPackage(this.properties.getTypeHandlersPackage());
</span><span class='line'>  }
</span><span class='line'>  if (!ObjectUtils.isEmpty(this.typeHandlers)) {
</span><span class='line'>    factory.setTypeHandlers(this.typeHandlers);
</span><span class='line'>  }
</span><span class='line'>  if (!ObjectUtils.isEmpty(this.properties.resolveMapperLocations())) {
</span><span class='line'>    factory.setMapperLocations(this.properties.resolveMapperLocations());
</span><span class='line'>  }
</span><span class='line'>  Set&lt;String&gt; factoryPropertyNames = Stream
</span><span class='line'>      .of(new BeanWrapperImpl(SqlSessionFactoryBean.class).getPropertyDescriptors()).map(PropertyDescriptor::getName)
</span><span class='line'>      .collect(Collectors.toSet());
</span><span class='line'>  Class&lt;? extends LanguageDriver&gt; defaultLanguageDriver = this.properties.getDefaultScriptingLanguageDriver();
</span><span class='line'>  if (factoryPropertyNames.contains("scriptingLanguageDrivers") && !ObjectUtils.isEmpty(this.languageDrivers)) {
</span><span class='line'>    // Need to mybatis-spring 2.0.2+
</span><span class='line'>    factory.setScriptingLanguageDrivers(this.languageDrivers);
</span><span class='line'>    if (defaultLanguageDriver == null && this.languageDrivers.length == 1) {
</span><span class='line'>      defaultLanguageDriver = this.languageDrivers[0].getClass();
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>  if (factoryPropertyNames.contains("defaultScriptingLanguageDriver")) {
</span><span class='line'>    // Need to mybatis-spring 2.0.2+
</span><span class='line'>    factory.setDefaultScriptingLanguageDriver(defaultLanguageDriver);
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  return factory.getObject();
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>private void applyConfiguration(SqlSessionFactoryBean factory) {
</span><span class='line'>  Configuration configuration = this.properties.getConfiguration();
</span><span class='line'>  if (configuration == null && !StringUtils.hasText(this.properties.getConfigLocation())) {
</span><span class='line'>    configuration = new Configuration();
</span><span class='line'>  }
</span><span class='line'>  if (configuration != null && !CollectionUtils.isEmpty(this.configurationCustomizers)) {
</span><span class='line'>    for (ConfigurationCustomizer customizer : this.configurationCustomizers) {
</span><span class='line'>      customizer.customize(configuration);
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>  factory.setConfiguration(configuration);
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>SqlSessionTemplate 是一个代理对象，它的功能依赖 SqlSessionFactory，它的 getMapper 方法如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Override
</span><span class='line'>public &lt;T&gt; T getMapper(Class&lt;T&gt; type) {
</span><span class='line'>  return getConfiguration().getMapper(type, this);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>实现依赖 getConfiguration, 它的内容如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Override
</span><span class='line'>public Configuration getConfiguration() {
</span><span class='line'>  return this.sqlSessionFactory.getConfiguration();
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>Configuration 就是使用的 sqlSessionFactory 的配置对象。</p>

<p>现在我们聚焦到 SqlSessionFactory 的 Configuration 对象是怎么来的。 SqlSessionFactory 是由 SqlSessionFactoryBean，MybatisAutoConfiguration 有为它设置一个 Configuration :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>private void applyConfiguration(SqlSessionFactoryBean factory) {
</span><span class='line'>  Configuration configuration = this.properties.getConfiguration();
</span><span class='line'>  if (configuration == null && !StringUtils.hasText(this.properties.getConfigLocation())) {
</span><span class='line'>    configuration = new Configuration();
</span><span class='line'>  }
</span><span class='line'>  if (configuration != null && !CollectionUtils.isEmpty(this.configurationCustomizers)) {
</span><span class='line'>    for (ConfigurationCustomizer customizer : this.configurationCustomizers) {
</span><span class='line'>      customizer.customize(configuration);
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>  factory.setConfiguration(configuration);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>那么最终的 Configuration 就是这个外部设置的对象吗？我们继续看它的 getObject 方法:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Override
</span><span class='line'>public SqlSessionFactory getObject() throws Exception {
</span><span class='line'>  if (this.sqlSessionFactory == null) {
</span><span class='line'>    afterPropertiesSet();
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  return this.sqlSessionFactory;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>再看下它的 afterPropertiesSet 方法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public void afterPropertiesSet() throws Exception {
</span><span class='line'>  notNull(dataSource, "Property 'dataSource' is required");
</span><span class='line'>  notNull(sqlSessionFactoryBuilder, "Property 'sqlSessionFactoryBuilder' is required");
</span><span class='line'>  state((configuration == null && configLocation == null) || !(configuration != null && configLocation != null),
</span><span class='line'>      "Property 'configuration' and 'configLocation' can not specified with together");
</span><span class='line'>
</span><span class='line'>  this.sqlSessionFactory = buildSqlSessionFactory();
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>是在 buildSqlSessionFactory 方法中创建的 sqlSessionFactory:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>/**
</span><span class='line'> * Build a {@code SqlSessionFactory} instance.
</span><span class='line'> *
</span><span class='line'> * The default implementation uses the standard MyBatis {@code XMLConfigBuilder} API to build a
</span><span class='line'> * {@code SqlSessionFactory} instance based on a Reader. Since 1.3.0, it can be specified a {@link Configuration}
</span><span class='line'> * instance directly(without config file).
</span><span class='line'> *
</span><span class='line'> * @return SqlSessionFactory
</span><span class='line'> * @throws Exception
</span><span class='line'> *           if configuration is failed
</span><span class='line'> */
</span><span class='line'>protected SqlSessionFactory buildSqlSessionFactory() throws Exception {
</span><span class='line'>
</span><span class='line'>  final Configuration targetConfiguration;
</span><span class='line'>
</span><span class='line'>  XMLConfigBuilder xmlConfigBuilder = null;
</span><span class='line'>  if (this.configuration != null) {
</span><span class='line'>    targetConfiguration = this.configuration;
</span><span class='line'>    if (targetConfiguration.getVariables() == null) {
</span><span class='line'>      targetConfiguration.setVariables(this.configurationProperties);
</span><span class='line'>    } else if (this.configurationProperties != null) {
</span><span class='line'>      targetConfiguration.getVariables().putAll(this.configurationProperties);
</span><span class='line'>    }
</span><span class='line'>  } else if (this.configLocation != null) {
</span><span class='line'>    xmlConfigBuilder = new XMLConfigBuilder(this.configLocation.getInputStream(), null, this.configurationProperties);
</span><span class='line'>    targetConfiguration = xmlConfigBuilder.getConfiguration();
</span><span class='line'>  } else {
</span><span class='line'>    LOGGER.debug(
</span><span class='line'>        () -&gt; "Property 'configuration' or 'configLocation' not specified, using default MyBatis Configuration");
</span><span class='line'>    targetConfiguration = new Configuration();
</span><span class='line'>    Optional.ofNullable(this.configurationProperties).ifPresent(targetConfiguration::setVariables);
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  Optional.ofNullable(this.objectFactory).ifPresent(targetConfiguration::setObjectFactory);
</span><span class='line'>  Optional.ofNullable(this.objectWrapperFactory).ifPresent(targetConfiguration::setObjectWrapperFactory);
</span><span class='line'>  Optional.ofNullable(this.vfs).ifPresent(targetConfiguration::setVfsImpl);
</span><span class='line'>
</span><span class='line'>  if (hasLength(this.typeAliasesPackage)) {
</span><span class='line'>    scanClasses(this.typeAliasesPackage, this.typeAliasesSuperType).stream()
</span><span class='line'>        .filter(clazz -&gt; !clazz.isAnonymousClass()).filter(clazz -&gt; !clazz.isInterface())
</span><span class='line'>        .filter(clazz -&gt; !clazz.isMemberClass()).forEach(targetConfiguration.getTypeAliasRegistry()::registerAlias);
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  if (!isEmpty(this.typeAliases)) {
</span><span class='line'>    Stream.of(this.typeAliases).forEach(typeAlias -&gt; {
</span><span class='line'>      targetConfiguration.getTypeAliasRegistry().registerAlias(typeAlias);
</span><span class='line'>      LOGGER.debug(() -&gt; "Registered type alias: '" + typeAlias + "'");
</span><span class='line'>    });
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  if (!isEmpty(this.plugins)) {
</span><span class='line'>    Stream.of(this.plugins).forEach(plugin -&gt; {
</span><span class='line'>      targetConfiguration.addInterceptor(plugin);
</span><span class='line'>      LOGGER.debug(() -&gt; "Registered plugin: '" + plugin + "'");
</span><span class='line'>    });
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  if (hasLength(this.typeHandlersPackage)) {
</span><span class='line'>    scanClasses(this.typeHandlersPackage, TypeHandler.class).stream().filter(clazz -&gt; !clazz.isAnonymousClass())
</span><span class='line'>        .filter(clazz -&gt; !clazz.isInterface()).filter(clazz -&gt; !Modifier.isAbstract(clazz.getModifiers()))
</span><span class='line'>        .forEach(targetConfiguration.getTypeHandlerRegistry()::register);
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  if (!isEmpty(this.typeHandlers)) {
</span><span class='line'>    Stream.of(this.typeHandlers).forEach(typeHandler -&gt; {
</span><span class='line'>      targetConfiguration.getTypeHandlerRegistry().register(typeHandler);
</span><span class='line'>      LOGGER.debug(() -&gt; "Registered type handler: '" + typeHandler + "'");
</span><span class='line'>    });
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  targetConfiguration.setDefaultEnumTypeHandler(defaultEnumTypeHandler);
</span><span class='line'>
</span><span class='line'>  if (!isEmpty(this.scriptingLanguageDrivers)) {
</span><span class='line'>    Stream.of(this.scriptingLanguageDrivers).forEach(languageDriver -&gt; {
</span><span class='line'>      targetConfiguration.getLanguageRegistry().register(languageDriver);
</span><span class='line'>      LOGGER.debug(() -&gt; "Registered scripting language driver: '" + languageDriver + "'");
</span><span class='line'>    });
</span><span class='line'>  }
</span><span class='line'>  Optional.ofNullable(this.defaultScriptingLanguageDriver)
</span><span class='line'>      .ifPresent(targetConfiguration::setDefaultScriptingLanguage);
</span><span class='line'>
</span><span class='line'>  if (this.databaseIdProvider != null) {// fix #64 set databaseId before parse mapper xmls
</span><span class='line'>    try {
</span><span class='line'>      targetConfiguration.setDatabaseId(this.databaseIdProvider.getDatabaseId(this.dataSource));
</span><span class='line'>    } catch (SQLException e) {
</span><span class='line'>      throw new NestedIOException("Failed getting a databaseId", e);
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  Optional.ofNullable(this.cache).ifPresent(targetConfiguration::addCache);
</span><span class='line'>
</span><span class='line'>  if (xmlConfigBuilder != null) {
</span><span class='line'>    try {
</span><span class='line'>      xmlConfigBuilder.parse();
</span><span class='line'>      LOGGER.debug(() -&gt; "Parsed configuration file: '" + this.configLocation + "'");
</span><span class='line'>    } catch (Exception ex) {
</span><span class='line'>      throw new NestedIOException("Failed to parse config resource: " + this.configLocation, ex);
</span><span class='line'>    } finally {
</span><span class='line'>      ErrorContext.instance().reset();
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  targetConfiguration.setEnvironment(new Environment(this.environment,
</span><span class='line'>      this.transactionFactory == null ? new SpringManagedTransactionFactory() : this.transactionFactory,
</span><span class='line'>      this.dataSource));
</span><span class='line'>
</span><span class='line'>  if (this.mapperLocations != null) {
</span><span class='line'>    if (this.mapperLocations.length == 0) {
</span><span class='line'>      LOGGER.warn(() -&gt; "Property 'mapperLocations' was specified but matching resources are not found.");
</span><span class='line'>    } else {
</span><span class='line'>      for (Resource mapperLocation : this.mapperLocations) {
</span><span class='line'>        if (mapperLocation == null) {
</span><span class='line'>          continue;
</span><span class='line'>        }
</span><span class='line'>        try {
</span><span class='line'>          XMLMapperBuilder xmlMapperBuilder = new XMLMapperBuilder(mapperLocation.getInputStream(),
</span><span class='line'>              targetConfiguration, mapperLocation.toString(), targetConfiguration.getSqlFragments());
</span><span class='line'>          xmlMapperBuilder.parse();
</span><span class='line'>        } catch (Exception e) {
</span><span class='line'>          throw new NestedIOException("Failed to parse mapping resource: '" + mapperLocation + "'", e);
</span><span class='line'>        } finally {
</span><span class='line'>          ErrorContext.instance().reset();
</span><span class='line'>        }
</span><span class='line'>        LOGGER.debug(() -&gt; "Parsed mapper file: '" + mapperLocation + "'");
</span><span class='line'>      }
</span><span class='line'>    }
</span><span class='line'>  } else {
</span><span class='line'>    LOGGER.debug(() -&gt; "Property 'mapperLocations' was not specified.");
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  return this.sqlSessionFactoryBuilder.build(targetConfiguration);
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>从这段代码可知，由于 MybatisAutoConfiguration 有设置一个 Configuration ，所以 SqlSessionFactoryBean 使用的就是设置的这个 Configuration。</p>

<p>sqlSessionFactoryBuilder 默认是 SqlSessionFactoryBuilder，它的赋值代码为：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>private SqlSessionFactoryBuilder sqlSessionFactoryBuilder = new SqlSessionFactoryBuilder();</span></code></pre></td></tr></table></div></figure>


<p>它的 build 方法实现为:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public SqlSessionFactory build(Configuration config) {
</span><span class='line'>  return new DefaultSqlSessionFactory(config);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>因此创建的是 DefaultSqlSessionFactory 对象。</p>

<p>现在 SqlSessionFactory, SqlSession, Configuration 的实现来源都清楚了，我们继续来看创建 mapper 的代码，看 mapper 的实现是什么？</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public &lt;T&gt; T getMapper(Class&lt;T&gt; type, SqlSession sqlSession) {
</span><span class='line'>  return mapperRegistry.getMapper(type, sqlSession);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>mapperRegistry 的实现是 MapperRegistry，它的 getMapper 方法如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public &lt;T&gt; T getMapper(Class&lt;T&gt; type, SqlSession sqlSession) {
</span><span class='line'>  final MapperProxyFactory&lt;T&gt; mapperProxyFactory = (MapperProxyFactory&lt;T&gt;) knownMappers.get(type);
</span><span class='line'>  if (mapperProxyFactory == null) {
</span><span class='line'>    throw new BindingException("Type " + type + " is not known to the MapperRegistry.");
</span><span class='line'>  }
</span><span class='line'>  try {
</span><span class='line'>    return mapperProxyFactory.newInstance(sqlSession);
</span><span class='line'>  } catch (Exception e) {
</span><span class='line'>    throw new BindingException("Error getting mapper instance. Cause: " + e, e);
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>它是从 knownMappers 取出类型对应的 MapperProxyFactory，那么它是何时如何注册的呢？</p>

<p>前面我们说过， Mapper 对应向 IoC 注册的的 bean 定义是 MapperFactoryBean 对象，MapperFactory 继承自 SqlSessionDaoSupport，而 SqlSessionDaoSupport 继承自 DaoSupport，DaoSupport 实现 InitializingBean 接口，所以在实例化 mapper 时会实例化出 MapperFactory，并先调用它的 afterPropertiesSet 方法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Override
</span><span class='line'>public final void afterPropertiesSet() throws IllegalArgumentException, BeanInitializationException {
</span><span class='line'>  // Let abstract subclasses check their configuration.
</span><span class='line'>  checkDaoConfig();
</span><span class='line'>
</span><span class='line'>  // Let concrete implementations initialize themselves.
</span><span class='line'>  try {
</span><span class='line'>      initDao();
</span><span class='line'>  }
</span><span class='line'>  catch (Exception ex) {
</span><span class='line'>      throw new BeanInitializationException("Initialization of DAO failed", ex);
</span><span class='line'>  }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>MapperFactory 覆盖了 checkDaoConfig 方法:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>protected void checkDaoConfig() {
</span><span class='line'>  super.checkDaoConfig();
</span><span class='line'>
</span><span class='line'>  notNull(this.mapperInterface, "Property 'mapperInterface' is required");
</span><span class='line'>
</span><span class='line'>  Configuration configuration = getSqlSession().getConfiguration();
</span><span class='line'>  if (this.addToConfig && !configuration.hasMapper(this.mapperInterface)) {
</span><span class='line'>    try {
</span><span class='line'>      configuration.addMapper(this.mapperInterface);
</span><span class='line'>    } catch (Exception e) {
</span><span class='line'>      logger.error("Error while adding the mapper '" + this.mapperInterface + "' to configuration.", e);
</span><span class='line'>      throw new IllegalArgumentException(e);
</span><span class='line'>    } finally {
</span><span class='line'>      ErrorContext.instance().reset();
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>也就是在这个方法中向 Configuration 添加了 mapper 对应的 MapperProxyFactory 类型:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public &lt;T&gt; void addMapper(Class&lt;T&gt; type) {
</span><span class='line'>  mapperRegistry.addMapper(type);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>public &lt;T&gt; void addMapper(Class&lt;T&gt; type) {
</span><span class='line'>  if (type.isInterface()) {
</span><span class='line'>    if (hasMapper(type)) {
</span><span class='line'>      throw new BindingException("Type " + type + " is already known to the MapperRegistry.");
</span><span class='line'>    }
</span><span class='line'>    boolean loadCompleted = false;
</span><span class='line'>    try {
</span><span class='line'>      knownMappers.put(type, new MapperProxyFactory&lt;&gt;(type));
</span><span class='line'>      // It's important that the type is added before the parser is run
</span><span class='line'>      // otherwise the binding may automatically be attempted by the
</span><span class='line'>      // mapper parser. If the type is already known, it won't try.
</span><span class='line'>      MapperAnnotationBuilder parser = new MapperAnnotationBuilder(config, type);
</span><span class='line'>      parser.parse();
</span><span class='line'>      loadCompleted = true;
</span><span class='line'>    } finally {
</span><span class='line'>      if (!loadCompleted) {
</span><span class='line'>        knownMappers.remove(type);
</span><span class='line'>      }
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>从上述代码可以看出 mapper 对应的 MapperProxyFactory 类型是用定义的 mapper 接口类型参数化的 MapperProxyFactory，它的 <code>newInstance(SqlSession sqlSession)</code> 方法如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public T newInstance(SqlSession sqlSession) {
</span><span class='line'>  final MapperProxy&lt;T&gt; mapperProxy = new MapperProxy&lt;&gt;(sqlSession, mapperInterface, methodCache);
</span><span class='line'>  return newInstance(mapperProxy);
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>最后为 mapper 接口创建向 mapperProxy 实例转发调用的代理对象。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>protected T newInstance(MapperProxy&lt;T&gt; mapperProxy) {
</span><span class='line'>  return (T) Proxy.newProxyInstance(mapperInterface.getClassLoader(), new Class[] { mapperInterface }, mapperProxy);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>也就是说，mapper 接口类型对象等效于一个 MapperProxy 对象。至此，MyBatis 的初始化过程就梳理清楚了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring MVC 中的异常处理]]></title>
    <link href="http://DamianSheldon.github.io/blog/exception-handling-in-spring-mvc.html"/>
    <updated>2022-09-30T10:06:54+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/exception-handling-in-spring-mvc</id>
    <content type="html"><![CDATA[<p>使用 Spring 来开发 web 应用时很有必要建立一个统一的异常处理体系。想要建立这个体系，我们先要搞清楚 Spring MVC 中的异常处理机制。 Spring MVC 是基于 Servlet，所以它遵循 Servlet 规范。</p>

<p>Servlet 规范中有详细的错误处理说明，简单来说就是 Servlet 在处理请求时可能会抛出异常或者调用 <code>sendError</code> ，这时 Servlet-Container 就要产生相应的错误界面，错误界面是允许自定义的。Spring MVC 的核心之一是 DispatchServlet，它是一个前端控制器，所有的请求处理都由它来驱动，从名字可以看出，它也是一个 Servlet，所以它的错误处理机制自然要遵循 Servlet 规范。从完整性的角度来看，还一种错误处理方法，Servlet 可以自己设置 HTTP 的 status code 和 body，也就是不和 Servlet-Container 联动来处理错误，而是完全自主地处理。</p>

<p>我们先来看 DispatcherServlet 的异常处理机制，Spring 团队将异常处理功能集中到 HandlerExceptionResolver 接口的实现类中，DispatcherServlet 在初始化过程会把 IoC 容器中所有的 HandlerExceptionResolver 的实现类排好序后组装起来用于异常处理。</p>

<p>现在我们使用 Spring 来开发 web 应用时应该都会选择 Spring Boot 来配置 Spring，和异常相关的自动配置类为 ErrorMvcAutoConfiguration 和 WebMvcAutoConfiguration， 它们默认配置两个 HandlerExceptionResolver: DefaultErrorAttributes 和 HandleExceptionResolverComposite。</p>

<p>HandleExceptionResolverComposite 默认包含以下三个 HandlerExceptionResolver:</p>

<blockquote><ul>
<li>ExceptionHandlerExceptionResolver matches uncaught exceptions against suitable @ExceptionHandler methods on both the handler (controller) and on any controller-advices.</li>
<li>ResponseStatusExceptionResolver looks for uncaught exceptions annotated by @ResponseStatus (as described in Section 1)</li>
<li>DefaultHandlerExceptionResolver converts standard Spring exceptions and converts them to HTTP Status Codes (I have not mentioned this above as it is internal to Spring MVC).</li>
</ul>
</blockquote>

<p>Spring 官方博客帮我们总结了 Spring Boot 默认配置的异常处理流程：</p>

<blockquote><ol>
<li>In the event of any unhanded error, Spring Boot forwards internally to /error.</li>
<li>Boot sets up a BasicErrorController to handle any request to /error. The controller adds error information to the internal Model and returns error as the logical view name.</li>
<li>If any view-resolver(s) are configured, they will try to use a corresponding error-view.</li>
<li>Otherwise, a default error page is provided using a dedicated View object (making it independent of any view-resolution system you may be using).</li>
<li>Spring Boot sets up a BeanNameViewResolver so that /error can be mapped to a View of the same name.</li>
<li>If you look in Boot’s ErrorMvcAutoConfiguration class you will see that the defaultErrorView is returned as a bean called error. This is the View bean found by the BeanNameViewResolver.</li>
</ol>
</blockquote>

<p>对于 Servlet-Container 层面的错误处理，Spring 官方博客的介绍如下：</p>

<blockquote><p>Container-Wide Exception Handling</p>

<p>Exceptions thrown outside the Spring Framework, such as from a servlet Filter, are also reported by Spring Boot’s fallback error page.
To do this Spring Boot has to register a default error page for the container. In Servlet 2, there is an <code>&lt;error-page&gt;</code> directive that you can add to your web.xml to do this. Sadly Servlet 3 does not offer a Java API equivalent. Instead Spring Boot does the following:</p>

<ul>
<li>For a Jar application, with an embedded container, it registers a default error page using Container specific API.</li>
<li>For a Spring Boot application deployed as a traditional WAR file, a Servlet Filter is used to catch exceptions raised further down the line and handle it.</li>
</ul>
</blockquote>

<p>我们可以按照上述线索在 Spring Boot 的自动配置代码中找到相关的代码。</p>

<p>当开发 REST API 项目时，我希望业务抛出的异常能契合 Spring Boot 默认配置的异常处理机制，让整个异常体系尽量统一，接口返回给终端统一格式的错误信息，这样终端也能统一处理接口错误。那么我们应该如何做？</p>

<p>我们这里需要的是一个全局的异常处理机制，Spring MVC 提供给我们两种配置全局异常处理的方法：</p>

<ul>
<li>配置 HandlerExceptionResolver</li>
<li>使用 <code>@ControllerAdvice</code> 注解的类</li>
</ul>


<p>相比之下，个人觉得使用 <code>@ControllerAdvice</code> 注解的类会方便一些，能达到感知框架的存在。我们可以定义一个异常处理基类，发布成一个库，然后在需要用到的项目中引入这个库，在项目中继承该基类定义一个 <code>@ControllerAdvice</code> 注解的异常处理类。</p>

<p>选好全局异常处理机制后，那么我们应该如何来设计项目的业务异常类呢?</p>

<p>Spring 官方博客给出了如下建议:</p>

<blockquote><p>As usual, Spring likes to offer you choice, so what should you do? Here are some rules of thumb. However if you have a preference for XML configuration or Annotations, that’s fine too.</p>

<ul>
<li>For exceptions you write, consider adding @ResponseStatus to them.</li>
<li>For all other exceptions implement an @ExceptionHandler method on a @ControllerAdvice class or use an instance of SimpleMappingExceptionResolver. You may well have SimpleMappingExceptionResolver configured for your application already, in which case it may be easier to add new exception classes to it than implement a @ControllerAdvice.</li>
<li>For Controller specific exception handling add @ExceptionHandler methods to your controller.</li>
<li>Warning: Be careful mixing too many of these options in the same application. If the same exception can be handed in more than one way, you may not get the behavior you wanted. @ExceptionHandler methods on the Controller are always selected before those on any @ControllerAdvice instance. It is undefined what order controller-advices are processed.</li>
</ul>
</blockquote>

<!--more-->


<p>这里我们重点来看第一条建议，他建议我们自己写的异常类可以考虑加上 <code>@ResponseStatus</code> 注解，这样 service 就可以往上层传递 HTTP 的 status 信息，然后可以根据异常的类型填充 body 信息。这样做当然可以，只是这样一来异常类数量容易膨胀，定义异常类也是很乏味。我觉得可以定义一个能表达 HTTP status, headers 和 body 信息的类，然后抛出它的实例，他的建议作为补充。</p>

<p>设计好异常类层级后，接口出错时应该返回些什么信息给终端？</p>

<p>《Web API 的设计与开发》作者建议的单个和多个错误信息如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// 单个
</span><span class='line'>{
</span><span class='line'>  "error": {
</span><span class='line'>      "code": 2013,
</span><span class='line'>      "message": "Bad authentication token",
</span><span class='line'>      "info": "http://docs.example.com/api/v1/authentication"
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>// 多个
</span><span class='line'>{
</span><span class='line'>  "errors": [
</span><span class='line'>      {
</span><span class='line'>          "code": 2013,
</span><span class='line'>          "message": "Bad authentication token",
</span><span class='line'>          "info": "http://docs.example.com/api/v1/authentication"
</span><span class='line'>      }
</span><span class='line'>  ]
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>同样，我还是希望业务异常产生的错误信息能够兼容 Spring Boot 默认产生的错误信息，这样终端可以统一处理错误信息。Spring Boot 默认产生的错误信息包含如下字段：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>timestamp - The time that the errors were extracted
</span><span class='line'>status - The status code
</span><span class='line'>error - The error reason
</span><span class='line'>exception - The class name of the root exception (if configured)
</span><span class='line'>message - The exception message (if configured)
</span><span class='line'>errors - Any ObjectErrors from a BindingResult exception (if configured)
</span><span class='line'>trace - The exception stack trace (if configured)
</span><span class='line'>path - The URL path when the exception was raised</span></code></pre></td></tr></table></div></figure>


<p>综上所述，我们可以定义 REST API 的错误信息为 RestErrorInfo:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class RestErrorInfo {
</span><span class='line'>    private Integer code;
</span><span class='line'>
</span><span class='line'>    private String message;
</span><span class='line'>
</span><span class='line'>    private String info;
</span><span class='line'>    
</span><span class='line'>    // 省略的 Constructor, Getter and Setter
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>异常类 ServiceException 为：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package com.github.damiansheldon.exception;
</span><span class='line'>
</span><span class='line'>import org.springframework.core.NestedRuntimeException;
</span><span class='line'>import org.springframework.http.HttpHeaders;
</span><span class='line'>import org.springframework.http.HttpStatus;
</span><span class='line'>
</span><span class='line'>public class ServiceException extends NestedRuntimeException {
</span><span class='line'>
</span><span class='line'>    private HttpStatus status;
</span><span class='line'>
</span><span class='line'>    private HttpHeaders headers;
</span><span class='line'>
</span><span class='line'>    private RestErrorInfo errorInfo;
</span><span class='line'>
</span><span class='line'>    private ServiceException(Builder builder) {
</span><span class='line'>        super(builder.errorInfo.getMessage(), builder.cause);
</span><span class='line'>        this.errorInfo = builder.errorInfo;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    public HttpStatus getStatus() {
</span><span class='line'>        return status;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    public HttpHeaders getHeaders() {
</span><span class='line'>        return headers;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    public RestErrorInfo getErrorInfo() {
</span><span class='line'>        return errorInfo;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    public static class Builder {
</span><span class='line'>        private HttpStatus status = HttpStatus.INTERNAL_SERVER_ERROR;
</span><span class='line'>        private HttpHeaders headers;
</span><span class='line'>        private RestErrorInfo errorInfo;
</span><span class='line'>        private Throwable cause;
</span><span class='line'>
</span><span class='line'>        public Builder(RestErrorInfo errorInfo) {
</span><span class='line'>            this.errorInfo = errorInfo;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        public Builder status(HttpStatus status) {
</span><span class='line'>            this.status = status;
</span><span class='line'>            return this;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        public Builder headers(HttpHeaders headers) {
</span><span class='line'>            this.headers = headers;
</span><span class='line'>            return this;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        public Builder cause(Throwable cause) {
</span><span class='line'>            this.cause = cause;
</span><span class='line'>            return this;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        public ServiceException build() {
</span><span class='line'>            return new ServiceException(this);
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>异常处理类为：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package com.github.damiansheldon.exception;
</span><span class='line'>
</span><span class='line'>import org.springframework.http.HttpHeaders;
</span><span class='line'>import org.springframework.http.HttpStatus;
</span><span class='line'>import org.springframework.http.ResponseEntity;
</span><span class='line'>import org.springframework.lang.Nullable;
</span><span class='line'>import org.springframework.web.bind.annotation.ExceptionHandler;
</span><span class='line'>import org.springframework.web.context.request.WebRequest;
</span><span class='line'>import org.springframework.web.util.WebUtils;
</span><span class='line'>
</span><span class='line'>public class ServiceExceptionHandler {
</span><span class='line'>
</span><span class='line'>    @ExceptionHandler({ServiceException.class})
</span><span class='line'>    public final ResponseEntity&lt;Object&gt; handleServiceException(ServiceException ex, WebRequest request) {
</span><span class='line'>        return handleExceptionInternal(ex, ex.getErrorInfo(), ex.getHeaders(), ex.getStatus(), request);
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    protected ResponseEntity&lt;Object&gt; handleExceptionInternal(
</span><span class='line'>            Exception ex, @Nullable Object body, HttpHeaders headers, HttpStatus status, WebRequest request) {
</span><span class='line'>
</span><span class='line'>        if (HttpStatus.INTERNAL_SERVER_ERROR.equals(status)) {
</span><span class='line'>            request.setAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE, ex, WebRequest.SCOPE_REQUEST);
</span><span class='line'>        }
</span><span class='line'>        return new ResponseEntity&lt;&gt;(body, headers, status);
</span><span class='line'>    }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>完整代码在<a href="https://github.com/DamianSheldon/Treasure">这里</a>。</p>

<h1>Reference</h1>

<ul>
<li><a href="https://spring.io/blog/2013/11/01/exception-handling-in-spring-mvc">Exception Handling in Spring MVC</a></li>
<li><a href="https://javaee.github.io/servlet-spec/downloads/servlet-3.1/Final/servlet-3_1-final.pdf">Java™ Servlet Specification</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web 开发问题汇总(五)]]></title>
    <link href="http://DamianSheldon.github.io/blog/web-development-notes-part-five.html"/>
    <updated>2022-07-01T09:32:39+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/web-development-notes-part-five</id>
    <content type="html"><![CDATA[<h3>1.</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ jmap -heap 29104
</span><span class='line'>Attaching to process ID 29104, please wait...
</span><span class='line'>ERROR: attach: task_for_pid(29104) failed: '(os/kern) failure' (5)
</span><span class='line'>Error attaching to process: sun.jvm.hotspot.debugger.DebuggerException: Can't attach to the process. Could be caused by an incorrect pid or lack of privileges.
</span><span class='line'>sun.jvm.hotspot.debugger.DebuggerException: sun.jvm.hotspot.debugger.DebuggerException: Can't attach to the process. Could be caused by an incorrect pid or lack of privileges.
</span><span class='line'>  at sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal$BsdDebuggerLocalWorkerThread.execute(BsdDebuggerLocal.java:169)
</span><span class='line'>  at sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal.attach(BsdDebuggerLocal.java:287)
</span><span class='line'>  at sun.jvm.hotspot.HotSpotAgent.attachDebugger(HotSpotAgent.java:671)
</span><span class='line'>  at sun.jvm.hotspot.HotSpotAgent.setupDebuggerDarwin(HotSpotAgent.java:659)
</span><span class='line'>  at sun.jvm.hotspot.HotSpotAgent.setupDebugger(HotSpotAgent.java:341)
</span><span class='line'>  at sun.jvm.hotspot.HotSpotAgent.go(HotSpotAgent.java:304)
</span><span class='line'>  at sun.jvm.hotspot.HotSpotAgent.attach(HotSpotAgent.java:140)
</span><span class='line'>  at sun.jvm.hotspot.tools.Tool.start(Tool.java:185)
</span><span class='line'>  at sun.jvm.hotspot.tools.Tool.execute(Tool.java:118)
</span><span class='line'>  at sun.jvm.hotspot.tools.HeapSummary.main(HeapSummary.java:49)
</span><span class='line'>  at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
</span><span class='line'>  at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
</span><span class='line'>  at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
</span><span class='line'>  at java.lang.reflect.Method.invoke(Method.java:498)
</span><span class='line'>  at sun.tools.jmap.JMap.runTool(JMap.java:201)
</span><span class='line'>  at sun.tools.jmap.JMap.main(JMap.java:130)
</span><span class='line'>Caused by: sun.jvm.hotspot.debugger.DebuggerException: Can't attach to the process. Could be caused by an incorrect pid or lack of privileges.
</span><span class='line'>  at sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal.attach0(Native Method)
</span><span class='line'>  at sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal.access$100(BsdDebuggerLocal.java:65)
</span><span class='line'>  at sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal$1AttachTask.doit(BsdDebuggerLocal.java:278)
</span><span class='line'>  at sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal$BsdDebuggerLocalWorkerThread.run(BsdDebuggerLocal.java:144)</span></code></pre></td></tr></table></div></figure>


<p>A: macOS 上的 java 虚拟机基础工具不能附加到 java 进程上，操作系统环境为:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sw_vers
</span><span class='line'>ProductName:  Mac OS X
</span><span class='line'>ProductVersion:   10.15.7
</span><span class='line'>BuildVersion: 19H1922</span></code></pre></td></tr></table></div></figure>


<p>java 版本:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ java -version
</span><span class='line'>java version "1.8.0_121"
</span><span class='line'>Java(TM) SE Runtime Environment (build 1.8.0_121-b13)
</span><span class='line'>Java HotSpot(TM) 64-Bit Server VM (build 25.121-b13, mixed mode)</span></code></pre></td></tr></table></div></figure>


<p>google 了一番之后，问题可能是 <a href="https://bugs.java.com/bugdatabase/view_bug.do?bug_id=8160376">macOS 上的 java 8 部分小版本有问题</a>，于是我打算用虚拟机里面的 RockyLinux 来试下，结果是确定可以。</p>

<!--more-->


<p>这中间还一个小插曲，也很有意思，这里记一下。虚拟机里面的 RockyLinux 之前并没有安装 java 开发环境，于是我就下载安装 eclipse，2022-06 版本的 eclipse 默认要求 <code>java 11+</code> 的运行环境，它默认选择安装的是 java 17，这也确定是一个好选择，一是 ZGC 是从 java 15 开始 Production Ready；二是 java 17 是一个长期支持版本。</p>

<blockquote><p>ZGC was initially introduced as an experimental feature in JDK 11, and was declared Production Ready in JDK 15.</p></blockquote>

<p>RockyLinux 自带的是 java 8，于是我们安装 jdk 8 和 jdk 17，然后使用自带的 alternatives 来切换 java 版本，但是它好像只管理 jre bin 下的命令，并有把 jdk 里面的命令都管理起来。我是使用 jinfo 提示报错发现的:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Type "GenericGrowableArray", referenced in VMStructs::localHotSpotVMStructs in the remote VM, was not present in the remote VMStructs::localHotSpotVMTypes table (should have been caught in the debug build of that VM). Can not continue.</span></code></pre></td></tr></table></div></figure>


<p>可以使用 <code>alternatives --display java</code> 去确定一下，从这里也可以看出工具的版本最好对应，所以我们也可以将它们纳入 alternatives 系统来管理。以 jhsdb 为例:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo alternatives --add-slave java /usr/lib/jvm/java-17-openjdk-17.0.3.0.7-2.el8_6.x86_64/bin/java /usr/bin/jhsdb jhsdb /usr/lib/jvm/java-17-openjdk-17.0.3.0.7-2.el8_6.x86_64/bin/jhsdb</span></code></pre></td></tr></table></div></figure>


<p>虚拟机里面做开发还是有点卡，最后还是决定在 mac 上安装多个版本的 java，macOS 上并没有自带 centOS 上 alternatives 类似的命令，需要安装第三方软件来管理，之前在 Spring 的源码里看到它是用 SDkMan 来管理多个版本的 java，所以也决定用 SDKMan 来管理。但是 SDKMan 和 alternatives 的实现方式有很大差别，它默认是将软件安装在用户目录下的隐藏目录下，这对 eclipse 之类 IDE 来配置相关的类库会稍微有点不方便，需要开启 Finder 的隐藏文件显示，快捷命令是 <code>cmd+shift+.</code>，<code>defaults write com.apple.Finder AppleShowAllFiles true</code> 命令暂时没生效。</p>

<p>Reference:</p>

<ul>
<li><a href="https://blog.csdn.net/Dongguabai/article/details/88736589">Mac 使用 jinfo 出现：Can&rsquo;t attach to the process. Could be caused by an incorrect pid or lack of privileg</a></li>
<li><a href="https://bugs.java.com/bugdatabase/view_bug.do?bug_id=8160376">JDK-8160376 : DebuggerException: Can&rsquo;t attach symbolicator to the process</a></li>
</ul>


<h3>2. [FATAL] [DBT-06103] The port (5,500) is already in use.</h3>

<p>在 MacOS 下 Virtualbox 的 RockyLinux 中安装 oracle-xe-21c，详细的错误信息如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[FATAL] [DBT-06103] The port (5,500) is already in use.
</span><span class='line'>   ACTION: Specify a free port.
</span><span class='line'>
</span><span class='line'>Database configuration failed. Check logs under '/opt/oracle/cfgtoollogs/dbca'.</span></code></pre></td></tr></table></div></figure>


<p>参照</p>

<blockquote><p>The short name of your host is missing from /etc/hosts, only the FQDN is there. It should be:</p>

<pre><code>
163.173.24.179  linux.mydomain.com linux
</code></pre>

<p>linux (hostname -s) is unreachable due to this.</p></blockquote>

<p>把机器的主机名加入 hosts,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4 centos centos.tenneshop.com</span></code></pre></td></tr></table></div></figure>


<p>重新执行配置命令，问题解决了。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Database creation complete. For details check the logfiles at:
</span><span class='line'> /opt/oracle/cfgtoollogs/dbca/XE.
</span><span class='line'>Database Information:
</span><span class='line'>Global Database Name:XE
</span><span class='line'>System Identifier(SID):XE
</span><span class='line'>Look at the log file "/opt/oracle/cfgtoollogs/dbca/XE/XE.log" for further details.
</span><span class='line'>
</span><span class='line'>Connect to Oracle Database using one of the connect strings:
</span><span class='line'>     Pluggable database: centos.tenneshop.com/XEPDB1
</span><span class='line'>     Multitenant container database: centos.tenneshop.com
</span><span class='line'>Use https://localhost:5500/em to access Oracle Enterprise Manager for Oracle Database XE</span></code></pre></td></tr></table></div></figure>


<p>Reference:<a href="https://dba.stackexchange.com/questions/268437/fatal-dbt-06103-the-port-5-500-is-already-in-use">[[FATAL]] [[DBT-06103]] The port (5,500) is already in use [duplicate]</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis 面试题]]></title>
    <link href="http://DamianSheldon.github.io/blog/redis-interview-questions.html"/>
    <updated>2022-04-27T14:36:10+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/redis-interview-questions</id>
    <content type="html"><![CDATA[<h2>1.什么是 Redis?</h2>

<blockquote><p>Redis is an open source (BSD licensed), in-memory data structure store used as a database, cache, message broker, and streaming engine.</p></blockquote>

<p>Redis是一个开源的内存数据结构存储，被用作数据库、缓存、消息代理和流媒体引擎。</p>

<h2>2.Redis的内存占用量是多少？</h2>

<p>我们看几个例子（都是使用64位实例得到的。</p>

<ul>
<li>一个空的实例使用~3MB的内存。</li>
<li>100万个小键->字符串值对使用~85MB的内存。</li>
<li>100万个键->哈希值，代表一个有5个字段的对象，使用~160 MB的内存。</li>
</ul>


<h2>3.为什么Redis将其整个数据集保存在内存中？</h2>

<p>在过去，Redis的开发者尝试了虚拟内存和其他系统来允许大于RAM的数据集，但最终我们很高兴能做好一件事：数据从内存中提供，磁盘用于存储。所以现在还没有计划为Redis创建一个磁盘上的后端。Redis是当前设计的结果。</p>

<h2>4.你能将Redis与基于磁盘的数据库一起使用吗？</h2>

<p>可以，一个常见的设计模式是在Redis中保存频繁写的小数据（以及你需要Redis数据结构以有效方式为你的问题建模的数据），而大块的数据保存到 SQL或最终一致的磁盘数据库。同样，有时Redis被用来在内存中获取存储在磁盘数据库中的相同数据子集的另一个副本。这看起来类似于缓存，但实际上是一个更高级的模型，因为通常Redis数据集与磁盘数据库数据集一起更新，而不是在缓存错过时刷新。</p>

<h2>5.如何减少Redis的整体内存用量？</h2>

<p>如果可以的话，使用Redis的32位实例。同时善用小的哈希值、列表、排序集和整数集，因为Redis能够在少数元素的特殊情况下以更紧凑的方式表示这些数据类型。</p>

<h2>6.如果Redis的内存用完了会怎样？</h2>

<p>Redis有内置的保护措施，允许用户设置内存使用的最大限制，使用配置文件中的maxmemory选项，对Redis可以使用的内存进行限制。如果达到这个限制，Redis将开始对写命令回复错误（但会继续接受只读命令）。</p>

<p>你也可以配置Redis在达到最大内存限制时驱逐键值。</p>

<!--more-->


<h2>7.Redis的磁盘快照是原子的吗？</h2>

<p>是的，Redis的后台保存过程总是在服务器没有执行命令时创建，所以每个在RAM中报告为原子的命令从磁盘快照的角度看也是原子的。</p>

<h2>8.Redis如何使用多个CPU或核心？</h2>

<p>CPU成为你使用Redis的瓶颈并不是很常见，因为通常Redis的问题不是内存就是网络带宽。例如，当使用 piplelining 时，在一个普通的Linux系统上运行的Redis实例每秒可以提供100万个请求，所以如果你的应用程序主要使用O(N)或O(log(N))命令，它几乎不会使用太多的CPU。</p>

<p>然而，为了最大限度地提高CPU的使用率，你可以在同一个机器里启动多个Redis的实例，并把它们当作不同的服务器。在某些时候，一个机器可能无论如何也不够用，所以如果你想使用多个CPU，你可以提前开始考虑一些方法来分片。</p>

<h2>9.一个Redis实例能容纳的最大键数是多少？Hash、List、Set和Sorted Set中元素的最大数量是多少？</h2>

<p>Redis最多可以处理<code>2^32</code>个键，经实践测试，每个实例至少可以处理2.5亿个键。</p>

<p>每个哈希、列表、集合和排序集，都可以容纳<code>2^32</code>个元素。</p>

<p>换句话说，你的极限可能是你系统中的可用内存。</p>

<h2>10.为什么我的复制节点与主实例的键数量不同？</h2>

<p>如果你使用有效期有限的键（Redis过期），这是正常行为。下面是问题的原因：</p>

<ul>
<li>主节点在与复制节点的第一次同步中生成一个RDB文件。</li>
<li>RDB文件将不包括在主服务器中已经过期但仍在内存中的密钥。</li>
<li>这些键仍然在Redis主节点的内存中，即使在逻辑上已经过期。它们将被认为是不存在的，它们的内存将在以后被回收，要么是增量的，要么是访问时明确的。虽然这些键在逻辑上不是数据集的一部分，但它们在INFO输出和DBSIZE命令中被计算在内。</li>
<li>当复制节点读取由主文件生成的RDB文件时，这组键将不会被加载。</li>
</ul>


<p>正因为如此，对于有很多过期键的用户来说，在复制节点中看到较少的键是很常见的。然而，从逻辑上讲，主节点和复制节点将有相同的内容。</p>

<h2>11.Redis 哨兵和集群的区别是什么？</h2>

<blockquote><p>Redis Sentinel provides high availability for Redis when not using Redis Cluster.
Redis scales horizontally with a deployment topology called Redis Cluster.</p></blockquote>

<h2>12.Memcache 与 Redis 的区别都有哪些？</h2>

<ul>
<li>Command-Line</li>
<li>Disk I/O Dumping</li>
<li>Data Structures</li>
<li>Replication</li>
<li>Transactions</li>
<li>Publish and Subscribe Messaging</li>
<li>Geospatial Support</li>
<li>Architecture</li>
<li>LUA Scripting</li>
<li><p>Memory Usage</p></li>
<li><p><a href="https://www.baeldung.com/memcached-vs-redis">Memcached vs Redis</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(翻译)Spring Boot 面试题]]></title>
    <link href="http://DamianSheldon.github.io/blog/spring-boot-interview-questions.html"/>
    <updated>2022-04-19T10:03:03+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/spring-boot-interview-questions</id>
    <content type="html"><![CDATA[<h1>1. 概述</h1>

<p>自推出以来，Spring Boot一直是Spring生态系统中的一个重要角色。这个项目凭借其自动配置能力使我们的生活变得更加轻松。</p>

<p>在本教程中，我们将介绍一些在求职面试中可能出现的与Spring Boot有关的最常见问题。</p>

<h1>2. 题目</h1>

<h2>Q1. 什么是Spring Boot，其主要特点是什么？</h2>

<p>Spring Boot本质上是一个建立在Spring框架之上的快速应用开发框架。凭借其自动配置和嵌入式应用服务器支持，再加上其享有的大量文档和社区支持，Spring Boot是迄今为止Java生态系统中最受欢迎的技术之一。</p>

<p>这里有几个突出的特点。</p>

<ul>
<li><strong>启动器</strong> &ndash; 一组依赖性描述符，可以一次性包括相关的依赖性</li>
<li><strong>自动配置</strong> &ndash; 一种基于classpath上的依赖关系自动配置应用程序的方法</li>
<li><strong>执行器</strong> &ndash; 获得生产就绪的功能，如监控</li>
<li><strong>安全性</strong></li>
<li><strong>日志</strong></li>
</ul>


<p>译者点评：</p>

<p>官方文档总结的特点：</p>

<blockquote><ul>
<li>  Create stand-alone Spring applications </li>
<li>Embed Tomcat, Jetty or Undertow directly (no need to deploy WAR files) </li>
<li>Provide opinionated &lsquo;starter&rsquo; dependencies to simplify your build configuration </li>
<li>Automatically configure Spring and 3rd party libraries whenever possible </li>
<li>Provide production-ready features such as metrics, health checks, and externalized configuration </li>
<li><p>Absolutely no code generation and no requirement for XML configuration </p></li>
<li><p>创建独立的Spring应用程序</p></li>
<li><p>直接嵌入Tomcat、Jetty或Undertow（不需要部署WAR文件）</p></li>
<li><p>提供有主见的 &ldquo;启动器 "依赖，以简化你的构建配置</p></li>
<li><p>尽可能地自动配置Spring和第三方库</p></li>
<li><p>提供生产就绪的功能，如度量、健康检查和外部化配置</p></li>
<li><p>完全没有代码生成，也不需要XML配置</p></li>
</ul>
</blockquote>

<h2>Q2. Spring和Spring Boot之间的区别是什么？</h2>

<p>Spring框架提供了多种功能，使Web应用的开发更加容易。这些功能包括依赖性注入、数据绑定、面向切面编程、数据访问等等。</p>

<p>多年来，Spring越来越复杂，这种应用所需的配置量可能令人生畏。这就是Spring Boot的用武之地&ndash;它使配置一个Spring应用程序变得轻而易举。</p>

<p>从本质上讲，Spring是没有主见的，而Spring Boot对平台和库有主见，让我们快速上手。</p>

<p>下面是Spring Boot带来的两个最重要的好处。</p>

<ul>
<li>根据它在classpath上找到的库自动配置应用程序</li>
<li>提供生产中的应用程序常见的非功能特性，如安全或健康检查</li>
</ul>


<p>请查看我们的其他教程，了解<a href="https://www.baeldung.com/spring-vs-spring-boot">普通Spring和Spring Boot的详细比较</a>。</p>

<!--more-->


<h2>Q3. 我们如何用Maven设置Spring Boot应用程序？</h2>

<p>我们可以像对待其他库一样，将Spring Boot纳入Maven项目中。不过，最好的方法是从spring-boot-starter-parent项目中继承，并声明对Spring Boot starters的依赖关系。这样做可以让我们的项目重用Spring Boot的默认设置。</p>

<p>继承spring-boot-starter-parent项目很简单，我们只需要在pom.xml中指定一个父元素:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;parent&gt;
</span><span class='line'>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
</span><span class='line'>    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
</span><span class='line'>    &lt;version&gt;2.4.0.RELEASE&lt;/version&gt;
</span><span class='line'>&lt;/parent&gt;</span></code></pre></td></tr></table></div></figure>


<p>我们可以在Maven中心找到最新版本的spring-boot-starter-parent。</p>

<p>使用启动器父项目很方便，但并不总是可行的。例如，如果我们公司要求所有项目都继承自标准POM，那么我们仍然可以通过使用<a href="https://www.baeldung.com/spring-boot-dependency-management-custom-parent">自定义父项目</a>来受益于Spring Boot的依赖性管理。</p>

<h2>Q4. 什么是Spring Initializr？</h2>

<p>Spring Initializr是一种创建Spring Boot项目的便捷方式。</p>

<p>我们可以去<a href="https://start.spring.io/">Spring Initializr</a>网站，选择一个依赖管理工具（Maven或Gradle）、一种语言（Java、Kotlin或Groovy）、一种打包方案（Jar或War）、版本和依赖性，然后下载项目。</p>

<p>这为我们创建了一个骨架项目，节省了设置时间，这样我们就可以集中精力添加业务逻辑。</p>

<p>即使我们使用IDE的（如STS或带有STS插件的Eclipse）新项目向导来创建Spring Boot项目，它也会在底下使用Spring Initializr。</p>

<h2>Q5. 外面有哪些Spring Boot启动器？</h2>

<p>每个启动器都扮演着一站式服务的角色，提供我们需要的所有 Spring 技术。其他所需的依赖项也会被拉进来，并以一致的方式进行管理。</p>

<p>所有启动器都在org.springframework.boot组下，其名称以spring-boot-starter-开头。这种命名模式使我们很容易找到启动器，特别是在使用支持按名称搜索依赖关系的IDE时。</p>

<p>在写这篇文章的时候，有超过50个启动器供我们使用。这里，我们将列出最常见的：</p>

<ul>
<li><strong>spring-boot-starter</strong>：核心启动器，包括自动配置支持、日志和YAML</li>
<li><strong>spring-boot-starter-aop</strong>: 使用Spring AOP和AspectJ进行面向方面的编程</li>
<li><strong>spring-boot-starter-data-jpa</strong>：用于在Hibernate中使用Spring Data JPA。</li>
<li><strong>spring-boot-starter-security</strong>: 用于使用Spring Security。</li>
<li><strong>spring-boot-starter-test</strong>: 用于测试Spring Boot应用程序</li>
<li><strong>spring-boot-starter-web</strong>: 用于使用Spring MVC构建Web（包括RESTful）应用程序。</li>
</ul>


<p>有关启动程序的完整列表，请参见该<a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters">资源库</a>。</p>

<p>要找到关于Spring Boot启动程序的更多信息，请看<a href="https://www.baeldung.com/spring-boot-starters">Spring Boot启动程序介绍</a>。</p>

<h2>Q6. 如何禁用一个特定的自动配置？</h2>

<p>如果我们想禁用一个特定的自动配置，我们可以使用@EnableAutoConfiguration注解的exclude属性来设置它。</p>

<p>例如，这个代码片断禁用了DataSourceAutoConfiguration:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// other annotations
</span><span class='line'>@EnableAutoConfiguration(exclude = DataSourceAutoConfiguration.class)
</span><span class='line'>public class MyConfiguration { }</span></code></pre></td></tr></table></div></figure>


<p>如果我们用@SpringBootApplication注解启用了自动配置&ndash;该注解将@EnableAutoConfiguration作为元注解&ndash;我们可以用同名的属性禁用自动配置:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// other annotations
</span><span class='line'>@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)
</span><span class='line'>public class MyConfiguration { }</span></code></pre></td></tr></table></div></figure>


<p>我们也可以用spring.autoconfigure.exclude环境属性禁用自动配置。在application.properties文件中的配置与之前做的设置是做相同的事情:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration</span></code></pre></td></tr></table></div></figure>


<h2>Q7. 如何注册一个自定义的自动配置？</h2>

<p>要注册一个自动配置类，我们必须在META-INF/spring.factories文件的EnableAutoConfiguration键下列出其完全限定名称:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>org.springframework.boot.autoconfigure.EnableAutoConfiguration=com.baeldung.autoconfigure.CustomAutoConfiguration</span></code></pre></td></tr></table></div></figure>


<p>如果我们用Maven构建项目，该文件应放在resources/META-INF目录下，在打包阶段最终会出现在上述位置。</p>

<h2>Q8. 如何告诉自动配置在Bean存在时退缩？</h2>

<p>为了指示自动配置类在Bean已经存在时退缩，我们可以使用 @ConditionalOnMissingBean 注解。</p>

<p>这个注解最值得注意的属性是:</p>

<ul>
<li>value &ndash; 要检查的Bean的类型</li>
<li>name &ndash; 要检查的bean的名字</li>
</ul>


<p>当放在一个用@Bean装饰的方法上时，目标类型默认为该方法的返回类型:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Configuration
</span><span class='line'>public class CustomConfiguration {
</span><span class='line'>    @Bean
</span><span class='line'>    @ConditionalOnMissingBean
</span><span class='line'>    public CustomService service() { ... }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Q9. 如何将Spring Boot Web应用部署为Jar和War文件？</h2>

<p>传统上，我们将Web应用打包成WAR文件，然后将其部署到外部服务器上。这样做可以让我们在同一台服务器上安排多个应用程序。在CPU和内存稀缺的时候，这是一个节省资源的好方法。</p>

<p>但事情已经发生了变化。现在计算机硬件相当便宜，人们的注意力已经转向服务器配置。在部署过程中，配置服务器的一个小错误可能会导致灾难性的后果。</p>

<p>Spring通过提供一个插件，即spring-boot-maven-plugin，将网络应用打包成可执行的JAR，来解决这个问题。</p>

<p>要包含这个插件，只需在pom.xml中添加一个插件元素:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;plugin&gt;
</span><span class='line'>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
</span><span class='line'>    &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
</span><span class='line'>&lt;/plugin&gt;</span></code></pre></td></tr></table></div></figure>


<p>有了这个插件，我们在执行打包阶段后会得到一个扁平的JAR。这个JAR包含所有必要的依赖，包括一个嵌入式服务器。因此，我们不再需要担心配置外部服务器的问题。</p>

<p>然后我们可以像运行普通的可执行JAR一样运行该应用程序。</p>

<p>注意，pom.xml文件中的打包元素必须设置为jar来构建JAR文件:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;packaging&gt;jar&lt;/packaging&gt;</span></code></pre></td></tr></table></div></figure>


<p>如果我们不包括这个元素，它也默认为jar。</p>

<p>要构建一个WAR文件，我们把包装元素改为war:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;packaging&gt;war&lt;/packaging&gt;</span></code></pre></td></tr></table></div></figure>


<p>并将容器的依赖关系从打包的文件中删除:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;dependency&gt;
</span><span class='line'>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
</span><span class='line'>    &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;
</span><span class='line'>    &lt;scope&gt;provided&lt;/scope&gt;
</span><span class='line'>&lt;/dependency&gt;</span></code></pre></td></tr></table></div></figure>


<p>在执行Maven打包阶段后，我们会有一个可部署的WAR文件。</p>

<h2>Q10. 如何在命令行应用程序中使用Spring Boot？</h2>

<p>就像其他Java程序一样，Spring Boot命令行应用程序必须有一个main方法。</p>

<p>这个方法作为一个入口点，它调用<code>SpringApplication#run</code>方法来启动应用程序:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@SpringBootApplication
</span><span class='line'>public class MyApplication {
</span><span class='line'>    public static void main(String[] args) {
</span><span class='line'>        SpringApplication.run(MyApplication.class);
</span><span class='line'>        // other statements
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>然后SpringApplication类启动Spring容器并自动配置Bean。</p>

<p>注意我们必须向run方法传递一个配置类，作为主要的配置源。按照惯例，这个参数就是入口类本身。</p>

<p>在调用运行方法后，我们可以像普通程序一样执行其他语句。</p>

<h2>Q11. 外部配置的可能来源是什么？</h2>

<p>Spring Boot提供了对外部配置的支持，使我们能够在不同的环境中运行同一个应用程序。我们可以使用属性文件、YAML文件、环境变量、系统属性和命令行选项参数来指定配置属性。</p>

<p>然后，我们可以使用@Value注解、通过<a href="https://www.baeldung.com/configuration-properties-in-spring-boot">@ConfigurationProperties注解</a>的绑定对象或环境抽象来访问这些属性。</p>

<h2>Q12. Spring Boot支持宽松的绑定是什么意思？</h2>

<p>Spring Boot中的宽松绑定适用于<a href="https://www.baeldung.com/configuration-properties-in-spring-boot">配置属性的类型安全绑定</a>。</p>

<p>通过宽松的绑定，属性的键不需要与属性名完全匹配。这样的环境属性可以用camelCase、kebab-case、snake_case，或者用大写字母，用下划线隔开单词。</p>

<p>例如，如果一个带有 @ConfigurationProperties 注解的 bean 类中的一个属性被命名为 myProp，它可以被绑定到这些环境属性中的任何一个：myProp、my-prop、my_prop 或 MY_PROP。</p>

<h2>Q13. Spring Boot DevTools的用途是什么？</h2>

<p>Spring Boot开发者工具，或称DevTools，是一套使开发过程更容易的工具。</p>

<p>为了包括这些开发时的功能，我们只需要在pom.xml文件中添加一个依赖项:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;dependency&gt;
</span><span class='line'>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
</span><span class='line'>    &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;
</span><span class='line'>&lt;/dependency&gt;</span></code></pre></td></tr></table></div></figure>


<p>如果应用程序在生产中运行，spring-boot-devtools模块会自动禁用。重新打包的归档文件也默认排除了这个模块。所以，它不会给我们的最终产品带来任何开销。</p>

<p>默认情况下，DevTools应用适合于开发环境的属性。这些属性禁用了模板缓存，启用了网络组的调试日志，诸如此类。因此，我们有了这种合理的开发时配置，而无需设置任何属性。</p>

<p>只要classpath上的文件发生变化，使用DevTools的应用程序就会重新启动。这在开发中是一个非常有帮助的功能，因为它可以快速反馈修改情况。</p>

<p>默认情况下，静态资源，包括视图模板，不会引发重启。相反，资源变化会触发浏览器刷新。请注意，只有在浏览器中安装了LiveReload扩展，以便与DevTools包含的嵌入式LiveReload服务器进行交互时，这才会发生。</p>

<p>关于这一主题的进一步信息，请参见<a href="https://www.baeldung.com/spring-boot-devtools">Spring Boot DevTools概述</a>。</p>

<h2>Q14. 如何编写集成测试？</h2>

<p>在为Spring应用程序运行集成测试时，我们必须有一个ApplicationContext。</p>

<p>为了让我们的生活更轻松，Spring Boot为测试提供了一个特殊的注解&ndash;@SpringBootTest。该注解从其classes属性所指示的配置类中创建一个ApplicationContext。</p>

<p>如果classes属性没有设置，Spring Boot会搜索主要的配置类。搜索从包含测试的包开始，直到找到一个用@SpringBootApplication或@SpringBootConfiguration注解的类。</p>

<p>有关详细说明，请查看我们的<a href="https://www.baeldung.com/spring-boot-testing">Spring Boot测试教程</a>。</p>

<h2>Q15. Spring Boot Actuator的用途是什么？</h2>

<p>从本质上讲，Actuator通过启用生产就绪的功能，使Spring Boot应用程序活起来。这些功能使我们能够在应用程序在生产中运行时监控和管理它们。</p>

<p>将Spring Boot Actuator集成到一个项目中非常简单。我们所要做的就是在pom.xml文件中包括spring-boot-starter-actuator启动器:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;dependency&gt;
</span><span class='line'>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
</span><span class='line'>    &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;
</span><span class='line'>&lt;/dependency&gt;</span></code></pre></td></tr></table></div></figure>


<p>Spring Boot Actuator可以使用HTTP或JMX端点来暴露操作信息。但大多数应用程序都会选择HTTP，其中端点的身份和/actuator前缀构成了一个URL路径。</p>

<p>下面是Actuator提供的一些最常见的内置端点。</p>

<ul>
<li><strong>env</strong> 暴露环境属性</li>
<li><strong>health</strong> 显示应用程序的健康信息</li>
<li><strong>httptrace</strong> 显示HTTP跟踪信息</li>
<li><strong>info</strong> 显示任意的应用程序信息</li>
<li><strong>metrics</strong> 显示度量信息</li>
<li><strong>loggers</strong> 显示并修改应用程序中的记录器配置</li>
<li><strong>mappings</strong> 显示所有@RequestMapping路径的列表</li>
</ul>


<p>请参考我们的<a href="https://www.baeldung.com/spring-boot-actuators">Spring Boot Actuator教程</a>，了解详细情况。</p>

<h2>Q16. 配置Spring Boot项目时，属性和YAML哪个更好？</h2>

<p>与属性文件相比，YAML有很多优点。</p>

<ul>
<li>更加清晰，可读性更好</li>
<li>非常适合分层的配置数据，也可以用更好、更易读的格式来表示</li>
<li>支持 map、列表和标量类型</li>
<li>可以在同一个文件中包含多个<a href="https://www.baeldung.com/spring-profiles">配置文件</a>（从Spring Boot 2.4.0开始，属性文件也可以这样做了）</li>
</ul>


<p>但是，由于它的缩进规则，编写它可能有点困难，而且容易出错。</p>

<p>有关细节和工作样本，请参考我们的<a href="https://www.baeldung.com/spring-yaml-vs-properties">Spring YAML与属性</a>教程。</p>

<h2>Q17. Spring Boot提供了哪些基本注解？</h2>

<p>Spring Boot提供的主要注释位于org.springframework.boot.autoconfigure及其子包中。</p>

<p>以下是一些基本的注释：</p>

<ul>
<li><strong>@EnableAutoConfiguration</strong> &ndash; 使Spring Boot在其classpath上寻找自动配置 Bean 并自动应用它们。</li>
<li><strong>@SpringBootApplication</strong> &ndash; 表示Boot Application的主类。该注解将@Configuration、@EnableAutoConfiguration和@ComponentScan注解与它们的默认属性结合起来。</li>
</ul>


<p><a href="https://www.baeldung.com/spring-boot-annotations">Spring Boot注解</a>提供了对这一主题的更多见解。</p>

<h2>Q18. 如何改变Spring Boot中的默认端口？</h2>

<p>我们可以通过以下方式改变嵌入Spring Boot中的服务器的默认端口。</p>

<ul>
<li>使用属性文件 &ndash; 我们可以在application.properties（或application.yml）文件中使用属性server.port来定义。</li>
<li>通过编程 &ndash; 在我们的主@SpringBootApplication类中，我们可以在SpringApplication实例上设置server.port。</li>
<li>使用命令行 &ndash; 当以jar文件的形式运行应用程序时，我们可以将server.port设置为java命令参数:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>java -jar -Dserver.port=8081 myspringproject.jar</span></code></pre></td></tr></table></div></figure>


<h2>Q19. Spring Boot支持哪些嵌入式服务器，以及如何改变默认值？</h2>

<p>截至目前，Spring MVC支持Tomcat、Jetty和Undertow。Tomcat是Spring Boot的Web Starter支持的默认应用服务器。</p>

<p>Spring WebFlux支持Reactor Netty、Tomcat、Jetty和Undertow，其中Reactor Netty为默认。</p>

<p>在Spring MVC中，如果要改变默认，比方说改变为Jetty，我们需要排除Tomcat，在依赖关系中包括Jetty:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;dependency&gt;
</span><span class='line'>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
</span><span class='line'>    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
</span><span class='line'>    &lt;exclusions&gt;
</span><span class='line'>        &lt;exclusion&gt;
</span><span class='line'>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
</span><span class='line'>            &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;
</span><span class='line'>        &lt;/exclusion&gt;
</span><span class='line'>    &lt;/exclusions&gt;
</span><span class='line'>&lt;/dependency&gt;
</span><span class='line'>&lt;dependency&gt;
</span><span class='line'>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
</span><span class='line'>    &lt;artifactId&gt;spring-boot-starter-jetty&lt;/artifactId&gt;
</span><span class='line'>&lt;/dependency&gt;</span></code></pre></td></tr></table></div></figure>


<p>同样，要把WebFlux的默认值改为UnderTow，我们需要排除Reactor Netty，并把UnderTow纳入依赖关系。</p>

<p><a href="https://www.baeldung.com/spring-boot-servlet-containers">比较Spring Boot中的嵌入式Servlet容器</a>有更多关于我们可以在Spring MVC中使用的不同嵌入式服务器的细节。</p>

<h2>Q20. 为什么我们需要Spring Profiles？</h2>

<p>在为企业开发应用程序时，我们通常要处理多种环境，如开发、QA和生产。这些环境的配置属性是不同的。</p>

<p>例如，我们可能在开发中使用嵌入式H2数据库，但生产环境可能有专用的Oracle或DB2。即使DBMS在不同的环境中是相同的，URLs也肯定是不同的。</p>

<p>为了使这个问题简单明了，Spring提供了配置文件，以帮助分离每个环境的配置。因此，可以将这些属性保存在不同的文件中，如application-dev.properties和application-prod.properties，而不是通过编程来维护这些属性。默认的application.properties使用spring.profiles.active指向当前活动的配置文件，这样就可以获得正确的配置。</p>

<p><a href="https://www.baeldung.com/spring-profiles">Spring Profiles</a>给出了关于这个主题的全面观点。</p>

<h1>3. 总结</h1>

<p>本文介绍了技术面试中可能出现的关于Spring Boot的一些最关键问题。</p>

<p>我们希望这些问题能够帮助你找到理想的工作。</p>

<h1>4. 原文</h1>

<ul>
<li><a href="https://www.baeldung.com/spring-boot-interview-questions">Spring Boot Interview Questions</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(翻译)Spring MVC 面试题]]></title>
    <link href="http://DamianSheldon.github.io/blog/spring-mvc-interview-questions.html"/>
    <updated>2022-04-12T11:42:30+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/spring-mvc-interview-questions</id>
    <content type="html"><![CDATA[<h1>1. 简介</h1>

<p>Spring MVC是Spring公司在Servlet API基础上建立的原创Web框架。它提供了模型-视图-控制器架构，可用于开发灵活的Web应用。</p>

<p>在本教程中，我们将重点讨论与之相关的问题，因为它经常是Spring开发者求职面试的一个话题。</p>

<p>关于Spring框架的更多问题，你可以查看我们<a href="https://www.baeldung.com/tag/interview/">面试问题系列</a>中另一篇与<a href="https://www.baeldung.com/spring-interview-questions">Spring有关的文章</a>。</p>

<h1>2.基础 Spring MVC 题</h1>

<h2>Q1. 为什么我们要使用Spring MVC？</h2>

<p>Spring MVC实现了清晰的关注点分离，使我们能够轻松开发和单元测试我们的应用程序。</p>

<p>像如下概念：</p>

<ul>
<li>Dispatcher Servlet</li>
<li>Controllers</li>
<li>View Resolvers</li>
<li>Views, Models</li>
<li>ModelAndView</li>
<li>Model and Session Attributes</li>
</ul>


<p>是完全相互独立的，它们只负责一件事。</p>

<p>因此，MVC给了我们相当大的灵活性。它是基于接口的（有提供的实现类），我们可以通过使用自定义接口来配置框架的每一部分。</p>

<p>另一件重要的事情是，我们并没有被束缚在一个特定的视图技术上（例如JSP），而是可以选择我们最喜欢的技术。</p>

<p>另外，我们不只在Web应用开发中使用Spring MVC，在创建RESTful Web服务时也是如此。</p>

<!--more-->


<h2>Q2. <code>@Autowired</code>注解的作用是什么？</h2>

<p><code>@Autowired</code>注解可以与字段或方法一起使用，用于按类型注入Bean。这个注解允许Spring解析并将协作Bean注入你的Bean中。</p>

<p>更多细节，请参考关于<a href="https://www.baeldung.com/spring-autowire"><code>@Autowired</code> in Spring</a>的教程。</p>

<h2>Q3. 解释一下模型属性</h2>

<p><code>@ModelAttribute</code>注解是Spring MVC中最重要的注解之一。它将一个方法参数或方法返回值绑定到一个命名的模型属性上，然后将其暴露给Web视图。</p>

<p>如果我们在方法层面使用它，它表明该方法的目的是添加一个或多个模型属性。</p>

<p>另一方面，当作为方法参数使用时，它表示该参数应该从模型中获取。当不存在时，我们应该首先将其实例化，然后将其添加到模型中。一旦出现在模型中，我们应该从所有具有匹配名称的请求参数中填充参数字段。</p>

<p>关于这个注解的更多信息可以在我们与<a href="https://www.baeldung.com/spring-mvc-and-the-modelattribute-annotation"><code>@ModelAttribute</code>注解有关的文章</a>中找到。</p>

<h2>Q4. 解释一下@Controller和@RestController之间的区别？</h2>

<p><code>@Controller</code>和<code>@RestController</code>注释的主要区别在于，<code>@RestController</code>注解会自动包含<code>@ResponseBody</code>。这意味着我们不需要用<code>@ResponseBody</code>来标注我们的处理方法。如果我们想直接在HTTP响应体中写入响应类型，在<code>@Controller</code>类中需要这样做。</p>

<h2>Q5. 描述一下PathVariable</h2>

<p>我们可以使用<code>@PathVariable</code>注解处理方法的参数，来提取URI模板变量的值。</p>

<p>例如，如果我们想从<code>www.mysite.com/user/123</code>，通过id获取一个用户，我们应该把控制器中的方法映射为<code>/user/{id}</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@RequestMapping("/user/{id}")
</span><span class='line'>public String handleRequest(@PathVariable("id") String userId, Model map) {}</span></code></pre></td></tr></table></div></figure>


<p>@PathVariable只有一个名为value的元素。它是可选的，我们用它来定义URI模板变量的名称。如果我们省略value元素，那么URI模板变量的名称必须与方法参数名称相匹配。</p>

<p>也允许有多个@PathVariable注解，可以通过一个接一个地声明它们:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@RequestMapping("/user/{userId}/name/{userName}")
</span><span class='line'>public String handleRequest(@PathVariable String userId,
</span><span class='line'>  @PathVariable String userName, Model map) {}</span></code></pre></td></tr></table></div></figure>


<p>或将它们全部放在一个<code>Map&lt;String, String&gt;</code>或<code>MultiValueMap&lt;String, String&gt;</code>中:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@RequestMapping("/user/{userId}/name/{userName}")
</span><span class='line'>public String handleRequest(@PathVariable Map&lt;String, String&gt; varsMap, Model map) {}</span></code></pre></td></tr></table></div></figure>


<h2>Q6. 使用Spring MVC进行验证</h2>

<p>Spring MVC默认支持JSR-303规范。我们需要在我们的Spring MVC应用中添加JSR-303及其实现的依赖性。例如，Hibernate Validator就是我们可以使用的JSR-303的实现之一。</p>

<p>JSR-303是用于bean验证的Java API规范，是Jakarta EE和JavaSE的一部分，它使用<code>@NotNull</code>、<code>@Min</code>和<code>@Max</code>等注解，确保bean的属性满足特定的标准。关于验证的更多信息，请参见<a href="https://www.baeldung.com/javax-validation">Java Bean验证基础知识</a>一文。</p>

<p>Spring提供了<code>@Validator</code>注解和BindingResult类。当我们有无效的数据时，Validator实现将在控制器的请求处理方法中触发错误。然后我们可以使用BindingResult类来获取这些错误。</p>

<p>除了使用现有的实现，我们还可以制作自己的实现。要做到这一点，我们首先创建一个符合JSR-303规范的注解。然后，我们实现Validator类。另一种方法是实现Spring的Validator接口，并通过控制器类中的<code>@InitBinder</code>注解将其设置为验证器。</p>

<p>要查看如何实现和使用你自己的验证器，请看关于<a href="https://www.baeldung.com/spring-mvc-custom-validator">Spring MVC中自定义验证</a>的教程。</p>

<h2>Q7. 什么是<code>@RequestBody</code>和<code>@ResponseBody</code>注解？</h2>

<p><code>@RequestBody</code>注解，作为处理方法参数使用，将HTTP请求主体与传输或域对象绑定。Spring使用Http消息转换器自动将传入的HTTP请求反序列化为Java对象。</p>

<p>当我们在Spring MVC控制器中的处理方法上使用<code>@ResponseBody</code>注解时，它表明我们将把该方法的返回类型直接写入HTTP响应体中。我们不会把它放在Model中，Spring也不会把它解释为视图名称。</p>

<p>请查看关于<a href="https://www.baeldung.com/spring-request-response-body"><code>@RequestBody</code>和<code>@ResponseBody</code></a>的文章，了解关于这些注解的更多细节。</p>

<h2>Q8. 解释一下Model、ModelMap和ModelAndView？</h2>

<p>Model接口定义了一个模型属性的持有人。ModelMap也有类似的目的，它能够传递一个值的集合。然后，它把这些值当作是在一个Map内。我们应该注意，在模型（ModelMap）中我们只能存储数据。我们把数据放进去并返回一个视图名称。</p>

<p>另一方面，在ModelAndView中，我们返回对象本身。我们把所有需要的信息，比如数据和视图名称，都设置在我们要返回的对象中。</p>

<p>你可以在关于<a href="https://www.baeldung.com/spring-mvc-model-model-map-model-view">Model、ModelMap和ModelView</a>的文章中找到更多细节。</p>

<h2>Q9. 解释SessionAttributes和SessionAttribute</h2>

<p><code>@SessionAttributes</code>注解是用来在用户会话中存储模型属性的。我们在控制器类中使用它，如我们关于Spring MVC中的会话属性的文章中所示:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Controller
</span><span class='line'>@RequestMapping("/sessionattributes")
</span><span class='line'>@SessionAttributes("todos")
</span><span class='line'>public class TodoControllerWithSessionAttributes {
</span><span class='line'>
</span><span class='line'>    @GetMapping("/form")
</span><span class='line'>    public String showForm(Model model,
</span><span class='line'>      @ModelAttribute("todos") TodoList todos) {
</span><span class='line'>        // method body
</span><span class='line'>        return "sessionattributesform";
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    // other methods
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>在前面的例子中，如果<code>@ModelAttribute</code>和<code>@SessionAttributes</code>有相同的名称属性，模型属性 &ldquo;todos "将被添加到会话中。</p>

<p>如果我们想从一个全局管理的会话中获取现有的属性，我们将使用<code>@SessionAttribute</code>注解作为方法参数：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@GetMapping
</span><span class='line'>public String getTodos(@SessionAttribute("todos") TodoList todos) {
</span><span class='line'>    // method body
</span><span class='line'>    return "todoView";
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Q10. <code>@EnableWebMVC</code>的目的是什么？</h2>

<p><code>@EnableWebMvc</code>注解的目的是通过Java配置启用Spring MVC。它等同于XML配置中的<code>&lt;mvc: annotation-driven&gt;</code>。这个注解从WebMvcConfigurationSupport导入Spring MVC配置。它能够支持<code>@Controller</code>注解的类，这些类使用<code>@RequestMapping</code>将传入的请求映射到处理方法。</p>

<p>你可以在我们的<a href="https://www.baeldung.com/spring-enable-annotations">Spring <code>@Enable</code>注解指南</a>中了解更多关于这个和类似注解的信息。</p>

<h2>Q11. 什么是Spring中的ViewResolver？</h2>

<p>ViewResolver通过将视图名称映射到实际视图，使应用程序能够在浏览器中渲染模型，这样无需将实现与特定的视图技术联系起来。</p>

<p>关于ViewResolver的更多细节，请看我们的<a href="https://www.baeldung.com/spring-mvc-view-resolver-tutorial">Spring MVC中的ViewResolver指南</a>。</p>

<h2>Q12. 什么是BindingResult？</h2>

<p>BindingResult是<code>org.springframework.validation</code>包中的一个接口，表示绑定结果。我们可以用它来检测和报告提交表单中的错误。它很容易被调用&ndash;我们只需要确保把它作为一个参数放在我们要验证的表单对象之后。可选的Model参数应该在BindingResult之后，这在<a href="https://www.baeldung.com/spring-mvc-custom-validator">自定义验证器教程</a>中可以看到:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@PostMapping("/user")
</span><span class='line'>public String submitForm(@Valid NewUserForm newUserForm, 
</span><span class='line'>  BindingResult result, Model model) {
</span><span class='line'>    if (result.hasErrors()) {
</span><span class='line'>        return "userHome";
</span><span class='line'>    }
</span><span class='line'>    model.addAttribute("message", "Valid form");
</span><span class='line'>    return "userHome";
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>当Spring看到<code>@Valid</code>注解时，它首先会尝试为被验证的对象找到验证器。然后，它将拾起验证注解并调用验证器。最后，它将把发现的错误放在BindingResult中，并把后者添加到视图模型中。</p>

<h2>Q13. 什么是表单后备对象？</h2>

<p>表单后备对象或命令对象只是一个POJO，它从我们要提交的表单中收集数据。</p>

<p>我们应该记住，它不包含任何逻辑，只包含数据。</p>

<p>要了解如何在Spring MVC中使用表单支持对象，请看我们关于<a href="https://www.baeldung.com/spring-mvc-form-tutorial">Spring MVC中表单</a>的文章。</p>

<h2>Q14.<code>@Qualifier</code>注解的作用是什么？</h2>

<p>它与<code>@Autowired</code>注解同时使用，以避免一个bean类型的多个实例出现时的混淆。</p>

<p>让我们看一个例子。我们在XML配置中声明了两个类似的Bean:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;bean id="person1" class="com.baeldung.Person" &gt;
</span><span class='line'>    &lt;property name="name" value="Joe" /&gt;
</span><span class='line'>&lt;/bean&gt;
</span><span class='line'>&lt;bean id="person2" class="com.baeldung.Person" &gt;
</span><span class='line'>    &lt;property name="name" value="Doe" /&gt;
</span><span class='line'>&lt;/bean&gt;</span></code></pre></td></tr></table></div></figure>


<p>当我们试图连接Bean时，我们会得到一个<code>org.springframework.beans.factory.NoSuchBeanDefinitionException</code>。为了解决这个问题，我们需要使用<code>@Qualifier</code>来告诉Spring关于哪个Bean应该被连接:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Autowired
</span><span class='line'>@Qualifier("person1")
</span><span class='line'>private Person person;</span></code></pre></td></tr></table></div></figure>


<h2>Q15. <code>@Required</code>注解的作用是什么？</h2>

<p><code>@Required</code>注解用于setter方法，它表示在配置时必须填充具有该注解的bean属性。否则，Spring容器将抛出一个BeanInitializationException异常。</p>

<p>另外，<code>@Required</code>与<code>@Autowired</code>不同&ndash;因为它只限于 setter ，而<code>@Autowired</code>则不是。<code>@Autowired</code>也可以用来与构造函数和字段进行连接，而<code>@Required</code>只检查该属性是否被设置。</p>

<p>让我们看一个例子:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class Person {
</span><span class='line'>    private String name;
</span><span class='line'> 
</span><span class='line'>    @Required
</span><span class='line'>    public void setName(String name) {
</span><span class='line'>        this.name = name;
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>现在，Person Bean的名字需要像这样在XML配置中设置:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;bean id="person" class="com.baeldung.Person"&gt;
</span><span class='line'>    &lt;property name="name" value="Joe" /&gt;
</span><span class='line'>&lt;/bean&gt;</span></code></pre></td></tr></table></div></figure>


<p>请注意，<code>@Required</code>默认情况下不能与基于Java的<code>@Configuration</code>类一起工作。如果你需要确保所有的属性都被设置，你可以在<code>@Bean</code>注解的方法中创建Bean时这样做。</p>

<p>译者点评：<code>@Required</code> 是如何实现的？</p>

<p>RequiredAnnotationBeanPostProcessor 通过检查 bean 定义中标注了 <code>@Required</code> 的属性是否有赋值来实现的。</p>

<h2>Q16. 描述一下前台控制器模式</h2>

<p>在前端控制器模式中，所有的请求将首先进入前端控制器，而不是Servlet。它将确保响应已经准备好，并将它们送回给浏览器。这样，我们就有一个地方可以控制来自外部世界的一切。</p>

<p>前端控制器将识别应该首先处理请求的Servlet。然后，当它从servlet那里得到数据后，它将决定渲染哪个视图，最后，它将把渲染好的视图作为一个响应发送回去：</p>

<p><img src="https://www.baeldung.com/wp-content/uploads/2018/12/front_end_controller.png" alt="Front end controller" /></p>

<p>要查看实现细节，请查看我们的<a href="https://www.baeldung.com/java-front-controller-pattern">Java中的前端控制器模式指南</a>。</p>

<h2>Q17. 什么是 Model1和Model2的架构？</h2>

<p> Model1和Model2代表了在设计Java Web应用时经常使用的两种设计模式。</p>

<p>在Model1中，一个请求被送到一个servlet或JSP那里进行处理。Servlet或JSP处理请求，处理业务逻辑，检索和验证数据，并生成响应:</p>

<p><img src="https://www.baeldung.com/wp-content/uploads/2018/12/Model_1-1.png" alt="Model 1" /></p>

<p>由于这种架构很容易实现，我们通常在小型和简单的应用程序中使用它。</p>

<p>另一方面，它对于大规模的网络应用并不方便。这些功能通常在JSP中重复使用，其中业务和表现逻辑是耦合的。</p>

<p>Model2是基于模型-视图-控制器设计模式的，它将视图与操作内容的逻辑分开。</p>

<p>此外，我们可以区分MVC模式中的三个模块：模型、视图和控制器。模型代表一个应用程序的动态数据结构。它负责数据和业务逻辑的操作。视图负责显示数据，而控制器作为前两者之间的接口。</p>

<p>在Model2中，一个请求被传递给控制器，控制器处理所需的逻辑，以便获得应该显示的正确内容。然后，控制器将内容放回请求中，通常是作为一个JavaBean或POJO。它还决定哪个视图应该渲染内容，最后将请求传递给它。然后，视图就会渲染数据:</p>

<p><img src="https://www.baeldung.com/wp-content/uploads/2018/12/Model_2.png" alt="Model 2" /></p>

<h1>3.进阶 Spring MVC 题</h1>

<h2>Q18. Spring中的@Controller、@Component、@Repository和@Service注解之间有什么区别？</h2>

<p>根据Spring官方文档，@Component是任何Spring管理的组件的通用定型。@Repository、@Service和@Controller是@Component的特殊化，用于更具体的使用情况，例如，分别用于持久层、服务层和表现层。
让我们来看看后三者的具体使用情况:</p>

<ul>
<li><strong>@Controller</strong> &ndash; 表示该类扮演着控制器的角色，并在该类中检测@RequestMapping注解</li>
<li><strong>@Service</strong> &ndash; 表示该类持有业务逻辑并调用存储库层的方法</li>
<li><strong>@Repository</strong> &ndash; 表示该类定义了一个数据存储库；它的工作是捕捉平台特定的异常，并将其作为Spring统一的未检查的异常之一重新抛出</li>
</ul>


<h2>Q19. 什么是DispatcherServlet和ContextLoaderListener？</h2>

<p>简单地说，在前端控制器设计模式中，一个控制器负责将传入的HttpRequests引导到应用程序的所有其他控制器和处理程序。</p>

<p>Spring的DispatcherServlet实现了这种模式，因此，它负责正确协调HttpRequests到正确的处理程序。</p>

<p>另一方面，ContextLoaderListener启动和关闭了Spring的根WebApplicationContext。它将ApplicationContext的生命周期与ServletContext的生命周期联系起来。我们可以用它来定义在不同Spring上下文中工作的共享bean。</p>

<p>关于DispatcherServlet的更多细节，请参考<a href="https://www.baeldung.com/spring-dispatcherservlet">本教程</a>。</p>

<h2>Q20. 什么是MultipartResolver，我们什么时候应该使用它？</h2>

<p>MultipartResolver接口是用来上传文件的。Spring框架提供了一个使用Commons FileUpload 的 MultipartResolver实现，另一个使用Servlet 3.0多部分请求解析。</p>

<p>使用这些，我们可以在我们的Web应用程序中支持文件上传。</p>

<h2>Q21. 什么是Spring MVC拦截器以及如何使用它？</h2>

<p>Spring MVC拦截器允许我们拦截一个客户端请求，并在三个地方进行处理&ndash;在处理之前、处理之后或完成之后（当视图被渲染时）。
拦截器可以用于跨领域的关注，避免重复的处理程序代码，如记录、改变Spring模型中全局使用的参数等。</p>

<p>关于细节和各种实现，请看<a href="https://www.baeldung.com/spring-mvc-handlerinterceptor">Spring MVC HandlerInterceptor介绍</a>这篇文章。</p>

<h2>Q22. 什么是Init Binder？</h2>

<p>一个用@InitBinder注解的方法被用来定制一个请求参数、URI模板和后备/命令对象。我们在控制器中定义它，它有助于控制请求。在这个方法中，我们注册和配置我们的自定义PropertyEditors，格式化器和验证器。</p>

<p>注解中有'value'元素。如果我们不设置它，@InitBinder注解的方法将在每个HTTP请求中被调用。如果我们设置了这个值，这些方法将只适用于特定的命令/表单属性，与/或名称与'value'元素对应的请求参数。</p>

<p>重要的是要记住，其中一个参数必须是WebDataBinder。其他参数可以是处理方法支持的任何类型，除了命令/表单对象和相应的验证结果对象。</p>

<h2>Q23. 解释一下控制器增强</h2>

<p>@ControllerAdvice注解允许我们编写适用于大范围控制器的全局代码。我们可以将控制器的范围与选定的包或特定的注解联系起来。</p>

<p>默认情况下，@ControllerAdvice适用于用@Controller（或@RestController）注释的类。如果我们想更具体一些，我们还有一些属性可以使用。</p>

<p>如果我们想把适用的类限制在一个包内，我们应该在注释中加入包的名字:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@ControllerAdvice("my.package")
</span><span class='line'>@ControllerAdvice(value = "my.package")
</span><span class='line'>@ControllerAdvice(basePackages = "my.package")</span></code></pre></td></tr></table></div></figure>


<p>也可以使用多个包，但这次我们需要使用一个数组而不是String。</p>

<p>除了通过包的名字限制到包之外，我们还可以通过使用该包中的一个类或接口来实现:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@ControllerAdvice(basePackageClasses = MyClass.class)</span></code></pre></td></tr></table></div></figure>


<p>&ldquo;assignableTypes"元素将@ControllerAdvice应用于特定的类，而 "annotations"则是针对特定的注释。</p>

<p>值得注意的是，我们应该把它和@ExceptionHandler一起使用。这种组合将使我们能够配置一个全局的、更具体的错误处理机制，而不需要每次都为每个控制器类实现它。</p>

<h2>Q24. @ExceptionHandler注解的作用是什么？</h2>

<p>@ExceptionHandler注解允许我们定义一个处理异常的方法。我们可以独立使用该注解，但将其与@ControllerAdvice一起使用是更好的选择。因此，我们可以建立一个全局性的错误处理机制。这样一来，我们就不需要在每个控制器中编写异常处理的代码。</p>

<p>让我们看看<a href="https://www.baeldung.com/exception-handling-for-rest-with-spring">Spring的REST错误处理</a>这篇文章中的例子:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@ControllerAdvice
</span><span class='line'>public class RestResponseEntityExceptionHandler
</span><span class='line'>  extends ResponseEntityExceptionHandler {
</span><span class='line'>
</span><span class='line'>    @ExceptionHandler(value = { IllegalArgumentException.class,
</span><span class='line'>      IllegalStateException.class })
</span><span class='line'>    protected ResponseEntity&lt;Object&gt; handleConflict(RuntimeException ex,
</span><span class='line'>      WebRequest request) {
</span><span class='line'>        String bodyOfResponse = "This should be application specific";
</span><span class='line'>        return handleExceptionInternal(ex, bodyOfResponse, new HttpHeaders(),
</span><span class='line'>          HttpStatus.CONFLICT, request);
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>我们还应该注意，这将为所有抛出IllegalArgumentException或IllegalStateException的控制器提供@ExceptionHandler方法。用@ExceptionHandler声明的异常应该与作为方法参数的异常相匹配。否则，异常解析机制将在运行时失败。</p>

<p>这里需要记住的一点是，为同一个异常定义多个@ExceptionHandler是可能的。但我们不能在同一个类中这样做，因为Spring会通过抛出一个异常并在启动时失败来抱怨。</p>

<p>另一方面，如果我们在两个独立的类中定义这些，应用程序就会启动，但它会使用它找到的第一个处理程序，可能是错误的。</p>

<h2>Q25. Web应用中的异常处理</h2>

<p>在Spring MVC中，我们有三种处理异常的方法。</p>

<ul>
<li>每个异常</li>
<li>每个控制器</li>
<li>全局</li>
</ul>


<p>如果在Web请求处理过程中抛出一个未处理的异常，服务器将返回一个HTTP 500响应。为了防止这种情况，我们应该用@ResponseStatus注解来注释我们的任何自定义异常。这类异常由HandlerExceptionResolver来解决。</p>

<p>当一个控制器方法抛出我们的异常时，这将导致服务器以指定的状态码返回一个适当的HTTP响应。我们应该记住，我们不应该在其他地方处理我们的异常，这种方法才会有效。</p>

<p>另一种处理异常的方法是使用@ExceptionHandler注解。我们在任何控制器中添加@ExceptionHandler方法，用它们来处理从该控制器中抛出的异常。这些方法可以在没有@ResponseStatus注解的情况下处理异常，将用户重定向到一个专门的错误视图，或者建立一个完全自定义的错误响应。</p>

<p>我们也可以传入与Servlet相关的对象（HttpServletRequest, HttpServletResponse, HttpSession, 和Principal）作为处理方法的参数。但是，我们应该记住，我们不能把模型对象直接作为参数。</p>

<p>处理错误的第三个选择是通过@ControllerAdvice类。它将允许我们应用同样的技术，只是这次是在应用层面，而不仅仅是在特定的控制器上。为了实现这一点，我们需要同时使用@ControllerAdvice和@ExceptionHandler。这样，异常处理程序将处理任何控制器抛出的异常。</p>

<p>关于这个话题的更多详细信息，请浏览<a href="https://www.baeldung.com/exception-handling-for-rest-with-spring">Spring的REST错误处理</a>文章。</p>

<p>译者点评：Spring 官方博客的这篇<a href="https://spring.io/blog/2013/11/01/exception-handling-in-spring-mvc">Exception Handling in Spring MVC</a>，对 Spring MVC 的异常处理介绍的很全面，值得反复研读。</p>

<h1>4. 结论</h1>

<p>在这篇文章中，我们已经探讨了一些Spring MVC相关的问题，这些问题可能会在Spring开发者的技术面试中出现。你应该把这些问题作为进一步研究的起点，因为这绝不是一个详尽的列表。</p>

<p>我们祝愿你在即将到来的面试中有好运气!</p>

<h1>5. 原文</h1>

<ul>
<li><a href="https://www.baeldung.com/spring-mvc-interview-questions">Spring MVC Interview Questions</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(翻译)常见 Spring 框架面试题]]></title>
    <link href="http://DamianSheldon.github.io/blog/top-spring-framework-interview-questions.html"/>
    <updated>2022-04-11T10:07:29+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/top-spring-framework-interview-questions</id>
    <content type="html"><![CDATA[<h1>1.概述</h1>

<p>在本教程中，我们将看看在求职面试中可能出现的一些最常见的与 Spring 有关的问题。</p>

<h1>2. Spring Core</h1>

<h2>Q1. 什么是 Spring 框架？</h2>

<p>Spring是开发 Java 企业版应用程序最广泛使用的框架。此外，Spring 的核心功能可用于开发任何 Java 应用程序。</p>

<p>我们使用它的扩展功能在 Jakarta EE 平台之上构建各种网络应用。我们也可以在简单的独立应用程序中使用它的依赖注入功能。</p>

<h2>Q2. 使用 Spring 的好处是什么？</h2>

<p>Spring 的目标是使 Jakarta EE的 开发更容易，所以我们来看看它的好处:</p>

<ul>
<li><strong>轻量级</strong>&ndash;在开发中使用该框架的开销很小</li>
<li><strong>反转控制（IoC）</strong>&ndash;Spring 容器负责连接各种对象的依赖关系，而不是创建或寻找依赖对象</li>
<li><strong>面向切面编程（AOP）</strong>&ndash;Spring支持AOP，将业务逻辑与系统服务分开</li>
<li><strong>IoC容器</strong>&ndash;管理 Spring Bean 的生命周期和项目特定的配置</li>
<li><strong>MVC框架</strong>&ndash;用于创建 Web 应用程序或 RESTful Web服务，能够返回XML/JSON响应</li>
<li><strong>事务管理</strong> &ndash; 通过使用 Java 注解或 Spring Bean 的 XML 配置文件，减少JDBC操作、文件上传等方面的模板代码量</li>
<li><strong>异常处理</strong>&ndash;Spring 提供了一个方便的 API，用于将特定技术的异常转化为未检查的异常</li>
</ul>


<h2>Q3. 您知道哪些 Spring 子项目？简要描述一下吧。</h2>

<ul>
<li><strong>核心</strong>&ndash;提供框架基础部分的关键模块，如 IoC 或 DI</li>
<li><strong>JDBC</strong>&ndash;实现了一个 JDBC 抽象层，不需要为特定的供应商数据库进行 JDBC 编码</li>
<li><strong>ORM 集成</strong> &ndash; 为流行的对象关系映射 API 提供集成层，如 JPA、JDO 和 Hibernate</li>
<li><strong>Web</strong>&ndash;一个面向网络的集成模块，提供多部分文件上传、Servlet监听器和面向网络的应用程序上下文功能</li>
<li><strong>MVC 框架</strong>&ndash;一个实现模型-视图-控制器设计模式的 Web 模块</li>
<li><strong>AOP 模块</strong>&ndash;面向切面编程实现，允许定义干净的方法拦截器和切点</li>
</ul>


<!--more-->


<h2>Q4. 什么是依赖性注入？</h2>

<p>依赖注入是控制反转（IoC）的一个方面，它是一个一般的概念，即我们不手动创建我们的对象，而是描述它们应该如何被创建。然后IoC容器将在需要时实例化所需的类。</p>

<p>更多细节，请看<a href="https://www.baeldung.com/inversion-control-and-dependency-injection-in-spring">这里</a>。</p>

<h2>Q5. 我们如何在 Spring 中注入 Bean？</h2>

<p>为了注入Spring Bean，有几个不同的选择。</p>

<ul>
<li>Setter 方法注入</li>
<li>构造器注入</li>
<li>字段注入</li>
</ul>


<p>配置可以使用XML文件或注解来完成。</p>

<p>更多细节，请查看<a href="https://www.baeldung.com/inversion-control-and-dependency-injection-in-spring">这篇文章</a>。</p>

<h2>Q6. 哪种方式是注入 Bean 的最佳方式，为什么？</h2>

<p>推荐的方法是对强制性的依赖使用构造函数参数，对选择性的依赖使用 setter 方法。这是因为构造函数注入允许向不可变的字段注入值，使测试更容易。</p>

<p>译者：问题可以继续拓展：字段注入的缺点？</p>

<ul>
<li>和 IoC 容器紧密耦合，不能在它之外使用</li>
<li>不便于单元测试</li>
</ul>


<p>Reference: <a href="https://stackoverflow.com/questions/39890849/what-exactly-is-field-injection-and-how-to-avoid-it">What exactly is Field Injection and how to avoid it?</a></p>

<h2>Q7. BeanFactory 和 ApplicationContext 之间的区别是什么？</h2>

<p>BeanFactory 表示一个提供和管理 Bean 实例的容器接口。默认的实现是在调用 <code>getBean()</code>时懒惰地将 Bean 实例化。</p>

<p>相比之下，ApplicationContext 表示一个容纳了应用程序中元数据和 bean 等所有信息的容器接口。它也扩展了 BeanFactory 接口，但默认实现是在应用程序启动时迫切地实例化 Bean。然而，这种行为可以为单个 Bean 重写。</p>

<p>关于所有的区别，请参考<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html">文档</a>。</p>

<p>译者点评：正如它们的名字一样，BeanFactory 是代表它是 Bean 工厂，它的主要功能是像工厂一样生产管理 Bean；ApplicationContext 则表示它是应用上下文，它是 BeanFactory 的子接口，扩展了很多面向应用的功能，它提供了国际化支持和框架事件体系，更易于创建实际应用。</p>

<h2>Q8. 什么是 Spring Bean？</h2>

<p>Spring Bean 是由 Spring IoC 容器初始化的 Java 对象。</p>

<p>译者点评：个人觉得 Spring 官方文档的解释更好:</p>

<blockquote><p>In Spring, the objects that form the backbone of your application and that are managed by the Spring IoC container are called beans.</p></blockquote>

<p>在 Spring 中， 那些被 Spring IoC 容器管理并形成应用骨架的对象称为 beans。</p>

<h2>Q9. Spring 框架中默认的 Bean 作用域是什么？</h2>

<p>默认情况下，Spring Bean 被初始化为一个单例。</p>

<h2>Q10. 如何定义一个 Bean 的作用域？</h2>

<p>为了设置Spring Bean的作用域，我们可以使用 <code>@Scope</code> 注解或在 XML 配置文件中使用 <code>"scope"</code> 属性。请注意，有五个支持的作用域。</p>

<ul>
<li>Singleton</li>
<li>Prototype</li>
<li>Request</li>
<li>Session</li>
<li>Global-session</li>
</ul>


<p>关于差异，请看<a href="https://docs.spring.io/spring/docs/3.0.0.M4/reference/html/ch03s05.html">这里</a>。</p>

<h2>Q11. 单例 bean 是线程安全的吗？</h2>

<p>单例 Bean 不是线程安全的，因为线程安全是关于执行的，而单例是一种专注于创建的设计模式。线程安全只取决于Bean的实现本身。</p>

<h2>Q12. Spring Bean 的生命周期是怎样的？</h2>

<p>首先，Spring Bean 需要根据 Java 或 XML Bean 定义进行实例化。它可能还需要执行一些初始化，使其进入可用状态。之后，当不再需要该 Bean 时，它将被从IoC 容器中删除。</p>

<p>所有初始化方法的整个周期显示在图片中（<a href="http://www.dineshonjava.com/2012/07/bean-lifecycle-and-callbacks.html">来源</a>）。</p>

<p><img src="https://www.baeldung.com/wp-content/uploads/2017/06/Spring-Bean-Life-Cycle.jpg" alt="Spring Bean Life Cycle" /></p>

<p>译者点评：作者的回答在实际面试时可能会略显单薄，这里我尝试补充一下：</p>

<p>首先应用上下文会读取配置元数据，然后解析元数据用 BeanDefinition 来表达 Bean 定义；之后先实例化实现了 BeanFactoryPostProcessor 接口的 Bean，排序后调用它们依次处理 Bean 定义信息；</p>

<p>如果 Bean 定义中存在实现了 InstantiationAwareBeanPostProcessor 接口的 Bean，则调用它的 <code>postProcessBeforeInstantiation</code> 方法；然后实例化 Bean，之后又调用 InstantiationAwareBeanPostProcessor 的 <code>postProcessAfterInstantiation</code> 和 <code>postProcessPropertyValues</code> 方法；</p>

<p>如果 Bean 实现了 BeanNameAware 接口则调用它的 <code>setBeanName</code> 方法；
如果 Bean 实现了 BeanFactoryAware 接口则调用它的 <code>setBeanFactory</code> 方法；
如果 Bean 实现了 ApplicationAware 接口则调用它 <code>setApplicationContext</code> 方法；</p>

<p>调用 BeanPostProcessor 的 <code>postProcessBeforeInitialization</code> 方法；</p>

<p>如果 Bean 实现了 InitializingBean 接口则调用它的 <code>afterPropertiesSet</code> 方法；</p>

<p>调用 <code>init-method</code> 属性 或 <code>@postConstruct</code> 注解设置的初始化方法；</p>

<p>调用 BeanPostProcessor 的 <code>postProcessAfterInitialization</code> 方法；</p>

<p>如果 Bean 的作用域是原型则直接将准备就绪 Bean 对象返回给调用者；</p>

<p>如果 Bean 的作用域是单例则要先把它保存到容器的 Bean 对象缓存池中，然后将准备就绪的对象返回给调用者；</p>

<p>之后容器销毁时，如果 Bean 实现了 DisposableBean 的 <code>destroy</code> 接口；</p>

<p>调用 <code>destroy-method</code> 属性或 <code>@preDestroy</code> 注解设置的销毁方法；</p>

<h2>Q13. 什么是基于 Java 的 Spring 配置？</h2>

<p>它是一种以类型安全的方式配置基于 Spring 的应用程序的方法。它是基于 XML 的配置的替代品。</p>

<p>另外，要把一个项目从 XML 配置迁移到 Java 配置，请参考<a href="https://www.baeldung.com/spring-xml-vs-java-config">这篇文章</a>。</p>

<h2>Q14. 我们可以在一个项目中拥有多个 Spring 配置文件吗？</h2>

<p>是的，在大型项目中，建议拥有多个 Spring 配置以提高可维护性和模块化程度。</p>

<p>我们可以加载多个基于 Java 的配置文件:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Configuration
</span><span class='line'>@Import({MainConfig.class, SchedulerConfig.class})
</span><span class='line'>public class AppConfig {</span></code></pre></td></tr></table></div></figure>


<p>或者我们可以加载一个XML文件，该文件将包含所有其他配置:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ApplicationContext context = new ClassPathXmlApplicationContext("spring-all.xml");</span></code></pre></td></tr></table></div></figure>


<p>在这个XML文件中，我们将有以下内容:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;import resource="main.xml"/&gt;
</span><span class='line'>&lt;import resource="scheduler.xml"/&gt;</span></code></pre></td></tr></table></div></figure>


<h2>Q15. 什么是 Spring Security？</h2>

<p>Spring Security 是 Spring 框架的一个独立模块，主要是在 Java 应用程序中提供认证和授权方法。它还负责处理大多数常见的安全漏洞，如CSRF攻击。</p>

<p>要在Web应用程序中使用Spring Security，我们可以通过简单的注解 @EnableWebSecurity 来开始。</p>

<p>欲了解更多信息，我们有一系列与<a href="https://www.baeldung.com/security-spring">安全</a>有关的文章。</p>

<h2>Q16. 什么是 Spring Boot？</h2>

<p>Spring Boot 是一个提供了一套预配置框架以减少模板配置的项目。这样，我们就可以用最少的代码来启动和运行一个 Spring 应用程序。</p>

<h2>Q17. 请说出 Spring 框架中使用的一些设计模式？</h2>

<ul>
<li><strong>单例模式</strong>&ndash;单例作用域的 bean</li>
<li><strong>工厂模式</strong>&ndash; Bean 工厂类</li>
<li><strong>原型模式</strong>（Prototype Pattern）&ndash;原型作用域的 Bean。</li>
<li><strong>适配器模式</strong>&ndash;Spring Web和Spring MVC</li>
<li><strong>代理模式</strong>&ndash;支持Spring面向切面编程</li>
<li><strong>模板方法模式</strong>&ndash;JdbcTemplate、HibernateTemplate等。</li>
<li><strong>前端控制器</strong>&ndash;Spring MVC DispatcherServlet</li>
<li><strong>数据访问对象</strong>&ndash;支持Spring DAO</li>
<li><strong>模型视图控制器</strong>&ndash;Spring MVC</li>
</ul>


<p>译者点评：可能按照创建型、结构型和行为模式从 GoF 23 个设计模式中匹配会容易记忆点：</p>

<ul>
<li><p><strong>创建型模式</strong></p>

<ul>
<li>生成器(Builder)</li>
<li>工厂(Factory)</li>
<li>原型(Prototype)</li>
<li>单例(Singleton)</li>
</ul>
</li>
<li><p><strong>结构型模式</strong></p>

<ul>
<li>适配器(Adatper)</li>
<li>组成(Composite)</li>
<li>外观(Facade)</li>
<li>代理(Proxy)</li>
</ul>
</li>
<li><p><strong>行为模式</strong></p>

<ul>
<li>职责链(Chain of responsibility)</li>
<li>迭代器(Iterator)</li>
<li>策略(Strategy)</li>
<li>模板(Template Method)</li>
</ul>
</li>
</ul>


<h2>Q18. 原型作用域是如何工作的？</h2>

<p>原型作用域意味着每次我们需要 Bean 的一个实例时，Spring都会创建一个新的实例并返回它。这与默认的单例作用域不同，在单例作用域中，每个 Spring IoC 容器只实例化一个对象实例。</p>

<h1>3. Spring Web MVC</h1>

<h2>Q19. 如何在 Spring Bean 中获取 ServletContext 和 ServletConfig 对象？</h2>

<p>我们可以通过实现 Spring-aware 的接口来做到这一点。<a href="http://www.buggybread.com/2015/03/spring-framework-list-of-aware.html">这里</a>有完整的列表。</p>

<p>我们也可以在这些 Bean 上使用 @Autowired 注解:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Autowired
</span><span class='line'>ServletContext servletContext;
</span><span class='line'>
</span><span class='line'>@Autowired
</span><span class='line'>ServletConfig servletConfig;</span></code></pre></td></tr></table></div></figure>


<h2>Q20. 什么是 Spring MVC 中的控制器？</h2>

<p>简单地说，所有由 DispatcherServlet 处理的请求都会被引导到带有 <code>@Controller</code> 注解的类。每个控制器类都将映射一个或多个请求到方法中，这些方法处理和执行携带输入的请求。</p>

<p>退一步讲，我们建议看一下<a href="https://www.baeldung.com/spring-controllers">典型的Spring MVC架构中的前端控制器</a>的概念。</p>

<p>译者点评：个人觉得原文这题给的答案不是很好，题目是问什么是 Spring MVC 中的控制器，答案应该重点解释是什么，而且说所有由 DispatcherServlet 处理的请求都会被引导到带有 <code>@Controller</code> 注释的类太绝对了，例如 BeanNameUrlHandlerMapping 就支持将 URL 映射到对应名字的 bean。</p>

<p>Spring MVC 中的控制器是处理请求的组件，充当模型-视图-控制器模式中的控制器角色，通常是由 <code>@Controller</code> 注解的类。</p>

<h2>Q21. <code>@RequestMapping</code> 注解是如何工作的？</h2>

<p><code>@RequestMapping</code> 注解用于将 Web 请求映射到Spring 控制器方法。除了简单的用例之外，我们还可以用它来映射 HTTP 头，用 <code>@PathVariable</code> 来绑定URI的部分内容，以及用 URI 参数和 <code>@RequestParam</code> 注解来工作。</p>

<p>关于 <code>@RequestMapping</code> 的更多细节可以在<a href="https://www.baeldung.com/spring-requestmapping">这里</a>找到。</p>

<p>更多关于 Spring MVC 的问题，请查看我们关于 <a href="https://www.baeldung.com/spring-mvc-interview-questions">Spring MVC 面试问题</a>的文章。</p>

<p>译者点评：个人觉得这个题出得不怎么好，给的答案也有点答非所问。单纯说 <code>@RequestMapping</code> 注解是如何工作的？那答案应该重点说<code>@RequestMapping</code> 注解会将映射请求所需的匹配信息保留到 Java 运行时，出题者更多想考察的应该是 Spring MVC 是如何将请求映射到 <code>@RequestMapping</code> 注解的方法。</p>

<h1>4. Spring Data Access</h1>

<h2>Q22. 什么是 Spring JdbcTemplate 类以及如何使用它？</h2>

<p>Spring JDBC 模板是数据库操作主要的API，我们可以通过它访问我们感兴趣的数据：</p>

<ul>
<li>创建和关闭连接</li>
<li>执行语句和存储过程调用</li>
<li>遍历结果集并返回结果</li>
</ul>


<p>为了使用它，我们需要定义 DataSource 的简单配置：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Configuration
</span><span class='line'>@ComponentScan("org.baeldung.jdbc")
</span><span class='line'>public class SpringJdbcConfig {
</span><span class='line'>    @Bean
</span><span class='line'>    public DataSource mysqlDataSource() {
</span><span class='line'>        DriverManagerDataSource dataSource = new DriverManagerDataSource();
</span><span class='line'>        dataSource.setDriverClassName("com.mysql.jdbc.Driver");
</span><span class='line'>        dataSource.setUrl("jdbc:mysql://localhost:3306/springjdbc");
</span><span class='line'>        dataSource.setUsername("guest_user");
</span><span class='line'>        dataSource.setPassword("guest_password");
</span><span class='line'> 
</span><span class='line'>        return dataSource;
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>如需进一步解释，请查看<a href="https://www.baeldung.com/spring-jdbc-jdbctemplate">这篇快速文章</a>。</p>

<h2>Q23. 如何在 Spring 中启用事务，其好处是什么？</h2>

<p>有两种不同的方式来配置事务&ndash;使用注解或使用面向切面编程（AOP）&ndash;每种方式都有其优势。</p>

<p>根据官方文档，以下是使用 Spring Transactions 的好处。</p>

<ul>
<li>在不同的事务API中提供一致的编程模型，如 JTA、JDBC、Hibernate、JPA 和 JDO</li>
<li>支持声明式事务管理</li>
<li>与 JTA 等一些复杂的事务 API 相比，为编程式事务管理提供了更简单的 API</li>
<li>与 Spring 的各种数据访问抽象结合得非常好</li>
</ul>


<h2>Q24. 什么是 Spring DAO？</h2>

<p>Spring 数据访问对象（DAO）是 Spring 为 JDBC、Hibernate 和 JPA 等数据访问技术提供的支持，其工作方式一致且简单。</p>

<p>有一个<a href="https://www.baeldung.com/persistence-with-spring-series/">完整的系列</a>讨论了 Spring 的持久性，提供了一个更深入的解释。</p>

<h2>5. Spring Aspect-Oriented Programming</h2>

<h2>Q25. 什么是面向切面编程（AOP）？</h2>

<p>切面使跨领域的关注点模块化，如事务管理，它跨越多种类型和对象，在不修改受影响的类的情况下为已有的代码增加额外的行为。</p>

<p>下面是<a href="https://www.baeldung.com/spring-aop-annotation">基于切面的执行时间记录</a>的例子。</p>

<p>译者点评：</p>

<blockquote><p>In computing, aspect-oriented programming (AOP) is a programming paradigm that aims to increase modularity by allowing the separation of cross-cutting concerns.
&ndash;Wikipedia</p></blockquote>

<p>在计算机领域，面向方面的编程（AOP）是一种编程范式，旨在通过允许跨领域的关注点分离来提高模块化程度。</p>

<h2>Q26. 什么是AOP中的Aspect、Advice、Pointcut和JoinPoint？</h2>

<ul>
<li>Aspect &ndash; 一个实现跨领域关注的类，如事务管理</li>
<li>Advice &ndash;当应用程序运行到与 Pointcut 相匹配的特定 JoinPoint 时被执行的方法</li>
<li>Pointcut &ndash; 一组与 JoinPoint 匹配的正则表达式，以确定是否需要执行 Advice</li>
<li>JoinPoint &ndash; 程序执行过程中的一个点，例如一个方法的执行或一个异常的处理</li>
</ul>


<h2>Q27. 什么是编织？</h2>

<p>根据<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/html/aop.html">官方文档</a>，编织是一个将各个切面与其他应用程序类型或对象联系起来以创建一个增强对象的过程。这可以在编译时、加载时或运行时完成。Spring AOP 和其他纯 Java AOP 框架一样，在运行时执行织入。</p>

<h1>6. 总结</h1>

<p>在这篇长文中，我们已经探讨了一些关于 Spring 技术面试最重要的问题。</p>

<p>我们希望这篇文章能对即将到来的Spring面试有所帮助。祝您好运!</p>

<h1>7. 原文</h1>

<ul>
<li><a href="https://www.baeldung.com/spring-interview-questions">Top Spring Framework Interview Questions</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CentOS 8 迁移到 Rocky Linux 时遇到的问题]]></title>
    <link href="http://DamianSheldon.github.io/blog/how-to-migrate-to-rocky-linux-from-centos-8.html"/>
    <updated>2022-03-08T11:25:32+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/how-to-migrate-to-rocky-linux-from-centos-8</id>
    <content type="html"><![CDATA[<p>虽然 Rocky Linux 专门写了一篇文档介绍如何从 CentOS 8 迁移过来，但实际迁移还是遇到了问题，这里简单记一下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Error: 
</span><span class='line'> Problem 1: cannot install both ibus-libs-1.5.19-14.el8_5.x86_64 and ibus-libs-1.5.19-12.el8.x86_64
</span><span class='line'>  - package ibus-devel-1.5.19-12.el8.x86_64 requires ibus-libs(x86-64) = 1.5.19-12.el8, but none of the providers can be installed
</span><span class='line'>  - cannot install the best update candidate for package ibus-libs-1.5.19-12.el8.x86_64
</span><span class='line'>  - problem with installed package ibus-devel-1.5.19-12.el8.x86_64
</span><span class='line'> Problem 2: cannot install both marisa-0.2.4-36.el8.x86_64 and marisa-0.2.4-4.el7.x86_64
</span><span class='line'>  - package marisa-devel-0.2.4-4.el7.x86_64 requires marisa(x86-64) = 0.2.4-4.el7, but none of the providers can be installed
</span><span class='line'>  - cannot install the best update candidate for package marisa-0.2.4-4.el7.x86_64
</span><span class='line'>  - problem with installed package marisa-devel-0.2.4-4.el7.x86_64
</span><span class='line'>(try to add '--allowerasing' to command line to replace conflicting packages or '--skip-broken' to skip uninstallable packages or '--nobest' to use not only best candidate packages)</span></code></pre></td></tr></table></div></figure>


<p>第一个问题是升级 <code>ibus-devel</code> 失败，这是因为 <code>ibus-devel</code> 在 PowerTools 的仓库中，默认可能没有使能这个仓库，我们可以手动使能安装或升级：<code>sudo dnf --enablerepo=powertools install ibus-devel</code>。</p>

<p>第二个问题是 CentOS 8 上有最新的 <code>marisa-0.2.4-36.el8.x86_64</code>，但是只有<code>marisa-devel-0.2.4-4.el7.x86_64</code>, 这个有点奇怪，不知道为什么两个版本没有同步升级，<code>marisa-devel</code> 一般是用于开发，我们可能暂时用不到，可以先尝试卸载它完成升级：<code>sudo dnf remove marisa-devel</code>。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Syncing packages
</span><span class='line'>
</span><span class='line'>Last metadata expiration check: 0:00:13 ago on Tue Mar  8 12:23:04 2022.
</span><span class='line'>
</span><span class='line'>Error: 
</span><span class='line'> Problem: package kyotocabinet-1.2.77-1.el7.x86_64 requires kyotocabinet-libs(x86-64) = 1.2.77-1.el7, but none of the providers can be installed
</span><span class='line'>  - kyotocabinet-libs-1.2.77-1.el7.x86_64 does not belong to a distupgrade repository
</span><span class='line'>  - problem with installed package kyotocabinet-1.2.77-1.el7.x86_64
</span><span class='line'>(try to add '--skip-broken' to skip uninstallable packages or '--nobest' to use not only best candidate packages)
</span><span class='line'>
</span><span class='line'>Error during distro-sync.
</span><span class='line'>
</span><span class='line'>An error occurred while we were attempting to convert your system to Rocky Linux. Your system may be unstable. Script will now exit to prevent possible damage.</span></code></pre></td></tr></table></div></figure>


<p>第三个问题是 kyotocabinet 的版本问题导致 <code>distro-sync</code> 失败。我查询了一下系统中安装的 kyotocabinet 版本又确实是 <code>1.2.77-1.el7</code>，也可以查询到迁移成功了：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ hostnamectl 
</span><span class='line'>   Static hostname: centos.tenneshop.com
</span><span class='line'>         Icon name: computer-vm
</span><span class='line'>           Chassis: vm
</span><span class='line'>        Machine ID: 2af6da6bd3624e0988bd30e22574b645
</span><span class='line'>           Boot ID: 6edac64aba294e1e9f3b7cfdb7b6970c
</span><span class='line'>    Virtualization: oracle
</span><span class='line'>  Operating System: Rocky Linux 8.5 (Green Obsidian)
</span><span class='line'>       CPE OS Name: cpe:/o:rocky:rocky:8:GA
</span><span class='line'>            Kernel: Linux 4.18.0-240.15.1.el8_3.x86_64
</span><span class='line'>      Architecture: x86-64</span></code></pre></td></tr></table></div></figure>


<p>通过 <code>Syncing packages</code> 搜索 migrate2rocky 脚本，这已经是最后三步了，于是尝试手动完成剩下的工作。  先 <code>dnf --allowerasing distro-sync</code>，然后查看会删除哪些软件，我这里是会删除 kyotocabinet，根据情况确认是否接受删除软件同步。</p>

<p>最后的 Disable Stream repos 和移除 <code>subscription-manage</code>，因为是 CentOS 8, 所以并不需要。</p>

<p>重启之后又遇到新的问题：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vboxclient the virtualbox kernel service is not running. exiting</span></code></pre></td></tr></table></div></figure>


<p>查看 <code>/var/log/vboxadd-setup.log</code>，</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/tmp/vbox.0/r0drv/linux/alloc-r0drv-linux.c:204:14: error: implicit declaration of function ‘map_vm_area’; did you mean ‘get_vm_area’? [-Werror=implicit-function-declaration]
</span><span class='line'>         if (!map_vm_area(pVmArea, PAGE_KERNEL_EXEC,
</span><span class='line'>              ^~~~~~~~~~~
</span><span class='line'>              get_vm_area
</span><span class='line'>cc1: some warnings being treated as errors
</span><span class='line'>make[2]: *** [scripts/Makefile.build:316: /tmp/vbox.0/combined-os-specific.o] Error 1
</span><span class='line'>make[1]: *** [Makefile:1571: _module_/tmp/vbox.0] Error 2
</span><span class='line'>make: *** [/tmp/vbox.0/Makefile-footer.gmk:117: vboxguest] Error 2</span></code></pre></td></tr></table></div></figure>


<p>经过一番搜索，我意识到可能是 <code>VBoxGuestAdditions.iso</code> 的版本不对，因为之前确实有提示类似 <code>unable to insert the virtual optical disk /usr/share/virtualbox/vboxguestadditions.iso</code> 的错误，原因是我没有把之前版本的 <code>VBoxGuestAdditions.iso</code> 从虚拟光驱中弹出，于是先弹出再插入新版本，果然新版本成功安装。</p>

<h2>Reference:</h2>

<ul>
<li><a href="https://docs.rockylinux.org/guides/migrate2rocky/">How to Migrate to Rocky Linux from CentOS Stream, CentOS, Alma Linux, RHEL, or Oracle Linux</a></li>
<li><a href="https://access.redhat.com/discussions/4452161">vboxclient the virtualbox kernel service is not running. exiting</a></li>
<li><a href="https://forums.virtualbox.org/viewtopic.php?t=103528">CentOS 8 Stream - vboxdrv wont build</a></li>
<li><a href="https://forums.virtualbox.org/viewtopic.php?t=82201">Cannot install Guest Addtions</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VirtualBox 搭建 CentOS 7 集群]]></title>
    <link href="http://DamianSheldon.github.io/blog/cluster-virtualbox-centos-7.html"/>
    <updated>2021-10-21T15:57:18+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/cluster-virtualbox-centos-7</id>
    <content type="html"><![CDATA[<p>软件开发时我们可能需要集群环境，特别是现在微服务很流行的情况下。如果我们手里的电脑配置不错就可以用 来搭建集群，用于学习或开发还是很不错，性价比很高。</p>

<p>我这里是用 VirtualBox 搭建 CentOS 7 集群，宿主机是内存 16 GB 加 SSD 1 TB 的 MacBook Pro。集群的核心是选择网络模式，VirtualBox 的网络模式概况如下:</p>

<table>
<thead>
<tr>
<th> Mode </th>
<th> VM -> Host </th>
<th> VM &lt;- Host </th>
<th> VM1 <-> VM2 </th>
<th> VM -> Net/LAN </th>
<th> VM &lt;- Net/LAN </th>
</tr>
</thead>
<tbody>
<tr>
<td> Host-only </td>
<td> + </td>
<td> + </td>
<td> + </td>
<td> - </td>
<td> - </td>
</tr>
<tr>
<td> Internal </td>
<td> - </td>
<td> - </td>
<td> + </td>
<td> - </td>
<td> - </td>
</tr>
<tr>
<td> Bridged </td>
<td> + </td>
<td> + </td>
<td> + </td>
<td> + </td>
<td> + </td>
</tr>
<tr>
<td> NAT </td>
<td> + </td>
<td> Port forward </td>
<td> - </td>
<td> + </td>
<td> Port forward </td>
</tr>
<tr>
<td> NAT service </td>
<td> + </td>
<td> Port forward </td>
<td> + </td>
<td> + </td>
<td> Port forward </td>
</tr>
</tbody>
</table>


<p>我希望集群的机器可以互相访问并能访问网络，从上面的列表可知，我们可以选择 Bridged，或者 NAT service 搭配 Port forward。在搭建之初，我搜索了相关的资料，但是并没找到特别理想的，这篇 <a href="https://subscription.packtpub.com/book/web-development/9781785288685/1/ch01lvl1sec09/setting-up-centos-7-nodes">Setting up CentOS 7 nodes</a> 勉强还凑合，于是我主要参考它来搭建，网络模式也同样是选择的 Bridged，它还使用了双网卡，虚拟机之间通信使用的 Internal Networking， 感觉上性能可能会好点，没实测。双网卡并不是必须的，VirtualBox 对 Internal Networking 的说明是其在安全方面更有优势:</p>

<blockquote><p>Even though technically, everything that can be done using internal networking can also be done using bridged networking, there are security advantages with internal networking. In bridged networking mode, all traffic goes through a physical interface of the host system. It is therefore possible to attach a packet sniffer such as Wireshark to the host interface and log all traffic that goes over it. If, for any reason, you prefer two or more VMs on the same machine to communicate privately, hiding their data from both the host system and the user, bridged networking therefore is not an option.</p></blockquote>

<p>由于 CentOS 主要是运行服务，我们可以使用 Minimal 安装，这样可以减少资源开销，安装好后，默认是没有启用网络的， 网络相关的配置是在 <code>/etc/sysconfig/network-scripts</code> 目录下，配置文件的命令惯例是 <code>ifcfg-enp0sX</code> ， <code>X</code> 是整数，我这里是 <code>ifcfg-enp0s3</code> 和 <code>ifcfg-enp0s8</code>，将 <code>/etc/sysconfig/network-scripts/ifcfg-enp0s3</code> 和 <code>/etc/sysconfig/network-scripts/ifcfg-enp0s8</code> 中的 <code>ONBOOT</code> 改成 <code>yes</code>。</p>

<p>构建 Internal Network 时，手动去指定 ip 会很麻烦，VirtualBox 给了我们另一个选择:</p>

<blockquote><p>Unless you configure the virtual network cards in the guest operating systems that are partici- pating in the internal network to use static IP addresses, you may want to use the DHCP server that is built into Oracle VM VirtualBox to manage IP addresses for the internal network.</p></blockquote>

<p>我们可以 <code>10.0.0.0/8</code>, <code>172.16.0.0/12</code> 和 <code>192.168.0.0/16</code> 选择一个合适的私有 ip 地址范围来构建 Internal Network，我这里选择 <code>172.16.0.0/12</code>。</p>

<p>在宿主机下运行命令 <code>/Applications/VirtualBox.app/Contents/MacOS/VBoxManage dhcpserver add --netname=intnet --server-ip=172.16.0.1 --netmask=255.240.0.0 --lower-ip=172.16.0.2 --upper-ip=172.16.255.255 --enable</code> 创建好 DHCP server。</p>

<p>之后我们可以利用 VirtualBox 的克隆功能来扩展我们的集群节点。</p>

<h1>修改记录</h1>

<ul>
<li>2021/10/21：第一次完成</li>
</ul>


<h1>Reference</h1>

<ul>
<li><a href="https://subscription.packtpub.com/book/web-development/9781785288685/1/ch01lvl1sec09/setting-up-centos-7-nodes">Setting up CentOS 7 nodes</a></li>
<li><a href="https://54m4ri74n.medium.com/building-an-internal-network-in-virtualbox-d0a4974882d0">Building an Internal Network in VirtualBox</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[记一次 docker 网络问题排查]]></title>
    <link href="http://DamianSheldon.github.io/blog/remembering-a-docker-network-issue-troubleshooting.html"/>
    <updated>2021-03-30T14:40:26+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/remembering-a-docker-network-issue-troubleshooting</id>
    <content type="html"><![CDATA[<p>最近在学 docker，虽然很早之前就简单体验过一次，但限于时间没有深入，最近有点空余时间，于是准备深入学习一下。但没想到一开始就遇到了拦路虎，照着官方文档 Get Started 一步一步往下，在构建一个自己的镜像时就遇到了问题，在多容器之间也无法通信，这可愁坏我了，只能硬着头皮来排查问题。</p>

<p>构建镜像时问题表现是牵涉到连接网络的命令会失败，google 一圈之后，找到使用 <code>--network=host</code> 的偏方，成功绕过问题。而多容器之间无法通信却一时措手无策。现在就只有 <code>--network=host</code> 这一个线索，于是就想加上这个参数后有什么区别呢？</p>

<p>在官方文档上搜寻一圈之后我没查到有用信息，于是我想相关的书可能会讲讲 docker 网络这块，在微信读书上找了杨保华、戴王剑和曹亚仑合著的《Docker 技术入门与实战(第3版)》。因为 docker 技术在快速发展，所以书中的命令与当前版本有些许差异，但问题不大，不妨碍理解。这本书有两节专门介绍 docker 网络，于是我便先看了这两节，从这里得到一条重要线索：docker 和宿主机的通信是依靠防火墙转发。<code>--network=host</code> 也验证了这条线索，加上这参数会直接使用宿主机的网络配置，这样 docker 和宿主机的通信就不需要防火墙转发了。</p>

<p>问题现在定位到了防火墙，那么为什么防火墙不转发 docker 的网络数据包呢？是不是哪条防火墙规则没配对？另外我还怀疑是不是我的实践环境有问题？我的实践环境是这样的:物理主机是 macOS，上面安装 virtulbox，使用 virtulbox 创建了一个 CentOS 8 的虚拟机, 虚拟机的网络模式是 NAT。这种情况无疑增加了问题排查的难度，怎么来排查呢？</p>

<p>我先看了一下 virtulbox 的用户手册中的网络模式介绍，NAT 是可以连接到宿主机，而且现在虚拟机是可以访问网络的。如果想快速定位问题，我想还得从网络请求的数据包入手，想办法来跟踪数据包。</p>

<p>于是就来查怎么调试 iptables。查到可以通过 TRACE 和 LOG 来输出日志，看介绍也没看出这俩有什么区别。凭经验觉得 TRACE 好像比 LOG 后出来，看起来也高大上一点，先试着用 TRACE 。Google 了一圈，找到都是 CentOS 6 或 CentOS 7 相关的配置，也只能先将就着用吧。</p>

<p>我先是参考的 <a href="https://www.programmersought.com/article/68601428960/">CentOS implements iptables log output and debugging through raw table</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$sudo modprobe ipt_LOG
</span><span class='line'>$sudo sysctl net.netfilter.nf_log.2
</span></code></pre></td></tr></table></div></figure>


<p>输出的结果是 NONE，于是尝试显示设置 <code>sudo sysctl net.netfilter.nf_log.2=ipt_LOG</code></p>

<!--more-->


<p>结果给我报一个 <code>sysctl: setting key "net.netfilter.nf_log.2": No such file or directory</code>, 为什么没有这个 key 呢？于是我查询一下:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo sysctl -a | grep net.netfilter.nf_log
</span><span class='line'>net.netfilter.nf_log.0 = NONE
</span><span class='line'>net.netfilter.nf_log.1 = NONE
</span><span class='line'>net.netfilter.nf_log.10 = NONE
</span><span class='line'>net.netfilter.nf_log.11 = NONE
</span><span class='line'>net.netfilter.nf_log.12 = NONE
</span><span class='line'>net.netfilter.nf_log.2 = NONE
</span><span class='line'>net.netfilter.nf_log.3 = NONE
</span><span class='line'>net.netfilter.nf_log.4 = NONE
</span><span class='line'>net.netfilter.nf_log.5 = NONE
</span><span class='line'>net.netfilter.nf_log.6 = NONE
</span><span class='line'>net.netfilter.nf_log.7 = NONE
</span><span class='line'>net.netfilter.nf_log.8 = NONE
</span><span class='line'>net.netfilter.nf_log.9 = NONE
</span><span class='line'>net.netfilter.nf_log_all_netns = 0</span></code></pre></td></tr></table></div></figure>


<p>明明有这个 key 啊, Google 一圈不得要领。继续搜索, 找到这篇 <a href="https://vocon-it.com/2020/03/30/tracing-iptables-on-centos-cheat-sheet/">Tracing iptables on CentOS – Cheat sheet</a>, 它提到的方法如下:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>modprobe nf_log_ipv4
</span><span class='line'>sudo sysctl net.netfilter.nf_log.2=nf_log_ipv4</span></code></pre></td></tr></table></div></figure>


<p>因为我对 linux 模块相关命令还是有点了解，知道 <code>modprobe</code> 是用来加载模块， <code>modinfo</code> 可以查看模块的信息,我发现 <code>nf_log_ipv4</code> 这个模块在我的系统中已经加载，所以我就直接尝试 <code>sudo sysctl net.netfilter.nf_log.2=nf_log_ipv4</code>, 得到的仍然是 <code>sysctl: setting key "net.netfilter.nf_log.2": No such file or directory</code>，不得不说这很迷，为什么会一直报这么一个不相关的错误。</p>

<p>没办法，继续搜索, 找到 <a href="https://forums.centos.org/viewtopic.php?t=54411">IPTables. Setting nf_log kernel parameter</a>,它其中提到：</p>

<blockquote><p>I think they split the xt_LOG code in newer kernel versions and you need to modprobe nf_log_ipv4 now and sysctl net.netfilter.nf_log.2=nf_log_ipv4 (assuming you want to trace ipv4 packets)</p></blockquote>

<p>很奇怪，为什么其他人都可以设置，我这里却不行，而且这三篇文章用的方法都类似，不至于啊，google 到的也就这几篇文章，于是我回过头去再次研读第一篇文章，在想要不要试下作者提供 CentOS 7 系列的配置方法，毕竟版本更接近，而且这三篇文章都提到用 <code>nf_log_ipv4</code>, 这时我发现他的方法里 <code>modprobe nf_log_ipv4</code> 之后并不需要设置， <code>net.netfilter.nf_log.2</code> 的值便设置了,于是我也照做，终于配置成功。我觉得这里可能是 CentOS 8 有 bug，因为明明有 key 却设置不上，现在设置成功，也就不管那么多了，继续解决问题要紧。</p>

<p>我到 <code>/etc/rsyslog.conf</code> 中开启内核日志输出：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>kern.*                                                 /var/log/messages</span></code></pre></td></tr></table></div></figure>


<p>重启日志输出服务 <code>sudo systemctl restart rsyslog.service</code>,往防火墙里添加 TRACE 规则:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo iptables -t raw -A OUTPUT     -p tcp -j TRACE
</span><span class='line'>sudo iptables -t raw -A PREROUTING -p tcp -j TRACE</span></code></pre></td></tr></table></div></figure>


<p>监视系统日志 <code>sudo tail -f /var/log/messages</code></p>

<p>重启 docker 服务 <code>sudo systemctl restart docker.service</code>, 运行容器 <code>sudo docker run -it busybox</code>, 然后在 busybox 容器中触发网络请求:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /tmp/
</span><span class='line'>wget http://www.bing.com/</span></code></pre></td></tr></table></div></figure>


<p>系统日志并没有输出， 查看 <code>sudo dmesg</code> 也没有日志输出。真是让挫败啊，没办法，只能退而求其次改用 LOG。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 删除 TRACE 规则
</span><span class='line'>sudo iptable -t raw -D PREROUTING 1
</span><span class='line'>sudo iptable -t raw -D OUTPUT 1
</span><span class='line'>
</span><span class='line'>## 添加 LOG 规则
</span><span class='line'>sudo iptables -t raw -A OUTPUT     -p tcp -j LOG --log-level debug
</span><span class='line'>sudo iptables -t raw -A PREROUTING     -p tcp -j LOG --log-level debug</span></code></pre></td></tr></table></div></figure>


<p>同样重启日志服务 <code>sudo systemctl restart rsyslog.service</code>, 监视系统日志 <code>sudo tail -f /var/log/messages</code>，重启 docker 服务 <code>sudo systemctl restart docker.service</code>, 运行容器 <code>sudo docker run -it busybox</code>, 然后在 busybox 容器中触发网络请求:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /tmp/
</span><span class='line'>wget http://www.bing.com/</span></code></pre></td></tr></table></div></figure>


<p>日志是成功输出了，内心着实高兴了一把，但由于我的规则设置太宽泛，输出的太多了，很难找到有用的信息，脑中闪过一个念头，那把规则设置更严格一点不就可以了，搓搓小手，兴奋地实践起来，于是我把规则调整成容器发出的网络数据包：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo iptables -t raw -A OUTPUT     -p tcp -s 172.17.0.0/16 -j LOG --log-level debug
</span><span class='line'>sudo iptables -t raw -A PREROUTING     -p tcp -s 172.17.0.0/16 -j LOG --log-level debug</span></code></pre></td></tr></table></div></figure>


<p>果然，相关日志输出少多了，只有两条,具体如下:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Mar 29 15:51:46 centos kernel: IN=docker0 OUT= PHYSIN=vethfeab609 MAC=02:42:5d:dd:2d:af:02:42:ac:11:00:02:08:00 SRC=172.17.0.2 DST=222.246.1
</span><span class='line'>29.80 LEN=60 TOS=0x00 PREC=0x00 TTL=64 ID=30005 DF PROTO=TCP SPT=60366 DPT=80 WINDOW=29200 RES=0x00 SYN URGP=0 
</span><span class='line'>Mar 29 15:51:47 centos kernel: IN=docker0 OUT= PHYSIN=vethfeab609 MAC=02:42:5d:dd:2d:af:02:42:ac:11:00:02:08:00 SRC=172.17.0.2 DST=222.246.1
</span><span class='line'>29.80 LEN=60 TOS=0x00 PREC=0x00 TTL=64 ID=30006 DF PROTO=TCP SPT=60366 DPT=80 WINDOW=29200 RES=0x00 SYN URGP=0 </span></code></pre></td></tr></table></div></figure>


<p>这对解决问题帮助不大，摔！这几乎要击垮我了，但还是心有不甘。于是只能把希望再次寄托给 TRACE，我在 CentOS 8 上直接 <code>man iptables</code>，发现它和网络上找到的 man page 内容确实有些差异, 它的 target 专门独立到 <code>iptables-extensions</code>:</p>

<blockquote><p>iptables  can  use  extended packet matching and target modules.  A list of these is available in the iptables-extensions(8) man‐page.</p></blockquote>

<p>继续 <code>man 8 iptables-extensions</code>，搜索 TRACE, 相关介绍如下:</p>

<blockquote><p>This  target  marks  packets so that the kernel will log every rule which match the packets as those traverse the tables, chains,rules. It can only be used in the raw table.</p>

<p>With iptables-legacy, a logging backend, such as ip(6)t_LOG or nfnetlink_log, must be loaded for this to be visible.  The packets are  logged  with the string prefix: &ldquo;TRACE: tablename:chainname:type:rulenum &rdquo; where type can be &ldquo;rule&rdquo; for plain rule, &ldquo;return&rdquo; for implicit rule at the end of a user defined chain and &ldquo;policy&rdquo; for the policy of the built in chains.</p>

<p>With iptables-nft, the target is translated into nftables' meta nftrace expression. Hence  the  kernel  sends  trace  events  via netlink to userspace where they may be displayed using xtables-monitor &ndash;trace command. For details, refer to xtables-monitor(8).</p></blockquote>

<p>原来配合 <code>iptables-nft</code> 时, 日志是使用  <code>xtables-monitor --trace</code>, 似乎又看到了一丝曙光,于是赶紧删除 LOG 规则，添加 TRACE 规则:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 删除 LOG 规则
</span><span class='line'>sudo iptable -t raw -D PREROUTING 1
</span><span class='line'>sudo iptable -t raw -D OUTPUT 1
</span><span class='line'>
</span><span class='line'># 添加 TRACE 规则
</span><span class='line'>sudo iptables -t raw -A OUTPUT     -p tcp -j TRACE
</span><span class='line'>sudo iptables -t raw -A PREROUTING -p tcp -j TRACE</span></code></pre></td></tr></table></div></figure>


<p>准备就绪之后就按前面相关的步骤触发网络请求，果然成功输出日志，而且输出了很多日志，我往屏幕下面翻，最后竟然输出的 &ldquo;Failed to received netlink message: No buffer space available&rdquo;,为什么报错了呢？我尝试 <code>man xtables-monitor</code>,文档上明明说的是： xtables-monitor will run until the user aborts execution, typically by using CTRL-C.我这里为什么报错终止了呢？Google 一圈一无所获，想到之前 LOG 因为规则太宽松输出了很多日志，就想是不是这规则太宽松导致日志太多，缓冲区不够用，赶紧调整 TRACE 规则:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 删除 TRACE 规则
</span><span class='line'>sudo iptable -t raw -D PREROUTING 1
</span><span class='line'>sudo iptable -t raw -D OUTPUT 1
</span><span class='line'>
</span><span class='line'># 添加 TRACE 规则
</span><span class='line'>sudo iptables -t raw -A OUTPUT     -p tcp -s 172.17.0.0/16  -j TRACE
</span><span class='line'>sudo iptables -t raw -A PREROUTING -p tcp -s 172.17.0.0/16 -j TRACE</span></code></pre></td></tr></table></div></figure>


<p>这下好了，日志正常输出，也没有报错了。于是仔细查看日志，终于找到： <code>firewalld:filter_FORWARD:rule:0x93:DROP</code>,原来是 firewall 将包丢掉了。可是对 firewall 一点也不熟，先找了一遍 firewall 教程看了一下，但是还不知道怎么在 firewall 中添加规则，要学会添加规则也得花点力气，这时脑海中冒出另一个想法：我何不直接停止 firewall，确认下是不是 firewall 导致的问题。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo systemctl stop firewalld.service
</span><span class='line'>sudo systemctl stop docker.service
</span><span class='line'>sudo systemctl start docker.service
</span><span class='line'>sudo docker run -it busybox</span></code></pre></td></tr></table></div></figure>


<p>尝试一下,发现可以了，确定确实是 firewall 导致的问题。那么现在是自己研究 firewall 添加规则吗？有点复杂啊，我在想是不是我 docker 版本太低了，检查一下确实比最新的版本要低，新版本可能解决了。在文档也确实找到了对应描述:</p>

<blockquote><p>If you are running Docker version 20.10.0 or higher with firewalld on your system with &ndash;iptables enabled, Docker automatically creates a firewalld zone called docker and inserts all the network interfaces it creates (for example, docker0) into the docker zone to allow seamless networking.</p></blockquote>

<p>于是升级新版本，新版本也确实解决了这个问题，嗯，这下暂时不用研究 firewall 添加规则了。</p>

<p>这次能成功排查 docker 的网络问题还是挺开心的，说实话一开始我是没信心的，毕竟才开始接触 docker，另一方面 linux 网络这块牵涉到的知识非常多，甚至在心里想实在解决不了就算了,直接在 macOS 上来学好了。得到的启发是不管有没有解决问题，首先解决问题的方法要对，方法对了之后还得要坚持；其次是注意自己软件使用的版本，相关的命令参数可能需要查看对应版本的文档去核实；最后是虽然项目的官方文档是入门的不错材料，但很多时候官方文档写得很浅或者对新手不友好，这时候如果觉得项目值得投入时间学习的话，看相关的书籍是一个很好的选择，对系统学习和精进大有禆益。</p>

<h1>Reference</h1>

<ul>
<li><a href="https://www.programmersought.com/article/68601428960/">CentOS implements iptables log output and debugging through raw table</a></li>
<li><a href="https://vocon-it.com/2020/03/30/tracing-iptables-on-centos-cheat-sheet/">Tracing iptables on CentOS – Cheat sheet</a></li>
<li><a href="https://forums.centos.org/viewtopic.php?t=54411">IPTables. Setting nf_log kernel parameter</a></li>
<li><a href="https://stackoverflow.com/questions/37536687/what-is-the-relation-between-docker0-and-eth0">What is the relation between docker0 and eth0?</a></li>
<li><a href="https://serverfault.com/questions/78240/debugging-rules-in-iptables">Debugging rules in Iptables</a></li>
<li><a href="https://unix.stackexchange.com/questions/199966/how-to-configure-centos-7-firewalld-to-allow-docker-containers-free-access-to-th">How to configure Centos 7 firewallD to allow docker containers free access to the host&rsquo;s network ports?</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-a-firewall-using-firewalld-on-centos-8">How To Set Up a Firewall Using firewalld on CentOS 8</a></li>
<li><a href="https://firewalld.org/documentation/howto/enable-and-disable-firewalld.html">Enable and Disable firewalld</a></li>
<li></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UI 设计与屏幕适配]]></title>
    <link href="http://DamianSheldon.github.io/blog/ui-design-and-screen-adaptation.html"/>
    <updated>2021-03-17T15:12:26+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/ui-design-and-screen-adaptation</id>
    <content type="html"><![CDATA[<p>目前移动设备的尺寸很多，所以前端 (iOS, Android, Web, 小程序等)开发需要适配多种尺寸屏幕。在适配时我们可能会有困惑，设计稿通常是 px 来表示尺寸，设备的分辨率也是以 px 来表示，它们之间是一样的吗？还是存在什么关系？iOS 开发者用 point 来表示视图的尺寸； Android 开发者用 dp 来表示视图尺寸； Web 开发者用 px 来表示尺寸？它们和设计稿的 px 是什么关系？设计师应该以什么基准尺寸来设计会有利于屏幕适配？应该输出几套切图？除了切图，设计师还可以做些什么来配合开发者做屏幕适配？要搞清楚这些问题，我们需要翻翻历史了。</p>

<p>Tim Chien 和 Robert Nyman 的这篇 <a href="https://hacks.mozilla.org/2013/09/css-length-explained/">CSS Length Explained</a> 帮了我的大忙，本文就是基于它而写成。</p>

<h2>英寸</h2>

<p>我们经常是用英寸为度量单位来表示手机屏幕尺寸，一英寸相当于2.54厘米或0.0254米。</p>

<h2>设备像素(device pixel)</h2>

<p>计算机屏幕显示事物的单位是像素。显示屏上的单个物理 &ldquo;光点"，能够独立于它的邻居显示出完整的颜色，被称为像素（图片元素）。我们把屏幕上的物理像素称为 "设备像素"。</p>

<h2>DPI, PPI</h2>

<p>DPI 是 dots per inch 的英文缩写，即每英寸点数； PPI 是 pixels per inch 的缩写，即每英寸像素。 它们都用来表示显示像素密度 (Display pixel density)。</p>

<p>计算机屏幕是由大量发光二极管整齐排列构成的集成电路，由于屏幕制造商工艺水平差异，每英寸集成电路上排列的二极管的数量会不一样，屏幕出厂时我们可以从厂商那里得知屏幕的 PPI。</p>

<p>于是我们可以知道:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>width or height of one device pixel = 1 / device's DPI  </span></code></pre></td></tr></table></div></figure>


<p>例如 MacBook Air(2011) 的 DPI 为 125 ， 所以：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(width or height of one device pixel) = 1/125 inch = 0.008 inch = 0.02032 cm</span></code></pre></td></tr></table></div></figure>


<!--more-->


<h2>The CSS pixel (px)</h2>

<p>CSS像素的尺寸大致可以看成是人的肉眼能够舒适地看到的尺寸，不要太小，这样你就得眯着眼睛，也不要大到让你看到像素化。"看得很舒服 &ldquo; 的定义比较笼统，<a href="http://www.w3.org/TR/CSS2/syndata.html%23length-units">W3C CSS规范</a>中给我们一个推荐的参考。</p>

<blockquote><p>The reference pixel is the visual angle of one pixel on a device with a pixel density of 96 DPI and a distance from the reader of an arm’s length.</p></blockquote>

<h2>The viewing distance</h2>

<p>如前所述，观看距离因人而异，因设备而异，这就是为什么我们必须将设备按外形因素分类的原因。推荐的参考观看距离(&ldquo;一臂之长&rdquo;)和参考像素密度(&ldquo;96 DPI&rdquo;)其实是历史数据。</p>

<p>对于21世纪的日常设备，我们有不同的参考建议:</p>

<table>
<thead>
<tr>
<th> Device </th>
<th> Baseline pixel density </th>
<th> Width/height of one CSS pixel </th>
<th> Viewing distance</th>
</tr>
</thead>
<tbody>
<tr>
<td> A 20th century PC with CRT display </td>
<td> 96 DPI </td>
<td> ~0.2646 mm (1/96in) </td>
<td> 28 in (71.12cm) </td>
</tr>
<tr>
<td> Modern laptop with LCD </td>
<td> 125 DPI </td>
<td> 0.2032 mm (1/125in) </td>
<td> 21.5 in (54.61cm)</td>
</tr>
<tr>
<td> Smartphones/Tablets </td>
<td> 160 DPI </td>
<td> ~0.159mm (1/160 in) </td>
<td> 16.8in (42.672cm) </td>
</tr>
</tbody>
</table>


<p>因此，我们在 CSS 的世界里建立了一个基本的事实：一个 CSS 像素会以不同的物理尺寸显示，但它总是以正确的尺寸显示，让浏览者感到舒适。</p>

<h2>Device pixel ratio (DPPX)</h2>

<p>随着我们步入未来，现在很多智能手机在出厂时都采用了高密度的显示屏。为了保证 CSS 像素在每一个访问网络的设备(即一切有屏幕和网络连接的设备)上的尺寸一致，设备制造商不得不将多个设备像素映射到一个 CSS 像素上，以弥补它相对更大的物理尺寸。CSS 像素相对于设备像素的尺寸比就是设备像素比(DPPX)。</p>

<p>我们以 iPhone 4 为最著名的例子。它配备了一块 326 DPI 的显示屏。根据我们上面的表格，作为一款智能手机，它的典型观看距离是 16.8 英寸，它的基准像素密度是 160DPI。为了创建一个 CSS 像素，苹果选择将设备像素比设置为 2，这就等于让 iOS Safari 显示网页的方式和 163 DPI 手机上一样。</p>

<p>在我们继续之前，先回头看看上面的数字。其实我们可以做得更好，不把设备像素比设置为2，而是设置为<code>326/160=2.0375</code>，让一个 CSS 像素与参考尺寸相比完全一样。不幸的是，这样的比例会导致一个意想不到的结果：由于每个 CSS 像素并不是由整个设备像素来显示的，所以浏览器不得不对所有的位图图像、边框等进行反锯齿，因为它们几乎总是被当作整个 CSS 像素来显示。浏览器很难利用2.0375个设备像素来绘制你的1个CSS像素宽的边框：如果比例是简单的2，那就容易多了。</p>

<p>顺带一提，163 DPI恰好是上一代 iPhone 的像素密度，所以网页的工作方式也是一样的，不需要开发者对自己的网站进行任何特殊的"升级"。</p>

<p>设备制造商通常选择1.5，或2，或其他整数作为 DPPX 值。偶尔，有些设备决定不这么玩了，发货时使用1.325 DPPX这样的值；作为开发者，我们也许应该忽略这些设备。</p>

<p>现在我们就比较清楚 CSS pixel 和 device pixel 的关系了。接下来我们看下 iOS 的 point 和 device pixel 的关系。</p>

<h2>point</h2>

<blockquote><p>The coordinate system iOS uses to place content onscreen is based on measurements in points, which map to pixels in the display. A standard-resolution display has a <code>1:1</code> pixel density (or <code>@1x</code>), where one pixel is equal to one point. High-resolution displays have a higher pixel density, offering a scale factor of 2.0 or 3.0 (referred to as <code>@2x</code> and <code>@3x</code>). As a result, high-resolution displays demand images with more pixels.</p></blockquote>

<p>从 Apple 这段描述可知， scale factor (<code>@1x</code>, <code>@2x</code> 和 <code>@3x</code>) 就是我们上面据说的设备像素比（DPPX)。point 和 css pixel 是对应的。</p>

<h2>dp</h2>

<p>那 dp 和 device pixel 又是什么关系呢？</p>

<blockquote><p>To preserve the visible size of your UI on screens with different densities, you must design your UI using density-independent pixels (dp) as your unit of measurement. One dp is a virtual pixel unit that&rsquo;s roughly equal to one pixel on a medium-density screen (160dpi; the &ldquo;baseline&rdquo; density). Android translates this value to the appropriate number of real pixels for each other density.</p></blockquote>

<p>Google 这段描述更加直接，dp 是一个虚拟的像素单位，大致相当于中密度屏幕上的一个像素(160dpi;&ldquo;基线"密度)，所以 dp 和 css pixel 也是对应的。而 xhdpi, xxhdpi 和 xxxhdpi 是表示设备像素比(DPPX)2、3 和 4。</p>

<p>现在我们还剩下设计稿的 px。我们回忆一下在前端开发时，如果我们不指定图片尺寸而直接去显示设计师的切图，这时图片是有一个固有尺寸的，在设备像素比为1的设备上，这个固有尺寸就是图片的尺寸，而在设备像素比为2上尺寸是图片的尺寸除以2，所以设计稿的 px是对应设备像素(device pixel)的，这也是为什么我们需要提供多套图片来做适配。假设我们不提供多套图片，现在我们有一个 <code>100 x 100 css pixel</code>的图片， 在设备像素比为3的设备上也会去加载 <code>100 x 100 device pixel</code> 尺寸的资源图，按上面的分析，实际它应该加载 <code>300 x 300 device pixel</code> 尺寸的资源图，那么相当于资源图上一个像素点会对应显示三个设备像素点，这样可能会出现模糊或锯齿的情况。</p>

<p>理清了各平台尺寸单位的关系以及它们与设备像素的关系后，我们来看下设备尺寸。</p>

<h2>设备尺寸</h2>

<p>我们先看下 iOS 设备尺寸分布:</p>

<table>
<thead>
<tr>
<th> 型号 </th>
<th> points </th>
<th> 物理像素 </th>
<th style="text-align:center;"> 设备像素比(DPPX) </th>
</tr>
</thead>
<tbody>
<tr>
<td> 2G,3G,3GS </td>
<td> 320 x 480 </td>
<td> 320 x 480</td>
<td style="text-align:center;"> 1 </td>
</tr>
<tr>
<td> 4,4S </td>
<td> 320 x 480 </td>
<td> 640 x 960 </td>
<td style="text-align:center;"> 2 </td>
</tr>
<tr>
<td> 5,5C,5S,SE </td>
<td> 320 x 568 </td>
<td> 640 x 1136 </td>
<td style="text-align:center;"> 2 </td>
</tr>
<tr>
<td> 6,6S,7,8,SE2</td>
<td> 375 x 667 </td>
<td> 750 x 1334 </td>
<td style="text-align:center;"> 2 </td>
</tr>
<tr>
<td> 6+,6S+,7+,8+ </td>
<td> 414 x 736 </td>
<td> 1080 x 1920 </td>
<td style="text-align:center;"> 3 </td>
</tr>
<tr>
<td> 11Pro,X,Xs </td>
<td> 375 x 812 </td>
<td> 1125 x 2436 </td>
<td style="text-align:center;"> 3 </td>
</tr>
<tr>
<td> 11, Xr </td>
<td> 414 x 896 </td>
<td> 828 x 1792 </td>
<td style="text-align:center;"> 2 </td>
</tr>
<tr>
<td> 11Pro Max,Xs Max </td>
<td> 414 x 896 </td>
<td> 1242 x 2688 </td>
<td style="text-align:center;"> 3 </td>
</tr>
</tbody>
</table>


<p>对于 iOS 来说，现在的主流设备应该是从 <code>6,6S,7,8,SE2</code> 开始，对应的设备像素是<code>750 x 1334 px</code>。</p>

<p>再来看下 android 这边， Google 有一个 <a href="https://developer.android.com/about/dashboards/index.html#Screens">Screen sizes and densities</a> 统计表，本文写作时查询的结果如下:</p>

<table>
<thead>
<tr>
<th> </th>
<th> ldpi </th>
<th> mdpi </th>
<th> tvdpi </th>
<th> hdpi </th>
<th> xhdpi </th>
<th> xxhdpi </th>
<th> Total </th>
</tr>
</thead>
<tbody>
<tr>
<td> Small </td>
<td> 0.1% </td>
<td>  </td>
<td>  </td>
<td> </td>
<td> 0.1% </td>
<td>  </td>
<td> 0.2% </td>
</tr>
<tr>
<td> Normal </td>
<td>  </td>
<td> 0.3% </td>
<td> 0.3% </td>
<td> 14.8% </td>
<td> 41.3% </td>
<td> 26.1% </td>
<td> 82.8% </td>
</tr>
<tr>
<td> Large </td>
<td>  </td>
<td> 1.7% </td>
<td> 2.2% </td>
<td> 0.8% </td>
<td> 3.2% </td>
<td> 2.0% </td>
<td> 9.9%  </td>
</tr>
<tr>
<td> Xlarge </td>
<td>  </td>
<td> 4.2% </td>
<td> 0.2% </td>
<td> 2.3% </td>
<td> 0.4% </td>
<td>  </td>
<td> 7.1% </td>
</tr>
<tr>
<td> Total </td>
<td> 0.1% </td>
<td> 6.2% </td>
<td> 2.7% </td>
<td>  17.9% </td>
<td> 45.0% </td>
<td> 28.1% </td>
<td>  </td>
</tr>
</tbody>
</table>


<p><a href="https://developer.android.google.cn/guide/topics/resources/providing-resources#ScreenSizeQualifier">Small,Normal,Large 和 Xlarge</a> 是屏幕的尺寸分类，具体含义如下:</p>

<blockquote><ul>
<li><p>small: Screens that are of similar size to a low-density QVGA screen. The minimum layout size for a small screen is approximately 320x426 dp units. Examples are QVGA low-density and VGA high density.</p></li>
<li><p>normal: Screens that are of similar size to a medium-density HVGA screen. The minimum layout size for a normal screen is approximately 320x470 dp units. Examples of such screens a WQVGA low-density, HVGA medium-density, WVGA high-density.</p></li>
<li><p>large: Screens that are of similar size to a medium-density VGA screen. The minimum layout size for a large screen is approximately 480x640 dp units. Examples are VGA and WVGA medium-density screens.</p></li>
<li><p>xlarge: Screens that are considerably larger than the traditional medium-density HVGA screen. The minimum layout size for an xlarge screen is approximately 720x960 dp units. In most cases, devices with extra-large screens would be too large to carry in a pocket and would most likely be tablet-style devices. Added in API level 9.</p></li>
</ul>
</blockquote>

<p>从上表的数据可知，目前 android 设备的主流尺寸分布是从 normal-hdpi 这个分类开始，根据 google 对 normal 的解释，它的大小相当于 medium-density HVGA 屏幕上的 <code>320x470 dp</code>，换算成设备像素就是 <code>480x705 px</code>，注意如果我们以这个尺寸去设计的话，那么得到的切图就是对应 hdpi(1.5)，要输出xhdpi(2) 的切图则要放大 1.3333 倍，这就有点不方便了，很容易得到奇数的像素尺寸，所以我们将 <code>480x705 px</code> 换算到 xhdpi(2) 的设备像素，得到 <code>640x940 px</code>。</p>

<p>我们知道宽屏比窄屏能显示更多内容，如果我们以宽屏为其准尺寸设计，那么在窄屏上就可能出现控件放不下、文字截断的情况。反过来，如果我们以窄屏为基准设计，那么在宽屏上布局时会容易处理，控件的宽度增加或者间隔增加就可以了。高度和宽度存在同样的问题，所以也应该选高度小的作为基准。设计时扣除固定元素高度之和后分配给可滚动区域，这样方便界面的元素布局能够动态响应，开发更好做屏幕适配。</p>

<p>所以选择基准尺寸和我们想支持的设备紧密相关，这需要基于多方面的因素考虑。 例如，如果我们希望支持尽可能多的设备，就越有可能获取更多用户，但开发的兼容工作量就相应增加，很多新特性就可能不适合作为应用的主要功能，而只适合作为增强功能。通常可以考虑覆盖 90% 以上，团队资金和人员比较充足的话可以考虑覆盖 95%，98% 甚至更多。</p>

<p>以覆盖 90% 以上为例，如果我们同时支持 iOS 和 android，或只支持 android 时，应该选 <code>640x940 px</code>作为基准尺寸，而如果只支持 iOS ， 我们应该选 <code>750 x 1334 px</code> 作为基准尺寸。</p>

<p>iOS 的设备像素比主要分布在2和3，而 android 这边设备像素比主要分布在 1.5(hdpi), 2(xhdpi)和 3(xxhdpi)，所以 iOS 需要输出<code>@2x</code> 和 <code>@3x</code> 两套切图； android 需要输出 hdpi, xhdpi 和 xxhdpi 三套切图。</p>

<h2>总结</h2>

<p>现在我们知道，设计基准尺寸的选择以及切图的输出是和我们想支持的设备紧密相关，写作本文时：</p>

<h3>基准尺寸</h3>

<ul>
<li>仅支持 iOS ， 应该选 <code>750 x 1334 px</code> 作为基准尺寸，对应的设备像素比是2</li>
<li>仅支持 android 时，应该选 <code>640x940 px</code> 作为基准尺寸，对应的设备像素比是2</li>
<li>支持 iOS 和 android，应该选 <code>640x940 px</code> 作为基准尺寸，对应的设备像素比是2</li>
</ul>


<h3>切图</h3>

<ul>
<li>支持 iOS 需要输出<code>@2x</code> 和 <code>@3x</code> 两套切图</li>
<li>支持 android 需要输出 hdpi, xhdpi 和 xxhdpi 三套切图</li>
</ul>


<p>基准尺寸对应的切图是 <code>@2x</code> 和 xhdpi，输出 hdpi(1.5) 则是切图缩小 0.75, <code>@3x</code> 和 xxhdpi(3) 则是切图放大 1.5 。</p>

<p>我们需要需要注意，随着设备的更新换代，我们的基准尺寸和切图会发生变化，就像以前我们可能需要为 android 提供 mdpi 的切图。</p>

<p>另外想说一下，设计师在设计之初就要把屏幕适配这事放在心上，将界面的元素看成水流一样，尽量让它们能自由流动，这样开发者就能更好地也更容易地做屏幕适配。Apple 在屏幕适配这块提出了 auto layout 的解决方案，这是一个设计师视角的解决方案，也是我们日常的生活中的视角，用界面元素的之间的约束来表达布局，推荐设计师用约束这种方式去做设计并最终输出。可以看到 google 实际上也很认可 auto layout 用约束来布局的想法，在新版本的 android 开发中默认的根布局容器就是 ConstraintLayout，它就是用约束来表达布局。最后我们再看 web 开发布局这边，css 布局的核心就是流，为支持屏幕适配，目前的主流方案是响应式布局，而这种布局的核心我认为仍然是约束。可以看到在屏幕适配这块，各平台最终的想法其实是一样的。</p>

<h1>Reference</h1>

<ul>
<li><a href="https://hacks.mozilla.org/2013/09/css-length-explained/">CSS Length Explained</a></li>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/ios/icons-and-images/image-size-and-resolution/">Image Size and Resolution</a></li>
<li><a href="https://developer.android.google.cn/training/multiscreen/screendensities">Support different pixel densities</a></li>
<li><a href="https://developer.android.google.cn/guide/topics/resources/providing-resources#ScreenSizeQualifier">ScreenSizeQualifier</a></li>
<li><a href="https://developer.android.google.cn/training/multiscreen/screensizes">Support different screen sizes</a></li>
<li><a href="https://developer.android.com/about/dashboards/index.html#Screens">Screen sizes and densities</a></li>
<li><a href="https://www.paintcodeapp.com/news/ultimate-guide-to-iphone-resolutions">The Ultimate Guide To iPhone Resolutions</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL 使用笔记(三)]]></title>
    <link href="http://DamianSheldon.github.io/blog/mysql-usage-notes-part-2.html"/>
    <updated>2020-12-18T08:46:08+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/mysql-usage-notes-part-2</id>
    <content type="html"><![CDATA[<h3>1.How do I see all foreign keys to a table or column?</h3>

<p>A:For a Table:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SELECT 
</span><span class='line'>  TABLE_NAME,COLUMN_NAME,CONSTRAINT_NAME, REFERENCED_TABLE_NAME,REFERENCED_COLUMN_NAME
</span><span class='line'>FROM
</span><span class='line'>  INFORMATION_SCHEMA.KEY_COLUMN_USAGE
</span><span class='line'>WHERE
</span><span class='line'>  REFERENCED_TABLE_SCHEMA = '&lt;database>' AND
</span><span class='line'>  REFERENCED_TABLE_NAME = '&lt;table>';</span></code></pre></td></tr></table></div></figure>


<p>For a Column:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SELECT 
</span><span class='line'>  TABLE_NAME,COLUMN_NAME,CONSTRAINT_NAME, REFERENCED_TABLE_NAME,REFERENCED_COLUMN_NAME
</span><span class='line'>FROM
</span><span class='line'>  INFORMATION_SCHEMA.KEY_COLUMN_USAGE
</span><span class='line'>WHERE
</span><span class='line'>  REFERENCED_TABLE_SCHEMA = '&lt;database>' AND
</span><span class='line'>  REFERENCED_TABLE_NAME = '&lt;table>' AND
</span><span class='line'>  REFERENCED_COLUMN_NAME = '&lt;column>';</span></code></pre></td></tr></table></div></figure>


<p>Reference:</p>

<p><a href="https://stackoverflow.com/questions/201621/how-do-i-see-all-foreign-keys-to-a-table-or-column">How do I see all foreign keys to a table or column?</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何发布自己的 artifacts 到 maven 中央仓库]]></title>
    <link href="http://DamianSheldon.github.io/blog/how-to-publish-your-artifacts-to-maven-central.html"/>
    <updated>2020-10-28T09:16:37+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/how-to-publish-your-artifacts-to-maven-central</id>
    <content type="html"><![CDATA[<p>当我们越来越熟悉 Java 开发，可能也想发布自己的 artifacts 到 maven 中央仓库，那么该如何做呢？</p>

<blockquote><p>The easiest way to upload another project is to use the <a href="http://central.sonatype.org/pages/ossrh-guide.html">Open Source Software Repository Hosting (OSSRH)</a>, which is an approved repository provided by Sonatype for any OSS Project that want to get their artifacts into the Central Repository.</p></blockquote>

<p>从 maven 的官方文档可知是使用 <a href="http://central.sonatype.org/pages/ossrh-guide.html">Open Source Software Repository Hosting (OSSRH)</a>, 于是我们可以参考她的指南。</p>

<p>这份指南勾勒了发布工作的主要流程，分别是：</p>

<ol>
<li>Create a ticket with Sonatype</li>
<li>Review Requirements</li>
<li>Deployment</li>
<li>Releasing to Central</li>
</ol>


<h3>创建 Sonatype 工单</h3>

<p>Sonatype 使用 JIRA 管理请求，所以我们要创建 JIRA 帐号, 然后创建一个新工程工单。</p>

<ol>
<li><a href="https://issues.sonatype.org/secure/Signup!default.jspa">Create your JIRA account</a></li>
<li><a href="https://issues.sonatype.org/secure/CreateIssue.jspa?issuetype=21&amp;pid=10134">Create a New Project ticket</a></li>
</ol>


<h3>复核要求</h3>

<p>为了确保中央仓库库中可用组件的最低质量水平，部署组件必须满足一些要求。这使组件的用户能够从中央仓库中提供的元数据中找到有关组件的所有相关细节。</p>

<p>这些要求是：</p>

<ol>
<li>Supply Javadoc and Sources</li>
<li>Sign Files with GPG/PGP</li>
<li>Sufficient Metadata</li>
</ol>


<!--more-->


<h4>Supply Javadoc and Sources</h4>

<p>我们可以集成 maven 插件来提供 Javadoc 和源文件。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;plugin>
</span><span class='line'>  &lt;groupId>org.apache.maven.plugins&lt;/groupId>
</span><span class='line'>  &lt;artifactId>maven-source-plugin&lt;/artifactId>
</span><span class='line'>  &lt;version>2.2.1&lt;/version>
</span><span class='line'>  &lt;executions>
</span><span class='line'>      &lt;execution>
</span><span class='line'>          &lt;id>attach-sources&lt;/id>
</span><span class='line'>          &lt;goals>
</span><span class='line'>              &lt;goal>jar-no-fork&lt;/goal>
</span><span class='line'>          &lt;/goals>
</span><span class='line'>      &lt;/execution>
</span><span class='line'>  &lt;/executions>
</span><span class='line'>&lt;/plugin>
</span><span class='line'>&lt;plugin>
</span><span class='line'>  &lt;groupId>org.apache.maven.plugins&lt;/groupId>
</span><span class='line'>  &lt;artifactId>maven-javadoc-plugin&lt;/artifactId>
</span><span class='line'>  &lt;version>2.9.1&lt;/version>
</span><span class='line'>  &lt;executions>
</span><span class='line'>      &lt;execution>
</span><span class='line'>          &lt;id>attach-javadocs&lt;/id>
</span><span class='line'>          &lt;goals>
</span><span class='line'>              &lt;goal>jar&lt;/goal>
</span><span class='line'>          &lt;/goals>
</span><span class='line'>      &lt;/execution>
</span><span class='line'>  &lt;/executions>
</span><span class='line'>&lt;/plugin></span></code></pre></td></tr></table></div></figure>


<h4>Sign Files with GPG/PGP</h4>

<p>我们需要用 GPG/PGP 对文件签名，以 macOS 为例：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#1. Install GPG
</span><span class='line'>brew install gpg
</span><span class='line'>
</span><span class='line'>#2. Generate the key pair
</span><span class='line'>gpg --full-gen-key
</span><span class='line'>
</span><span class='line'>###3.Publish the GPG key pair and distribute your key to GPG servers
</span><span class='line'>
</span><span class='line'>gpg --keyserver hkps.pool.sks-keyservers.net  --send-keys your_key_id</span></code></pre></td></tr></table></div></figure>


<p>生成 GPG 公私钥对并发布到 GPG 服务器后，我们还需要将 GPG 提供给 maven, 这是通过 maven settings。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># ~/.m2/settings.xml
</span><span class='line'>&lt;settings>
</span><span class='line'>  &lt;profiles>
</span><span class='line'>    &lt;profile>
</span><span class='line'>      &lt;id>ossrh&lt;/id>
</span><span class='line'>      &lt;activation>
</span><span class='line'>        &lt;activeByDefault>true&lt;/activeByDefault>
</span><span class='line'>      &lt;/activation>
</span><span class='line'>      &lt;properties>
</span><span class='line'>        &lt;gpg.passphrase>the_pass_phrase&lt;/gpg.passphrase>
</span><span class='line'>      &lt;/properties>
</span><span class='line'>    &lt;/profile>
</span><span class='line'>  &lt;/profiles>
</span><span class='line'>&lt;/settings></span></code></pre></td></tr></table></div></figure>


<p>macOS 上我还遇到了 gpg: signing failed: Inappropriate ioctl for device 这个错误，通过在 <code>~/.bash_profile</code> 中加入如下配置解决了:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>GPG_TTY=$(tty)
</span><span class='line'>export GPG_TTY</span></code></pre></td></tr></table></div></figure>


<h4>Sufficient Metadata</h4>

<p>元数据信息要包括：</p>

<ul>
<li>Correct Coordinates</li>
<li>Project Name, Description and URL</li>
<li>License Information</li>
<li>Developer Information</li>
<li>SCM Information</li>
</ul>


<p>对于 Correct Coordinates， 我这里是使用 github 托管代码，于是我们可以按照 maven 官方文档的建议:</p>

<blockquote><p>My project is hosted at a project hosting service like SourceForge or Github, what should I use as groupId?
If your project name is foo at SourceForge, you can use net.sf.foo. If your username is bar on Github, you can use com.github.bar. You can also use another reversed domain name you control. The group ID does not have to reflect the project host.</p></blockquote>

<h3>Deployment</h3>

<p>至此，准备工作就完成了，接下来可以进入部署环节了。先还是要做些相关配置，主要是：</p>

<ul>
<li>Distribution Management and Authentication</li>
<li>Using a Profile</li>
</ul>


<h4>Distribution Management and Authentication</h4>

<p>为了配置 Maven，使其能够通过 Nexus Staging Maven 插件部署到 OSSRH 的 Nexus Repository Manager上，你必须进行如下配置：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;distributionManagement>
</span><span class='line'>  &lt;snapshotRepository>
</span><span class='line'>    &lt;id>ossrh&lt;/id>
</span><span class='line'>    &lt;url>https://oss.sonatype.org/content/repositories/snapshots&lt;/url>
</span><span class='line'>  &lt;/snapshotRepository>
</span><span class='line'>&lt;/distributionManagement>
</span><span class='line'>&lt;build>
</span><span class='line'>  &lt;plugins>
</span><span class='line'>    &lt;plugin>
</span><span class='line'>      &lt;groupId>org.sonatype.plugins&lt;/groupId>
</span><span class='line'>      &lt;artifactId>nexus-staging-maven-plugin&lt;/artifactId>
</span><span class='line'>      &lt;version>1.6.7&lt;/version>
</span><span class='line'>      &lt;extensions>true&lt;/extensions>
</span><span class='line'>      &lt;configuration>
</span><span class='line'>        &lt;serverId>ossrh&lt;/serverId>
</span><span class='line'>        &lt;nexusUrl>https://oss.sonatype.org/&lt;/nexusUrl>
</span><span class='line'>        &lt;autoReleaseAfterClose>true&lt;/autoReleaseAfterClose>
</span><span class='line'>      &lt;/configuration>
</span><span class='line'>    &lt;/plugin>
</span><span class='line'>    ...
</span><span class='line'>  &lt;/plugins>
</span><span class='line'>&lt;/build></span></code></pre></td></tr></table></div></figure>


<p>另外，如果你使用 Maven 部署插件，这是默认行为，你需要添加一个完整的distributionManagement部分。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;distributionManagement>
</span><span class='line'>  &lt;snapshotRepository>
</span><span class='line'>    &lt;id>ossrh&lt;/id>
</span><span class='line'>    &lt;url>https://oss.sonatype.org/content/repositories/snapshots&lt;/url>
</span><span class='line'>  &lt;/snapshotRepository>
</span><span class='line'>  &lt;repository>
</span><span class='line'>    &lt;id>ossrh&lt;/id>
</span><span class='line'>    &lt;url>https://oss.sonatype.org/service/local/staging/deploy/maven2/&lt;/url>
</span><span class='line'>  &lt;/repository>
</span><span class='line'>&lt;/distributionManagement></span></code></pre></td></tr></table></div></figure>


<p>上述配置将从你的Maven settings.xml文件中获取用户账户的详细信息来部署到OSSRH。认证的最小设置是：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;settings>
</span><span class='line'>  &lt;servers>
</span><span class='line'>    &lt;server>
</span><span class='line'>      &lt;id>ossrh&lt;/id>
</span><span class='line'>      &lt;username>your-jira-id&lt;/username>
</span><span class='line'>      &lt;password>&lt;![CDATA[your-jira-pwd]]&gt;&lt;/password>
</span><span class='line'>    &lt;/server>
</span><span class='line'>  &lt;/servers>
</span><span class='line'>&lt;/settings></span></code></pre></td></tr></table></div></figure>


<h4>Using a Profile</h4>

<p>由于生成javadoc和源代码jars以及使用GPG签署组件是一个相当耗时的过程，这些执行通常从正常的构建配置中分离出来，并转移到一个配置文件中。然后，当通过激活配置文件进行部署时，该配置文件又会被使用。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;profiles>
</span><span class='line'>  &lt;profile> 
</span><span class='line'>    &lt;id>release&lt;/id>
</span><span class='line'>    &lt;build>
</span><span class='line'>      ...
</span><span class='line'>      javadoc, source and gpg plugin from above
</span><span class='line'>      ...
</span><span class='line'>    &lt;/build>
</span><span class='line'>  &lt;/profile>
</span><span class='line'>&lt;/profiles></span></code></pre></td></tr></table></div></figure>


<p>这些配置做完之后，最终得到的 pom.xml 类似如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
</span><span class='line'>  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
</span><span class='line'>  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
</span><span class='line'>  &lt;modelVersion>4.0.0&lt;/modelVersion>
</span><span class='line'>  &lt;groupId>com.github.damiansheldon&lt;/groupId>
</span><span class='line'>  &lt;artifactId>treasure&lt;/artifactId>
</span><span class='line'>  &lt;version>0.0.2&lt;/version>
</span><span class='line'>  &lt;build>
</span><span class='line'>      &lt;sourceDirectory>src&lt;/sourceDirectory>
</span><span class='line'>      &lt;plugins>
</span><span class='line'>          &lt;plugin>
</span><span class='line'>              &lt;artifactId>maven-compiler-plugin&lt;/artifactId>
</span><span class='line'>              &lt;version>3.8.1&lt;/version>
</span><span class='line'>              &lt;configuration>
</span><span class='line'>                  &lt;source>1.8&lt;/source>
</span><span class='line'>                  &lt;target>1.8&lt;/target>
</span><span class='line'>              &lt;/configuration>
</span><span class='line'>          &lt;/plugin>
</span><span class='line'>          &lt;plugin>
</span><span class='line'>              &lt;groupId>org.apache.maven.plugins&lt;/groupId>
</span><span class='line'>              &lt;artifactId>maven-deploy-plugin&lt;/artifactId>
</span><span class='line'>              &lt;version>2.8.2&lt;/version>
</span><span class='line'>          &lt;/plugin>
</span><span class='line'>          &lt;plugin>
</span><span class='line'>              &lt;groupId>org.apache.maven.plugins&lt;/groupId>
</span><span class='line'>              &lt;artifactId>maven-release-plugin&lt;/artifactId>
</span><span class='line'>              &lt;version>2.5.3&lt;/version>
</span><span class='line'>              &lt;configuration>
</span><span class='line'>                  &lt;arguments>-Dgpg.passphrase=${gpg.passphrase}&lt;/arguments>
</span><span class='line'>                  &lt;autoVersionSubmodules>true&lt;/autoVersionSubmodules>
</span><span class='line'>                  &lt;useReleaseProfile>false&lt;/useReleaseProfile>
</span><span class='line'>                  &lt;releaseProfiles>release&lt;/releaseProfiles>
</span><span class='line'>                  &lt;goals>deploy&lt;/goals>
</span><span class='line'>              &lt;/configuration>
</span><span class='line'>          &lt;/plugin>
</span><span class='line'>          &lt;plugin>
</span><span class='line'>              &lt;groupId>org.sonatype.plugins&lt;/groupId>
</span><span class='line'>              &lt;artifactId>nexus-staging-maven-plugin&lt;/artifactId>
</span><span class='line'>              &lt;version>1.6.7&lt;/version>
</span><span class='line'>              &lt;extensions>true&lt;/extensions>
</span><span class='line'>              &lt;configuration>
</span><span class='line'>                  &lt;serverId>ossrh&lt;/serverId>
</span><span class='line'>                  &lt;nexusUrl>https://oss.sonatype.org/&lt;/nexusUrl>
</span><span class='line'>                  &lt;autoReleaseAfterClose>true&lt;/autoReleaseAfterClose>
</span><span class='line'>              &lt;/configuration>
</span><span class='line'>          &lt;/plugin>
</span><span class='line'>      &lt;/plugins>
</span><span class='line'>  &lt;/build>
</span><span class='line'>  &lt;dependencies>
</span><span class='line'>      &lt;dependency>
</span><span class='line'>          &lt;groupId>org.springframework&lt;/groupId>
</span><span class='line'>          &lt;artifactId>spring-jdbc&lt;/artifactId>
</span><span class='line'>          &lt;version>5.2.8.RELEASE&lt;/version>
</span><span class='line'>      &lt;/dependency>
</span><span class='line'>  &lt;/dependencies>
</span><span class='line'>  &lt;distributionManagement>
</span><span class='line'>      &lt;repository>
</span><span class='line'>          &lt;id>ossrh&lt;/id>
</span><span class='line'>          &lt;name>OSSRH Staging Repository&lt;/name>
</span><span class='line'>          &lt;url>https://oss.sonatype.org/service/local/staging/deploy/maven2&lt;/url>
</span><span class='line'>      &lt;/repository>
</span><span class='line'>      &lt;snapshotRepository>
</span><span class='line'>          &lt;id>ossrh&lt;/id>
</span><span class='line'>          &lt;name>OSSRH Snapshots&lt;/name>
</span><span class='line'>          &lt;url>https://oss.sonatype.org/content/repositories/snapshots&lt;/url>
</span><span class='line'>      &lt;/snapshotRepository>
</span><span class='line'>  &lt;/distributionManagement>
</span><span class='line'>  &lt;scm>
</span><span class='line'>      &lt;connection>scm:git:https://github.com/DamianSheldon/Treasure.git&lt;/connection>
</span><span class='line'>      &lt;developerConnection>scm:git:https://github.com/DamianSheldon/Treasure.git&lt;/developerConnection>
</span><span class='line'>      &lt;tag>HEAD&lt;/tag>
</span><span class='line'>      &lt;url>https://github.com/DamianSheldon/Treasure&lt;/url>
</span><span class='line'>  &lt;/scm>
</span><span class='line'>  &lt;profiles>
</span><span class='line'>      &lt;profile>
</span><span class='line'>          &lt;id>release&lt;/id>
</span><span class='line'>          &lt;build>
</span><span class='line'>              &lt;plugins>
</span><span class='line'>                  &lt;plugin>
</span><span class='line'>                      &lt;groupId>org.apache.maven.plugins&lt;/groupId>
</span><span class='line'>                      &lt;artifactId>maven-source-plugin&lt;/artifactId>
</span><span class='line'>                      &lt;version>2.2.1&lt;/version>
</span><span class='line'>                      &lt;executions>
</span><span class='line'>                          &lt;execution>
</span><span class='line'>                              &lt;id>attach-sources&lt;/id>
</span><span class='line'>                              &lt;goals>
</span><span class='line'>                                  &lt;goal>jar-no-fork&lt;/goal>
</span><span class='line'>                              &lt;/goals>
</span><span class='line'>                          &lt;/execution>
</span><span class='line'>                      &lt;/executions>
</span><span class='line'>                  &lt;/plugin>
</span><span class='line'>                  &lt;plugin>
</span><span class='line'>                      &lt;groupId>org.apache.maven.plugins&lt;/groupId>
</span><span class='line'>                      &lt;artifactId>maven-javadoc-plugin&lt;/artifactId>
</span><span class='line'>                      &lt;version>2.9.1&lt;/version>
</span><span class='line'>                      &lt;executions>
</span><span class='line'>                          &lt;execution>
</span><span class='line'>                              &lt;id>attach-javadocs&lt;/id>
</span><span class='line'>                              &lt;goals>
</span><span class='line'>                                  &lt;goal>jar&lt;/goal>
</span><span class='line'>                              &lt;/goals>
</span><span class='line'>                          &lt;/execution>
</span><span class='line'>                      &lt;/executions>
</span><span class='line'>                  &lt;/plugin>
</span><span class='line'>                  &lt;plugin>
</span><span class='line'>                      &lt;groupId>org.apache.maven.plugins&lt;/groupId>
</span><span class='line'>                      &lt;artifactId>maven-gpg-plugin&lt;/artifactId>
</span><span class='line'>                      &lt;version>1.5&lt;/version>
</span><span class='line'>                      &lt;executions>
</span><span class='line'>                          &lt;execution>
</span><span class='line'>                              &lt;id>sign-artifacts&lt;/id>
</span><span class='line'>                              &lt;phase>verify&lt;/phase>
</span><span class='line'>                              &lt;goals>
</span><span class='line'>                                  &lt;goal>sign&lt;/goal>
</span><span class='line'>                              &lt;/goals>
</span><span class='line'>                          &lt;/execution>
</span><span class='line'>                      &lt;/executions>
</span><span class='line'>                  &lt;/plugin>
</span><span class='line'>              &lt;/plugins>
</span><span class='line'>          &lt;/build>
</span><span class='line'>      &lt;/profile>
</span><span class='line'>  &lt;/profiles>
</span><span class='line'>
</span><span class='line'>  &lt;!-- More Project Information -->
</span><span class='line'>  &lt;name>Treasure&lt;/name>
</span><span class='line'>  &lt;description>The treasures I have accumulated in my daily java development. It can help other people face the same problem.&lt;/description>
</span><span class='line'>  &lt;url>https://github.com/DamianSheldon/Treasure&lt;/url>
</span><span class='line'>  &lt;licenses>
</span><span class='line'>      &lt;license>
</span><span class='line'>          &lt;name>MIT License&lt;/name>
</span><span class='line'>          &lt;url>http://www.opensource.org/licenses/mit-license.php&lt;/url>
</span><span class='line'>          &lt;distribution>repo&lt;/distribution>
</span><span class='line'>      &lt;/license>
</span><span class='line'>  &lt;/licenses>
</span><span class='line'>  &lt;developers>
</span><span class='line'>      &lt;developer>
</span><span class='line'>          &lt;id>meiliang&lt;/id>
</span><span class='line'>          &lt;name>Meiliang Dong&lt;/name>
</span><span class='line'>          &lt;email>dongmeilianghy@sina.com&lt;/email>
</span><span class='line'>          &lt;url>http://damiansheldon.github.io&lt;/url>
</span><span class='line'>          &lt;roles>
</span><span class='line'>              &lt;role>architect&lt;/role>
</span><span class='line'>              &lt;role>developer&lt;/role>
</span><span class='line'>          &lt;/roles>
</span><span class='line'>          &lt;timezone>Asia/Shanghai&lt;/timezone>
</span><span class='line'>      &lt;/developer>
</span><span class='line'>  &lt;/developers>
</span><span class='line'>&lt;/project></span></code></pre></td></tr></table></div></figure>


<p>做好相关配置之后就可以真正部署了，主要有两种部署方式：</p>

<ul>
<li>Nexus Staging Maven Plugin for Deployment and Release</li>
<li>Performing a Release Deployment with the Maven Release Plugin</li>
</ul>


<p>推荐的方式是使用 Nexus Staging Maven Plugin。</p>

<h4>Nexus Staging Maven Plugin for Deployment and Release</h4>

<p>Performing a Snapshot Deployment</p>

<p>当你的版本以<code>-SNAPSHOT</code>结尾时，会进行快照部署。当执行快照部署时，您不需要满足要求，只需在工程上运行 <code>mvn clean deploy</code></p>

<p>SNAPSHOT版本不同步到中央版本库。如果您希望您的用户使用您的 SNAPSHOT 版本，他们需要将快照库添加到他们的 Nexus Repository Manager、settings.xml 或 pom.xml 中。成功部署的SNAPSHOT版本可以在<code>https://oss.sonatype.org/content/repositories/snapshots/</code>找到。</p>

<p>Performing a Release Deployment</p>

<p>为了执行发布部署，你必须在所有的POM文件中编辑你的版本，以使用发布版本。这意味着它们不能以<code>-SNAPSHOT</code>结尾，此外插件和依赖性声明也不能使用快照版本。这保证了你只能依赖其他发布的组件。理想情况下，它们都在中央仓库中可用。这确保了你的用户可以从中央仓库中检索你的组件以及你的过渡性依赖。</p>

<p>在多模块设置中，可以手动或借助Maven版本插件来更改项目的版本和父级引用。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mvn versions:set -DnewVersion=1.2.3</span></code></pre></td></tr></table></div></figure>


<p>一旦你更新了所有的版本，并确保你的构建没有部署就通过了，你就可以使用发布配置文件进行部署，并使用</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mvn clean deploy -P release</span></code></pre></td></tr></table></div></figure>


<h4>Performing a Release Deployment with the Maven Release Plugin</h4>

<p>Maven发布插件可以用来自动完成对Maven POM文件的修改、健康检查、所需的SCM操作和实际部署执行。</p>

<p>Maven发布插件的配置应该包括禁用Maven super POM 中的发布配置文件，因为我们使用的是我们自己的配置文件，并在激活发布配置文件的同时指定部署目标。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;plugin>
</span><span class='line'>  &lt;groupId>org.apache.maven.plugins&lt;/groupId>
</span><span class='line'>  &lt;artifactId>maven-release-plugin&lt;/artifactId>
</span><span class='line'>  &lt;version>2.5.3&lt;/version>
</span><span class='line'>  &lt;configuration>
</span><span class='line'>    &lt;autoVersionSubmodules>true&lt;/autoVersionSubmodules>
</span><span class='line'>    &lt;useReleaseProfile>false&lt;/useReleaseProfile>
</span><span class='line'>    &lt;releaseProfiles>release&lt;/releaseProfiles>
</span><span class='line'>    &lt;goals>deploy&lt;/goals>
</span><span class='line'>  &lt;/configuration>
</span><span class='line'>&lt;/plugin></span></code></pre></td></tr></table></div></figure>


<p>在SCM连接配置正确的情况下，您可以通过以下方式向OSSRH进行发布部署。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mvn release:clean release:prepare</span></code></pre></td></tr></table></div></figure>


<p>回答版本和标签的提示，然后是</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mvn release:perform</span></code></pre></td></tr></table></div></figure>


<p>由于使用了Nexus Staging Maven Plugin，并将autoReleaseAfterClose设置为true，这个执行将一次性部署到OSSRH并发布到中央仓库。</p>

<h3>Releasing to Central</h3>

<p>在前面的介绍中，我们提到使用 Nexus Staging Maven Plugin，并将autoReleaseAfterClose设置为true，部署到OSSRH后会发布到中央仓库。我们也可以手动执行 <code>mvn nexus-staging:release
</code> 来发布 staging repository。</p>

<h3>Reference</h3>

<ul>
<li><a href="https://central.sonatype.org/pages/ossrh-guide.html">OSSRH Guide</a></li>
<li><a href="https://central.sonatype.org/pages/requirements.html">Requirements</a></li>
<li><a href="https://central.sonatype.org/pages/apache-maven.html#nexus-staging-maven-plugin-for-deployment-and-release">Deploying to OSSRH with Apache Maven</a></li>
<li><a href="https://dzone.com/articles/publish-your-artifacts-to-maven-central">How to Publish Your Artifacts to Maven Central</a></li>
<li><a href="https://stackoverflow.com/questions/57591432/gpg-signing-failed-inappropriate-ioctl-for-device-on-macos-with-maven">“gpg: signing failed: Inappropriate ioctl for device” on MacOS with Maven</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一种构建 JavaScript 库的方法]]></title>
    <link href="http://DamianSheldon.github.io/blog/an-approach-to-building-javascript-libraries.html"/>
    <updated>2020-09-23T15:08:06+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/an-approach-to-building-javascript-libraries</id>
    <content type="html"><![CDATA[<p>最近手头有个项目需要构建 JavaScript 库，核心需求是库既能用于传统的多页面，也能用于 Angular 的单页面。目前网络上暂时好像没有这类详细教程，反而是一些理论阐述的文章较多，经过一番研究后，我得到了一个适合自己的方法。</p>

<p>由于我希望库既能用于多页面，也能用于 Angular 单页面，所以需要支持 UMD 和 ES Harmony。由于 Angular 是使用 TypeScript 开发，最好还能提供用于 TypeScript 的声明文件。最原始的想法自然是手动按要求提供各种文件，但这样工作量比较大，也不容易扩展。那么还有什么容易的办法吗？有的，最核心的想法就是库的源码只写一份，然后用工具生成各种模块系统需要文件。具体的做法可能有差异，但理念是一样的。</p>

<p>从我的需求出发，我最终选择用 TypeScript 来写库的源码，基于脱敏的考虑，这里选择 TypeScript 文档中的示例代码来演示。</p>

<p>首先我们建立好库的源码目录结构并配置好源码管理：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>simple-module-example
</span><span class='line'>├── src
</span><span class='line'>│   ├── LettersOnlyValidator.ts
</span><span class='line'>│   ├── Validation.ts
</span><span class='line'>│   ├── ZipCodeValidator.ts
</span><span class='line'>│   └── index.ts</span></code></pre></td></tr></table></div></figure>


<p>然后使用 <code>npm init</code> 生成 <code>package.json</code> 文件：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "name": "simple-module-example",
</span><span class='line'>  "version": "1.0.0",
</span><span class='line'>  "description": "A simple module example.",
</span><span class='line'>  "main": "index.js",
</span><span class='line'>  "directories": {
</span><span class='line'>    "test": "test"
</span><span class='line'>  },
</span><span class='line'>  "scripts": {
</span><span class='line'>    "test": "echo \"Error: no test specified\" && exit 1"
</span><span class='line'>  },
</span><span class='line'>  "keywords": [
</span><span class='line'>    "module",
</span><span class='line'>    "example"
</span><span class='line'>  ],
</span><span class='line'>  "author": "Meiliang Dong",
</span><span class='line'>  "license": "MIT"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>其次是按需求编辑好 <code>package.json</code> 文件。这是关键步骤，<code>package.json</code> 的 main 字段通常用于指向 UMD 版本的库；module 字段则用于指向 ES 版本的库。我们还需要配置构建脚本生成对应版本的库，最终的 <code>package.json</code> 文件内容如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    "name": "simple-module-example",
</span><span class='line'>    "version": "1.0.0",
</span><span class='line'>    "description": "A simple module example.",
</span><span class='line'>    "main": "dist/umd/simple-module-example.js",
</span><span class='line'>    "module": "dist/esm/index.js",
</span><span class='line'>    "browser": "dist/umd/simple-module-example.js",
</span><span class='line'>    "types": "dist/types/index.d.ts",
</span><span class='line'>    "files": [
</span><span class='line'>        "dist"
</span><span class='line'>    ],
</span><span class='line'>    "directories": {
</span><span class='line'>        "test": "test"
</span><span class='line'>    },
</span><span class='line'>    "scripts": {
</span><span class='line'>        "clean": "rm -rf ./dist",
</span><span class='line'>        "build": "npm run clean && npm run build:es2015 && npm run build:esm && npm run build:cjs && npm run build:umd",
</span><span class='line'>        "build:es2015": "tsc --module es2015 --target es2015 --outDir dist/es2015",
</span><span class='line'>        "build:esm": "tsc --module es2015 --outDir dist/esm",
</span><span class='line'>        "build:umd": "rollup dist/esm/index.js --format umd --name SimpleModuleExample --sourcemap --file dist/umd/simple-module-example.js",
</span><span class='line'>        "build:umd:min": "cd dist/umd && uglifyjs --compress --mangle --source-map --screw-ie8 --comments --o simple-module-example.min.js -- simple-module-example.js && gzip simple-module-example.min.js -c > simple-module-example.min.js.gz"
</span><span class='line'>    },
</span><span class='line'>    "keywords": [
</span><span class='line'>        "module",
</span><span class='line'>        "example"
</span><span class='line'>    ],
</span><span class='line'>    "author": "Meiliang Dong",
</span><span class='line'>    "license": "MIT"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>然后是编写 TypeScript 的配置文件 <code>tsconfig.json</code>， 先使用命令 <code>npm install @tsconfig/recommended --save-dev</code> 安装推荐的配置，之后根据需求定制，最终的内容如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    "extends": "@tsconfig/recommended/tsconfig.json",
</span><span class='line'>    "compilerOptions": {
</span><span class='line'>      "outDir": "./dist",
</span><span class='line'>      "target": "es5",
</span><span class='line'>      "sourceMap": true,
</span><span class='line'>      "declaration": true,
</span><span class='line'>      "declarationDir": "./dist/types"
</span><span class='line'>    },
</span><span class='line'>    "include": ["./src/**/*"]
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<p>其次是测试，测试是库开发的重要环节，它能帮我们验证库是否正常工作，后续迭代重构也要依赖它。通常的做法是使用测试框架，像 Angular 是 <a href="https://karma-runner.github.io/">Karma test runner</a>  搭配<a href="https://jasmine.github.io/">Jasmine test framework</a> ， 我们可以参考选择。</p>

<p>我这里还玩了一下用 rollup 打包, 然后在浏览器里运行测试用例。首先在库工程目录外重新创建一个测试工程，然后使用 <code>npm link</code> 命令来安装我们的开发库，具体目录结构和文件内容如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$mkdir test-simple-module-example
</span><span class='line'>├── Test.ts
</span><span class='line'>├── dist
</span><span class='line'>│   ├── esm
</span><span class='line'>│   └── test-simple-module-example.js
</span><span class='line'>├── index.html
</span><span class='line'>├── package-lock.json
</span><span class='line'>├── package.json
</span><span class='line'>├── rollup.config.js
</span><span class='line'>└── tsconfig.json</span></code></pre></td></tr></table></div></figure>


<p><code>Test.ts</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import { StringValidator, ZipCodeValidator, LettersOnlyValidator } from "simple-module-example";
</span><span class='line'>
</span><span class='line'>// Some samples to try
</span><span class='line'>let strings = ["Hello", "98052", "101"];
</span><span class='line'>
</span><span class='line'>// Validators to use
</span><span class='line'>let validators: { [s: string]: StringValidator } = {};
</span><span class='line'>validators["ZIP code"] = new ZipCodeValidator();
</span><span class='line'>validators["Letters only"] = new LettersOnlyValidator();
</span><span class='line'>
</span><span class='line'>// Show whether each string passed each validator
</span><span class='line'>strings.forEach((s) => {
</span><span class='line'>  for (let name in validators) {
</span><span class='line'>    console.log(
</span><span class='line'>      `"${s}" - ${
</span><span class='line'>        validators[name].isAcceptable(s) ? "matches" : "does not match"
</span><span class='line'>      } ${name}`
</span><span class='line'>    );
</span><span class='line'>  }
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p><code>package.json</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    "name": "test-simple-module-example",
</span><span class='line'>    "version": "1.0.0",
</span><span class='line'>    "description": "A test application for simple module example.",
</span><span class='line'>    "main": ".dist/Test.js",
</span><span class='line'>    "scripts": {
</span><span class='line'>        "clean": "rm -rf ./dist",
</span><span class='line'>        "build": "npm run clean && npm run build:esm && npm run build:bundle",
</span><span class='line'>        "build:esm": "tsc --module es2015 --outDir dist/esm",
</span><span class='line'>        "build:bundle": "rollup -c",
</span><span class='line'>        "test": "echo \"Error: no test specified\" && exit 1"
</span><span class='line'>    },
</span><span class='line'>    "author": "Meiliang Dong",
</span><span class='line'>    "license": "MIT",
</span><span class='line'>    "dependencies": {
</span><span class='line'>        "@tsconfig/recommended": "^1.0.1"
</span><span class='line'>    },
</span><span class='line'>    "devDependencies": {
</span><span class='line'>        "@rollup/plugin-node-resolve": "^9.0.0"
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><code>rollup.config.js</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import resolve from '@rollup/plugin-node-resolve';
</span><span class='line'>
</span><span class='line'>export default {
</span><span class='line'>    input: 'dist/esm/Test.js',
</span><span class='line'>    output: {
</span><span class='line'>        file: 'dist/test-simple-module-example.js',
</span><span class='line'>        format: 'umd'
</span><span class='line'>    },
</span><span class='line'>    plugins: [resolve()]
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>


<p><code>tsconfig.json</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "extends": "@tsconfig/recommended/tsconfig.json",
</span><span class='line'>  "compilerOptions": {
</span><span class='line'>    "outDir": "./dist",
</span><span class='line'>    "target": "es5",
</span><span class='line'>    "sourceMap": true,
</span><span class='line'>    "moduleResolution": "Node"
</span><span class='line'>  },
</span><span class='line'>  "include": ["./*.ts"]
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>最后是根据需要选择发布方式，例如发布到 npm 公有仓库，具体做法参考官方文档就好了。</p>

<h3>Reference</h3>

<ul>
<li><a href="https://www.freecodecamp.org/news/anatomy-of-js-module-systems-and-building-libraries-fadcd8dbd0e/">Learn the basics of the JavaScript module system and build your own library</a></li>
<li><a href="https://gist.github.com/jayphelps/51bafb4505558736fdba0aaf8bfe69d3">TypeScript output es2015, esm (ES Modules), CJS, UMD, UMD + Min + Gzip.</a></li>
<li><a href="http://ifandelse.com/its-not-hard-making-your-library-support-amd-and-commonjs/">It&rsquo;s Not Hard: Making Your Library Support AMD and CommonJS</a></li>
<li><a href="https://addyosmani.com/writing-modular-js/">Writing Modular JavaScript With AMD, CommonJS &amp; ES Harmony</a></li>
<li><a href="https://yanhaijing.com/javascript/2018/08/17/2020-js-lib/">如何写一个现代的JavaScript库</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux 使用笔记(三)]]></title>
    <link href="http://DamianSheldon.github.io/blog/linux-useful-command-line-part-3.html"/>
    <updated>2020-09-02T11:40:17+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/linux-useful-command-line-part-3</id>
    <content type="html"><![CDATA[<h3>1.系统迁移和备份</h3>

<p>A:为了数据安全，我们需要对系统备份，换新电脑或者更换云服务时我们需要迁移系统。Linux 系统备份和迁移的方法很多，我这里打算使用 tar 。</p>

<h4>系统备份</h4>

<p>首先是根据自己的实际情况列出需要备份的目录，通常有：</p>

<ul>
<li><code>/etc/</code></li>
<li><code>/home/</code></li>
<li><code>/var/spool/mail/</code></li>
<li><code>/var/spool/cron/</code></li>
<li><code>/root</code></li>
<li><code>/usr/local/bin</code></li>
</ul>


<p>然后使用 tar 命令打包：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tar -jcv -f /backups/backup-system-20200902.tar.bz2 \
</span><span class='line'>&gt; --exclude=/root/*.bz2 --exclude=/root/*.gz --exclude=/home/loop* \
</span><span class='line'>&gt; /etc /home /var/spool/mail /var/spool/cron /root /usr/local/bin</span></code></pre></td></tr></table></div></figure>


<h4>系统恢复</h4>

<p>首先可以将备份解压到 <code>/tmp</code> 目录，之后使用 rsync 命令复制到对应目录便可恢复。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tar -jxv -f /backups/backup-system-20200902.tar.bz2 -C /tmp
</span><span class='line'>rsync -avuz /tmp/etc/ /etc
</span><span class='line'>rsync -avuz /tmp/home/ /home
</span><span class='line'>rsync -avuz /tmp/var/spool/mail/ /var/spool/mail
</span><span class='line'>rsync -avuz /tmp/var/spool/cron/ /var/spool/cron
</span><span class='line'>rsync -avuz /tmp/root/ /root
</span><span class='line'>rsync -avuz /tmp/usr/local/bin/ /usr/local/bin</span></code></pre></td></tr></table></div></figure>


<!--more-->


<h4><del>系统迁移</del></h4>

<p><del>换新电脑或者更换云服务时我们可能不想要上面那么麻烦，而可能想直接迁移系统，至少我是这么想的，这时我们可以使用下面的方法：</del></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 全系统备份
</span><span class='line'>tar --create --absolute-names --preserve-permissions --bzip2  --file=/media/sf_Windows10-shared-folder/virtual-box-centos-8.tar.bz2 --exclude=/dev --exclude=/media --exclude=/metainfo --exclude=/mnt --exclude=/proc --exclude=/run --exclude=/sys  --exclude=/tmp --exclude=/var --exclude=/@System.solv /
</span><span class='line'>
</span><span class='line'># 如有需要也可检查备份的文件
</span><span class='line'>tar -tjpPvf /media/sf_Windows10-shared-folder/virtual-box-centos-8.tar.bz2 | less
</span><span class='line'>
</span><span class='line'># 将备份包放到 /tmp 下解压
</span><span class='line'>tar -xjvf virtual-box-centos-8.tar.bz2</span></code></pre></td></tr></table></div></figure>


<p>Reference:</p>

<ul>
<li><a href="https://wiki.archlinux.org/index.php/migrate_installation_to_new_hardware">Migrate installation to new hardware</a></li>
<li><a href="https://www.digitalocean.com/community/tutorial_series/how-to-migrate-to-a-new-linux-server">How To Migrate to a New Linux Server</a></li>
</ul>


<h3>2.dnf list plugins command missing</h3>

<p>A:The information is provided for nearly all command with &ldquo;-v&rdquo; option. See:</p>

<p>Loaded plugins: builddep, changelog, config-manager, copr, debug, debuginfo-install, download, generate_completion_cache, needs-restarting, playground, product-id, repoclosure, repodiff, repograph, repomanage, reposync, subscription-manager, uploadprofile
Updating Subscription Management repositories.</p>

<p>Reference:</p>

<ul>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=1694041">dnf list plugins command missing</a></li>
</ul>


<h3>3.How to add startup application on CentOS 8?</h3>

<p>A:We can add by gnome tweaks. Of course you should install it with Software.</p>

<p>Reference:</p>

<ul>
<li><a href="https://linuxhint.com/tweaking_gnome_desktop_centos8/">Tweaking GNOME Desktop Environment on CentOS 8</a></li>
</ul>


<h3>4.开启 CentOS 8 上 tomcat 9 的注意事项</h3>

<p>A:首先是安装 <code>tomcat-native</code>；其次是注意从日志文件中定位错误。我遇到了证书文件权限导致找不到文件的情况。</p>

<h3>5.man: can&rsquo;t set the locale; make sure <code>$LC_*</code> and <code>$LANG</code> are correct</h3>

<p>A:问题是由于 ssh 终端的 locale 设置导致系统的 locale 设置出现问题，我关闭了 sshd_config 中 locale 相关的设置，使用系统的 locale 设置。</p>

<p>Reference:</p>

<ul>
<li><a href="https://wiki.archlinux.org/index.php/Locale#Make_locale_changes_immediate">Locale</a></li>
<li><a href="https://access.redhat.com/solutions/974273">How to change system locale on RHEL7?</a></li>
</ul>


<h3>6.在 CentOS 8 上使用 alternatives 设置默认的 java</h3>

<p>A: 在 CentOS 8 上安装 java 包之后不知为什么 alternatives 中的配置居然不对，导致提示 java command not found，于是只好手动配置：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 初始情况如下
</span><span class='line'>$ sudo alternatives  --list
</span><span class='line'>libnssckbi.so.x86_64      auto    /usr/lib64/pkcs11/p11-kit-trust.so
</span><span class='line'>python                    manual  /usr/bin/python3
</span><span class='line'>ifup                      auto    /usr/libexec/nm-ifup
</span><span class='line'>cifs-idmap-plugin         auto    /usr/lib64/cifs-utils/cifs_idmap_sss.so
</span><span class='line'>python3                   auto    /usr/bin/python3.6
</span><span class='line'>nmap                      auto    /usr/bin/ncat
</span><span class='line'>java                      manual  /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.262.b10-0.el8_2.x86_64/jre/bin/java
</span><span class='line'>jre_openjdk               auto    /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.262.b10-0.el8_2.x86_64/jre
</span><span class='line'>jre_1.8.0                 auto    /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.262.b10-0.el8_2.x86_64/jre
</span><span class='line'>jre_1.8.0_openjdk         auto    /usr/lib/jvm/jre-1.8.0-openjdk-1.8.0.262.b10-0.el8_2.x86_64
</span><span class='line'>links                     manual  /usr/bin/elinks
</span><span class='line'>javac                     auto    /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.265.b01-0.el8_2.x86_64/bin/javac
</span><span class='line'>java_sdk_openjdk          auto    /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.265.b01-0.el8_2.x86_64
</span><span class='line'>java_sdk_1.8.0            auto    /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.265.b01-0.el8_2.x86_64
</span><span class='line'>java_sdk_1.8.0_openjdk    auto    /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.265.b01-0.el8_2.x86_64
</span><span class='line'>
</span><span class='line'># 确认下正确设置的相关参数
</span><span class='line'>$ alternatives --display java_sdk_openjdk
</span><span class='line'>java_sdk_openjdk - status is auto.
</span><span class='line'> link currently points to /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.265.b01-0.el8_2.x86_64
</span><span class='line'>/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.265.b01-0.el8_2.x86_64 - family java-1.8.0-openjdk.x86_64 priority 1800265
</span><span class='line'>Current `best' version is /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.265.b01-0.el8_2.x86_64.
</span><span class='line'>
</span><span class='line'># 设置默认 java 相关功能的路径
</span><span class='line'>sudo alternatives --install /usr/bin/java java /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.265.b01-0.el8_2.x86_64/jre/bin/java 1800265 --family java-1.8.0-openjdk.x86_64
</span><span class='line'>
</span><span class='line'>sudo alternatives --install /usr/lib/jvm/jre_openjdk jre_openjdk /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.265.b01-0.el8_2.x86_64/jre 1800265 --family java-1.8.0-openjdk.x86_64
</span><span class='line'>
</span><span class='line'>sudo alternatives --install /usr/lib/jvm/jre_1.8.0 jre_1.8.0 /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.265.b01-0.el8_2.x86_64/jre 1800265 --family java-1.8.0-openjdk.x86_64
</span><span class='line'>
</span><span class='line'>sudo alternatives --install /usr/lib/jvm/jre_1.8.0_openjdk jre_1.8.0_openjdk /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.265.b01-0.el8_2.x86_64 1800265 --family java-1.8.0-openjdk.x86_64 
</span><span class='line'>
</span><span class='line'># 确认设置结果
</span><span class='line'>$ alternatives --list
</span><span class='line'>libnssckbi.so.x86_64      auto    /usr/lib64/pkcs11/p11-kit-trust.so
</span><span class='line'>python                    manual  /usr/bin/python3
</span><span class='line'>ifup                      auto    /usr/libexec/nm-ifup
</span><span class='line'>cifs-idmap-plugin         auto    /usr/lib64/cifs-utils/cifs_idmap_sss.so
</span><span class='line'>python3                   auto    /usr/bin/python3.6
</span><span class='line'>nmap                      auto    /usr/bin/ncat
</span><span class='line'>links                     manual  /usr/bin/elinks
</span><span class='line'>javac                     auto    /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.265.b01-0.el8_2.x86_64/bin/javac
</span><span class='line'>java_sdk_openjdk          auto    /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.265.b01-0.el8_2.x86_64
</span><span class='line'>java_sdk_1.8.0            auto    /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.265.b01-0.el8_2.x86_64
</span><span class='line'>java_sdk_1.8.0_openjdk    auto    /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.265.b01-0.el8_2.x86_64
</span><span class='line'>java                      auto    /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.265.b01-0.el8_2.x86_64/jre/bin/java
</span><span class='line'>jre_openjdk               auto    /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.265.b01-0.el8_2.x86_64/jre
</span><span class='line'>jre_1.8.0                 auto    /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.265.b01-0.el8_2.x86_64/jre
</span><span class='line'>jre_1.8.0_openjdk         auto    /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.265.b01-0.el8_2.x86_64</span></code></pre></td></tr></table></div></figure>


<p>另外我们还可以在 <code>/etc/profile.d</code> 目录下新建 <code>java.sh</code> 文件来设置 <code>JAVA_HOME</code> 和 <code>JRE_HOME</code>：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># /etc/profile.d/java.sh
</span><span class='line'>JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.265.b01-0.el8_2.x86_64"
</span><span class='line'>JRE_HOME="/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.265.b01-0.el8_2.x86_64/jre"</span></code></pre></td></tr></table></div></figure>


<p>Reference:</p>

<ul>
<li><a href="https://www.redhat.com/sysadmin/alternatives-command">Introduction to the alternatives command in Linux</a></li>
</ul>


<h3>7. chsh command not available on CentOS 8</h3>

<p>A:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ dnf provides '*/chsh'
</span><span class='line'>Last metadata expiration check: 8 days, 1:03:13 ago on Thu 01 Oct 2020 03:47:40 AM UTC.
</span><span class='line'>util-linux-user-2.32.1-22.el8.x86_64 : libuser based util-linux utilities
</span><span class='line'>Repo        : BaseOS
</span><span class='line'>Matched from:
</span><span class='line'>Filename    : /etc/pam.d/chsh
</span><span class='line'>Filename    : /usr/bin/chsh
</span><span class='line'>Filename    : /usr/share/bash-completion/completions/chsh
</span><span class='line'>
</span><span class='line'>$ rpm -q util-linux-user-2.32.1-22.el8.x86_64
</span><span class='line'>package util-linux-user-2.32.1-22.el8.x86_64 is not installed
</span><span class='line'>
</span><span class='line'>$ sudo dnf install util-linux-user-2.32.1-22.el8.x86_64</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="https://forums.centos.org/viewtopic.php?t=73864">CentOS 8.0.1905 - &lsquo;chsh&rsquo; : command not found</a></li>
</ul>


<h3>8. rsync 同步目录时产生了很多以 <code>~</code> 结尾的文件</h3>

<p>A:原因是加上了 b 选项，会对文件做备份</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rsync -avuzb treasure-workspace/dist/treasure/ treasure-lib-dist</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Reference:</p>

<ul>
<li><a href="https://unix.stackexchange.com/questions/76189/what-does-the-tilde-mean-at-the-end-of-a-filename">What does the tilde (~) mean at the end of a filename? </a></li>
<li><a href="https://unix.stackexchange.com/questions/132669/what-is-bitwise-c?noredirect=1&amp;lq=1">What is bitwise.c~? </a></li>
</ul>


<h3>9. systemd 服务停止后邮件通知管理员</h3>

<p>A: 我们可以利用 ExecStopPost 设置，以 mysql 为例，先准备好邮件发送程序，这里我们可以参考 <a href="https://wiki.archlinux.org/index.php/Systemd/Timers#MAILTO">Arch linux 的做法</a>：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/usr/local/bin/systemd-email
</span><span class='line'>#!/bin/sh
</span><span class='line'>
</span><span class='line'>/usr/bin/sendmail -t &lt;&lt;ERRMAIL
</span><span class='line'>To: $1
</span><span class='line'>From: systemd &lt;root@$HOSTNAME&gt;
</span><span class='line'>Subject: $2
</span><span class='line'>Content-Transfer-Encoding: 8bit
</span><span class='line'>Content-Type: text/plain; charset=UTF-8
</span><span class='line'>
</span><span class='line'>$(systemctl status --full "$2")
</span><span class='line'>ERRMAIL
</span><span class='line'>
</span><span class='line'>/etc/systemd/system/status_email_user@.service
</span><span class='line'>[Unit]
</span><span class='line'>Description=status email for %i to user
</span><span class='line'>
</span><span class='line'>[Service]
</span><span class='line'>Type=oneshot
</span><span class='line'>ExecStart=/usr/local/bin/systemd-email address %i
</span><span class='line'>User=nobody
</span><span class='line'>Group=systemd-journal
</span></code></pre></td></tr></table></div></figure>


<p>还要配置一下 mysql，还要给 mysql 加上合适执行权限</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/etc/systemd/system/mysqld.service.d/override.conf
</span><span class='line'>[Service]
</span><span class='line'>ExecStopPost=/usr/bin/sudo systemctl start status_email_user@mysqld.service
</span><span class='line'>
</span><span class='line'>/etc/sudoers
</span><span class='line'>mysql           ALL = (ALL) NOPASSWD: ALL</span></code></pre></td></tr></table></div></figure>


<p>这里应该对 msql 的权限作更小的限制，但是设置单个命令的 sudo 规则没有生效，限于时间关系先暂时这样配置。</p>

<p>Referece:</p>

<ul>
<li><a href="https://superuser.com/questions/1360346/how-to-send-an-email-alert-when-a-linux-service-has-stopped">How to send an email alert when a linux service has stopped?</a></li>
<li><a href="https://serverfault.com/questions/876233/how-to-send-an-email-if-a-systemd-service-is-restarted">How to send an email if a systemd service is restarted?</a></li>
</ul>


<h3>10. error running non-shared postrotate script for</h3>

<p><code>/var/log/mysql/mysqld.log of '/var/log/mysql/mysqld.log '</code></p>

<p>A:In case the root user has a password, then you
have to create a <code>/root/.my.cnf</code> configuration file
with the following content:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[mysqladmin]
</span><span class='line'>password = &lt;secret&gt;
</span><span class='line'>user= root</span></code></pre></td></tr></table></div></figure>


<p>where <code>"&lt;secret&gt;"</code> is the password.</p>

<p>ATTENTION: The <code>/root/.my.cnf</code> file should be readable <code>_ONLY_</code> by root !</p>

<p>Reference:</p>

<ul>
<li><a href="https://centosfaq.org/centos/centos-82-error-running-non-shared-postrotate-script-for-varlogmysqlmysqldlog/">CentOS 8.2: Error Running Non-shared Postrotate Script For /var/log/mysql/mysqld.log</a></li>
</ul>


<h3>11. 设置服务器上用户能打开的最大文件描述符数量</h3>

<p>A:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// /etc/security/limits.d/100-limits.conf
</span><span class='line'># hard limit for max opened files for user
</span><span class='line'>*      hard    nofile          65536
</span><span class='line'># soft limit for max opened files for user
</span><span class='line'>*       soft    nofile         20480
</span></code></pre></td></tr></table></div></figure>


<p>Reference:</p>

<ul>
<li><a href="https://www.linuxtechi.com/set-ulimit-file-descriptors-limit-linux-servers/">How to set ulimit and file descriptors limit on Linux Servers</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL 使用笔记(二)]]></title>
    <link href="http://DamianSheldon.github.io/blog/using-mysql-note-part-two.html"/>
    <updated>2020-07-18T15:57:24+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/using-mysql-note-part-two</id>
    <content type="html"><![CDATA[<h3>1.如何查看数据库中所有的存储过程?</h3>

<p>A: <code>mysql&gt; show procedure status where db = 'db_for_mysql_crash_course'\G;</code>;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web API 的设计与开发--读书笔记]]></title>
    <link href="http://DamianSheldon.github.io/blog/notes-of-web-api-the-good-parts.html"/>
    <updated>2020-04-29T10:31:16+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/notes-of-web-api-the-good-parts</id>
    <content type="html"><![CDATA[<p>Web API 的设计与开发是开发者日常工作的重要内容，我们该如何来做好这项工作呢？我觉得一个务实的方法是先参考前辈们的做法，也就是站在巨人的肩上，理解消化后再尝试去突破，这样可能会事半功倍。经过一番搜索，找到了 <code>&lt;&lt;Web API 的设计与开发&gt;&gt;</code>， 我个人觉得这是一本对 Web API 进行全面、细致和深入剖析的书，对 Web API 的设计与开发很有帮助，值得一读。</p>

<p>书的内容是按照整分的逻辑组织，并依先易后难的顺序来讲解相关知识。下面我按自己的理解尝试对书中内容做个简单的总结。</p>

<p>Web API 是用于完成某种需求，由于需求会变化，所以一次就设计出完美 Web API 的想法是不现实的，所以一开始应该要给 Web API 的更改留有余地，这是很容易忽视的地方。推荐的做法是在 URI 中嵌入版本信息，典型的形式是 <code>http://api.linkedin.com/v1/people</code>。</p>

<p>虽然一次就完美地设计 Web API 的想法不现实，但我们还是想尽量做好，减少 Web API 版本变更的次数，毕竟版本越多维护成本越高，那么我们该如何设计 Web API 呢？</p>

<p>Web API 通过 HTTP 协议来完成通信，在设计时我们应该最大程度地利用 HTTP 协议规范。基于标准协议设计的 API 至少要比使用私有协议设计的 API 更容易理解，还会减少使用时引入的 bug，使你的 API 得到更广泛的使用，提高利用已有的程序库或代码的可能。</p>

<p>有了整体设计原则后，我们来看下具体的请求和响应设计。API 的功能是为了完成项目的需求，最完备的请求会包含请求端点、请求方法、请求参数和请求数据体(Request Body)，我们依次来审视请求的每个部分。</p>

<p>端点是指用于访问 API 的 URI，普适又重要的设计原则有：</p>

<ul>
<li>短小便于输入的 URI</li>
<li>人可以读懂的 URI</li>
<li>没有大小写混用的 URI</li>
<li>不会暴露服务端架构的 URI</li>
<li>规则统一的 URI</li>
</ul>


<p>端点设计的注意事项：</p>

<ul>
<li>使用名词的复数形式</li>
<li>注意所用的单词</li>
<li>不使用空格及需要编码的字符</li>
<li>使用连字符来连接多个单词</li>
</ul>


<p>URI 和 HTTP 方法之间的关系可以认为是操作对象和操作方法的关系。如果把 URI 当作 API(HTTP) 的 “操作对象 = 资源”， HTTP 方法则表示 “进行怎样的操作”。通过用不同方法访问同一个 URI 端点，不但可以获取信息，还能修改信息、删除信息等，这样的思想正成为 Web API 设计的主流方式。</p>

<table>
<thead>
<tr>
<th> 方法名 </th>
<th> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td> GET </td>
<td> 获取资源 </td>
</tr>
<tr>
<td> POST </td>
<td> 新增资源 </td>
</tr>
<tr>
<td> PUT </td>
<td> 覆盖已有资源 </td>
</tr>
<tr>
<td> DELETE </td>
<td> 删除资源 </td>
</tr>
<tr>
<td> PATCH </td>
<td> 更新部分资源 </td>
</tr>
<tr>
<td> HEAD </td>
<td> 获取资源的元信息 </td>
</tr>
</tbody>
</table>


<p>有时请求可能还需要传递参数，在设计 URI 时，必须决定是把特定参数放在查询参数里还是路径里，决策的依据有以下两点：</p>

<ul>
<li>是否是表示唯一资源所需的信息</li>
<li>是否可以省略</li>
</ul>


<p>请求数据体，个人认为可以采用面向对象编程的思想来设计，整个处理过程会轻松很多。</p>

<p>说完请求，让我们来看下响应。首先是正确使用状态码，国内由于历史原因遗留下来无论请求是否成功都一律返回 200 的问题，全站切换到 HTTPS 后，我们还是应该最大程度地利用 HTTP 规范，这样我们能受益于通用的 HTTP 程序库，减轻客户端的负担。</p>

<p>其次是数据格式，这里的数据格式是指该用怎样的形式来描述 API 返回的结构化数据，具体而言就是指 JSON、XML 等数据格式。关于这一点，事实上几乎没有可讨论的，因为我们通常就是使用 JSON 作为默认的数据格式，若有需求 API 也可以支持 XML 的格式，这是最贴近现实的做法。</p>

<p>再次是数据内部结构，我们重点看下数据应该以数组还是对象返回，作者更推荐使用对象来封装数据的方式，因为该方式有如下几个优点:</p>

<ul>
<li>更容易理解响应数据表示什么</li>
<li>响应数据通过对象的封装实现了结构统一</li>
<li>可以避免安全方面的风险</li>
</ul>


<p>从次是各个数据的格式，各个数据项组成了最终的数据，只有掌握了如何处理单个数据项格式才能设计出合理的响应体数据格式。作者重点介绍了如何描述性别数据、日期格式和大整数，受益匪浅。</p>

<p>最后是出错信息的表示，同样，我们需要选择合适的状态码，出误信息建议以消息体的形式返回，出错信息应该包含详细的错误代码、人们能够读懂的相关信息，以及记载有详细说明的文档页面的 URI，如下所示：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "error": {
</span><span class='line'>      "code": 2013,
</span><span class='line'>      "message": "Bad authentication token",
</span><span class='line'>      "info": "http://docs.example.com/api/v1/authentication"
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>如果想支持描述多个错误同时发生，可以返回出错信息数组，</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "errors": [
</span><span class='line'>      {
</span><span class='line'>          "code": 2013,
</span><span class='line'>          "message": "Bad authentication token",
</span><span class='line'>          "info": "http://docs.example.com/api/v1/authentication"
</span><span class='line'>      }
</span><span class='line'>  ]
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>以上是基础内容，作者最后还介绍进阶内容，开发牢固的 Web API，对我们把 Web API 设计和开发提高到新高度有非常大的帮助。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ionic App 使用 cordova hot code push 实现热更新]]></title>
    <link href="http://DamianSheldon.github.io/blog/ionic-app-use-cordova-hot-code-push-achieve-live-update.html"/>
    <updated>2020-01-07T17:02:35+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/ionic-app-use-cordova-hot-code-push-achieve-live-update</id>
    <content type="html"><![CDATA[<p>本文主要记录 Ionic App 使用 cordova hot code push 实现热更新时遇到问题的解决方法，另外也简单记录下使用方法，方便日后查阅。</p>

<p>Cordova hot code push 插件的原作者已经不维护了，我们可以选择一个可能最好的 fork 来使用。 <a href="http://gitpop2.herokuapp.com/">gitpop2</a> 可以帮助我们选择，我从中选择了当前 star 最多的一个 fork。</p>

<p>Ionic App 使用 cordova hot code push 实现热更新的基本步骤如下：</p>

<ol>
<li><p>在 ionic 工程中添加 cordova hot code push plugin</p>

<pre><code class="`"> $ ionic cordova plugin add https://github.com/snipking/cordova-hot-code-push.git
</code></pre></li>
<li><p>安装 Cordova Hot Code Push CLI client</p>

<pre><code class="`"> $ npm install -g cordova-hot-code-push-cli
</code></pre></li>
<li><p>为指定平台编译工程</p>

<pre><code class="`"> $ ionic cordova prepare android
</code></pre></li>
<li><p>执行插件初始化</p>

<pre><code class="`"> $ cd /path/to/project/root
 $ cordova-hcp init
</code></pre></li>
<li><p>生成插件配置文件</p>

<pre><code class="`"> $ cordova-hcp build
</code></pre></li>
<li><p>运行到设备上</p></li>
<li><p>开发和发布应用新版本的 web</p>

<pre><code class="`"> // 1. 开发
 // 2. 为指定平台编译工程生成 web 
 $ ionic build --engine=cordova --platform=android
 // 3. 生成新插件配置文件
 $ cordova-hcp build
 // 4. 部署到服务器
</code></pre></li>
</ol>


<p>在使用的过程中遇到的第一个问题是更新之后白屏。使用 Chrome 的 remote devices 调试 android webview 找到了问题的原因，ionic 应用中 <code>&lt;base href="http://DamianSheldon.github.io/" /&gt;</code>， cordova hot code push 会将 web 代码拷贝到外部存储上，webview 使用形如 <code>file:///data/user/0/com.tenneshop.liveupdatedemo/files/cordova-hot-code-push-plugin/2020.01.07-16.16.39/www/index.html</code> 的路径来加载应用，此时 <code>document.baseURI = /</code>，加载其他相对路径的 js 文件时，是相对这个路径，例如 <code>&lt;script src="cordova.js"&gt;&lt;/script&gt;</code>，就是以 <code>/cordova.js</code> 去加载，于是就会提示找不到文件。从上面的分析我们也知道，解决问题的一个办法是修正 base href 的值，我们可以在 index.html 的 head 元素加入下面的代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;script&gt;
</span><span class='line'>    document.write('&lt;base href="' + document.location.href + '" /&gt;');
</span><span class='line'>&lt;/script&gt;
</span></code></pre></td></tr></table></div></figure>


<p>这样我们就修正文件路径的问题，很不巧，虽然文件的路径是对了，但是 ionic 默认不响应 file schema 的请求，我们需要做些工作，先让 WebViewLocalServer.java 支持响应 file schema，将 createHostingDetails 改成如下实现：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>private void createHostingDetails() {
</span><span class='line'>  final String assetPath = this.basePath;
</span><span class='line'>
</span><span class='line'>  if (assetPath.indexOf('*') != -1) {
</span><span class='line'>    throw new IllegalArgumentException("assetPath cannot contain the '*' character.");
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  PathHandler handler = new PathHandler() {
</span><span class='line'>    @Override
</span><span class='line'>    public InputStream handle(Uri url) {
</span><span class='line'>      InputStream stream = null;
</span><span class='line'>      String path = url.getPath();
</span><span class='line'>      try {
</span><span class='line'>        if (url.getScheme().equals("file")) {
</span><span class='line'>          stream = protocolHandler.openFile(path);
</span><span class='line'>        } else if (path.startsWith(contentStart)) {
</span><span class='line'>          stream = protocolHandler.openContentUrl(url);
</span><span class='line'>        } else if (path.startsWith(fileStart) || !isAsset) {
</span><span class='line'>          if (!path.startsWith(fileStart)) {
</span><span class='line'>            path = basePath + url.getPath();
</span><span class='line'>          }
</span><span class='line'>          stream = protocolHandler.openFile(path);
</span><span class='line'>        } else {
</span><span class='line'>          stream = protocolHandler.openAsset(assetPath + path);
</span><span class='line'>        }
</span><span class='line'>      } catch (IOException e) {
</span><span class='line'>        Log.e(TAG, "Unable to open asset URL: " + url);
</span><span class='line'>        Log.e(TAG, e.getLocalizedMessage());
</span><span class='line'>        return null;
</span><span class='line'>      }
</span><span class='line'>
</span><span class='line'>      return stream;
</span><span class='line'>    }
</span><span class='line'>  };
</span><span class='line'>
</span><span class='line'>  registerUriForScheme(httpScheme, handler, authority);
</span><span class='line'>  registerUriForScheme(httpsScheme, handler, authority);
</span><span class='line'>  if (!customScheme.equals(httpScheme) && !customScheme.equals(httpsScheme)) {
</span><span class='line'>    registerUriForScheme(customScheme, handler, authority);
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  registerUriForScheme("file", handler, "");
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>然后是 isLocalFile 方法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>private boolean isLocalFile(Uri uri) {
</span><span class='line'>  String path = uri.getPath();
</span><span class='line'>  if (path.startsWith(contentStart) || path.startsWith(fileStart) || uri.getScheme().equals("file")) {
</span><span class='line'>    return true;
</span><span class='line'>  }
</span><span class='line'>  return false;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>做完这些工作后 ionic 就可以响应 file schema 请求了。</p>

<p>继续测试，我发现更新后第二次打开还是显示 App bundle asset 中的 web，这有点奇怪。仔细查看日志，确实有加载外部存储的 web , 但却被 <code>http://localhost/</code> 的请求覆盖了，这是什么原因呢？经过对代码逻辑的一番梳理，我发现是 IonicWebViewEngine 中 onPageStarted 方法的原因：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public void onPageStarted(WebView view, String url, Bitmap favicon) {
</span><span class='line'>  super.onPageStarted(view, url, favicon);
</span><span class='line'>  String launchUrl = parser.getLaunchUrl();
</span><span class='line'>  if (!launchUrl.contains(WebViewLocalServer.httpsScheme) && !launchUrl.contains(WebViewLocalServer.httpScheme) && url.equals(launchUrl)) {
</span><span class='line'>    view.stopLoading();
</span><span class='line'>    // When using a custom scheme the app won't load if server start url doesn't end in /
</span><span class='line'>    String startUrl = CDV_LOCAL_SERVER;
</span><span class='line'>    if (!scheme.equalsIgnoreCase(WebViewLocalServer.httpsScheme) && !scheme.equalsIgnoreCase(WebViewLocalServer.httpScheme)) {
</span><span class='line'>      startUrl += "/";
</span><span class='line'>    }
</span><span class='line'>    view.loadUrl(startUrl);
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>MainActivity 触发 webview 加载 <code>file:///android_asset/www/index.html</code>，然后 cordova hot code push plugin 启动工作，它会让 webview 加载外部存储的 web，之后 IonicWebViewEngine 的 onPageStarted 收到 <code>file:///android_asset/www/index.html</code> 的请求的回调，它先停止了 webview 的加载工作，即 cordova hot code push plugin 启动加载外部存储的 web 的请求，再开始 <code>http://localhost/</code> 的请求，也就是打印出来日志的记录。正是这个方法时序的问题导致成功更新之后再重启应用仍然加载 app bundle asset 的 web。一种解决办法是我们直接让 MainActivity 直接加载 <code>http://localhost/</code>，就像下面这样:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public void onCreate(Bundle savedInstanceState)
</span><span class='line'>{
</span><span class='line'>   super.onCreate(savedInstanceState);
</span><span class='line'>
</span><span class='line'>   // enable Cordova apps to be started in the background
</span><span class='line'>   Bundle extras = getIntent().getExtras();
</span><span class='line'>   if (extras != null && extras.getBoolean("cdvStartInBackground", false)) {
</span><span class='line'>       moveTaskToBack(true);
</span><span class='line'>   }
</span><span class='line'>   launchUrl = "http://localhost/";
</span><span class='line'>   // Set by &lt;content src="index.html" /> in config.xml
</span><span class='line'>   loadUrl(launchUrl);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>这样热更新就可以正常工作了。</p>

<p>我继续做了点测试，又发现一个和 ionic icon 相关的问题，ionic 4 使用了 Fetch API 来请求 ionic icon 的 svg 资源，由于现在是使用 file schema 来指定资源路径，由于 Fetch API 不支持 file schema 所以就报错 <code>Fetch API cannot load file:///xxx/www/svg/md-star.svg. URL scheme "file" is not supported.</code> 我们得想办法来解决这个问题，一个办法替换 fetch 方法的实现，如:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;script>
</span><span class='line'>   document.write('&lt;base href="' + document.location.href + '" />');
</span><span class='line'>
</span><span class='line'>   var originalFetch = window.fetch;
</span><span class='line'>
</span><span class='line'>   window.fetch = function() {
</span><span class='line'>       var args = [];
</span><span class='line'>       for (var _i = 0; _i &lt; arguments.length; _i++) {
</span><span class='line'>           args[_i] = arguments[_i];
</span><span class='line'>       }
</span><span class='line'>       var url = args[0];
</span><span class='line'>       if (typeof url === 'string' && url.match(/\.svg/)) {
</span><span class='line'>           return new Promise(function(resolve, reject) {
</span><span class='line'>               var req = new XMLHttpRequest();
</span><span class='line'>               req.open('GET', url, true);
</span><span class='line'>               req.addEventListener('load', function() {
</span><span class='line'>                   resolve({
</span><span class='line'>                       ok: true,
</span><span class='line'>                       status: 200,
</span><span class='line'>                       text: function() {
</span><span class='line'>                           return Promise.resolve(req.responseText);
</span><span class='line'>                       }
</span><span class='line'>                   });
</span><span class='line'>               });
</span><span class='line'>               req.addEventListener('error', reject);
</span><span class='line'>               req.send();
</span><span class='line'>           });
</span><span class='line'>       } else {
</span><span class='line'>           return originalFetch.apply(void 0, args);
</span><span class='line'>       }
</span><span class='line'>   };
</span><span class='line'>&lt;/script></span></code></pre></td></tr></table></div></figure>


<p>在这些测试过程中，我还发现 cordova hot code push 更新时只做了版本字符是否相等的判断，这在服务器端的版本低于本地版本时，插件仍然会做更新，这是有问题的，我们需要严格这里的判断，让它只有在服务端的版本高于本地版本时才做更新。相关代码位于 UpdateLoaderWorker 的 run 方法中。</p>

<p>最后一个要考虑的问题是如何将我们修改的代码和 ionic 的代码很好的整合起来？我现在的想法是创建一个私有的扩展 IonicWebViewEngine 和 WebViewLocalServer，然后借鉴 ionic 通过 config.xml 的 web 偏好设置的方法，像下面的代码:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;preference name="webView" value="com.ionicframework.cordova.webview.IonicWebViewEngine" /&gt;</span></code></pre></td></tr></table></div></figure>


<p>回头测试下这个想法，好了有时间也许可以整理好代码提个 Pull Request。</p>

<p>Reference:</p>

<ul>
<li><a href="https://github.com/angular/angular/issues/13948">Cannot run angular 2+ from file:/// - looks like &lsquo;base href=&ldquo;/&rdquo;&rsquo; is the issue</a></li>
<li><a href="https://github.com/ionic-team/ionicons/issues/572">IONIC v4: Icon won&rsquo;t work in android</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在 macOS 上用 VirtualBox 安装 CentOS]]></title>
    <link href="http://DamianSheldon.github.io/blog/install-centos-8-on-macos-with-virtualbox.html"/>
    <updated>2020-01-04T13:49:46+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/install-centos-8-on-macos-with-virtualbox</id>
    <content type="html"><![CDATA[<p>最近为了更好的实践 Linux，决定在 mac 上使用 VirtualBox 安装一个 CentOS，主要是参考鸟哥的这篇<a href="http://linux.vbird.org/linux_basic/0157installcentos7.php#centos_1">安裝 CentOS7.x</a>。</p>

<p>安装之后打开系统出现闪屏，英语应该是称为 screen flicker，google 之后在 VirtualBox 的论坛找到解决方法:</p>

<ol>
<li><p>进入单用户维护模式</p>

<pre><code class="`"> a. 重启系统
 b. 在菜单选择界面键入 e，进入 grub2 的指令编辑模式
 c. 在指定内核和根文件系统这行最后加上 systemd.unit=rescue.target
 d. 键入 ctrl + x 进入系统
</code></pre></li>
<li><p>强制使用 Xorg</p>

<pre><code class="`">  a. 用 vim 打开 /etc/gdm3/custom.conf
  b. 删除 WaylandEnable=false 前的 # 注释符号
  c. 保存文件后，systemctl default 来进入正常模式 
</code></pre></li>
</ol>


<p>解决了闪屏之后，想通过虚拟机菜单中的调整窗口大小来让系统的屏幕全屏发现无用，想起来应该要安装 VirtualBox Guest Additions，于是插入虚拟机提供的光盘来安装。</p>

<p>首先是提示 kernel headers not found for target kernel 的错误，也提示详细的错误信息位于 /var/log/vboxadd-setup.log，我们可以通过查看该错误日志来找到对应解决方法。于是尝试安装对应的内核头文件，命令为 <code>yum install kernel-headers kernel-devel</code>，之后执行 <code>/sbin/rcvboxadd setup</code>.</p>

<p>仍然提示 kernel headers not found for target kernel，通过 <code>uname -r</code> 和 <code>rpm -q kernel-headers</code> 发现版本不一致，于是重启系统选择最新的内核版本。</p>

<p>再次尝试安装，提示 Error building the module，查看错误日志提示需要安装 <code>libelf-dev, libelf-devel or elfutils-libelf-devel</code> ，CentOS 上只有 elfutils-libelf-devel ，安装之后再次安装 VirtualBox Guest Additions。</p>

<p>提示</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ValueError: File context for /opt/VBoxGuestAdditions-6.0.14/other/mount.vboxsf already defined
</span><span class='line'>VirtualBox Guest Additions: Running kernel modules will not be replaced until
</span><span class='line'>the system is restarted</span></code></pre></td></tr></table></div></figure>


<p>这个问题暂时没找到解决方法，但是可以让 CentOS 全屏了，就暂时先不管这个问题了。</p>

<h3>释放虚拟机硬盘空间</h3>

<p>在虚拟机使用过程中硬盘的空间会慢慢增加，但是即使虚拟机中删除了文件实际占用空间减少，外部的硬盘文件大小仍然没有减少，这对小硬盘电脑可伤不起，于是想办法释放虚拟机磁盘空间。大前提是虚拟机的硬盘类型是 Dynamically allocated storage，主要分为两大步：</p>

<ol>
<li>在虚拟机寄主系统(如 CentOS)中删除文件释放空间并压缩硬盘</li>
<li>在虚拟机宿主系统(如 macOS)中压缩硬盘文件</li>
</ol>


<p>下面以 Windows 10 为例：</p>

<ol>
<li>开始按钮 > 设置 > 系统 > 存储空间 > 根据空间占用选择删除无用的文件释放之间</li>
<li>在左下方搜索框中搜索 Defragment ，然后打开 Defragment and Optimize Drives，选择想要压缩的硬盘进行压缩；</li>
<li>从微软下载 <a href="https://technet.microsoft.com/en-us/sysinternals/bb897443">SDelete</a> 助手</li>
<li>使用 sdelete 填充释放的硬盘空间，假设 SDelete 下载之后的放在 Downloads 目录下，我们想压缩 c 盘</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd "C:\Users\bob\Downloads"
</span><span class='line'>sdelete.exe c: -z</span></code></pre></td></tr></table></div></figure>


<ol>
<li>最后在宿主系统中压缩硬盘文件，例如我是 macOS：</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ /Applications/VirtualBox.app/Contents/MacOS/VBoxManage list hdds
</span><span class='line'># 找到想要压缩的硬盘文件路径 
</span><span class='line'>
</span><span class='line'>$ /Applications/VirtualBox.app/Contents/MacOS/VBoxManage modifymedium disk /Users/meiliang/VirtualBox\ VMs/Windows\ 10/Windows\ 10.vdi --compact</span></code></pre></td></tr></table></div></figure>


<h3>修改记录</h3>

<ul>
<li>2020/10/02：增加释放虚拟机硬盘空间的方法</li>
<li>2020/01/04：第一次完成</li>
</ul>


<p>Reference:</p>

<ul>
<li><a href="http://linux.vbird.org/linux_basic/0157installcentos7.php#centos_1">第三章、安裝 CentOS7.x</a></li>
<li><a href="https://forums.virtualbox.org/viewtopic.php?f=8&amp;t=85110">Ubuntu 1710 screen flicker</a></li>
<li><a href="https://forums.virtualbox.org/viewtopic.php?t=91563">Centos7 Guest Additions fails: kernel headers not found</a></li>
<li><a href="https://www.howtogeek.com/312883/how-to-shrink-a-virtualbox-virtual-machine-and-free-up-disk-space/">How to Shrink a VirtualBox Virtual Machine and Free Up Disk Space</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
