<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hello World]]></title>
  <link href="http://DamianSheldon.github.io/atom.xml" rel="self"/>
  <link href="http://DamianSheldon.github.io/"/>
  <updated>2015-07-28T20:51:38+08:00</updated>
  <id>http://DamianSheldon.github.io/</id>
  <author>
    <name><![CDATA[Sheldon]]></name>
    <email><![CDATA[dongmeilianghy@sina.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[如何使能 Yosemite 内置 Apache 的 HTTPS/SSL]]></title>
    <link href="http://DamianSheldon.github.io/blog/how-to-configure-https-slash-ssl-under-apache-and-yosemite.html/"/>
    <updated>2015-07-05T21:24:55+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/how-to-configure-https-slash-ssl-under-apache-and-yosemite</id>
    <content type="html"><![CDATA[<p>本文是我使能 Yosemite 内置 Apache 的 HTTPS/SSL的笔记。</p>

<p>我的环境：<br/>
OS: OS X 10.10.3 (14D136)<br/>
Apache: Apache/2.4.10 (Unix)</p>

<p>详细步骤：</p>

<ol>
<li><p>在配置文件中使能HTTPS/SSL：/private/etc/apache2/httpd.conf</p>

<ul>
<li>去掉 SSL 模块前的注释使能它:<br/>
<code>
LoadModule ssl_module libexec/apache2/mod_ssl.so
</code></li>
<li>去掉包含 SSL 配置文件前的注释，以便顶层配置文件能包含它:<br/>
<code>
Include /private/etc/apache2/extra/httpd-ssl.conf
</code></li>
</ul>
</li>
<li><p>定制/private/apache2/extra/httpd-ssl.conf</p>

<ul>
<li><p>更新 DocumentRoot 指向你的 Web 根目录:<br/>
<code>
DocumentRoot "/Users/dongmeiliang/Sites"
</code></p></li>
<li><p>修改 ServerName 成类似这样:<br/>
<code>
ServerName localhost:443
</code></p></li>
<li><p>指定 SSLCertificateFile<br/>
<code>
SSLCertificateFile "/private/etc/apache2/ssl/ssl.crt"
</code></p></li>
<li><p>指定 SSLCertificateKeyFile <br/>
<code>
SSLCertificateKeyFile "/private/etc/apache2/ssl/ssl.key"
</code></p></li>
<li>在 SSLCACertificatePath 和 SSLCARevocationPath 配置项前加上 # ，注释掉它们。</li>
</ul>
</li>
</ol>


<!--more-->


<ol>
<li><p>制作自签名的证书</p>

<p> 1) Generate a Private Key<br/>
 <code>
 openssl genrsa -des3 -out server.key 1024
</code></p>

<p> 2) Generate a CSR (Certificate Signing Request)<br/>
 <code>
 openssl req -new -key server.key -out server.csr
</code></p>

<p> 3) Remove Passphrase from Key<br/>
 <code>
 cp server.key server.key.org  
</code><br/>
 <code>
 openssl rsa -in server.key.org -out server.key
</code></p>

<p> 4) Generating a Self-Signed Certificate<br/>
 <code>
 openssl x509 -req -days 365 -in server.csr -signkey server.key -out     server.crt
</code></p></li>
<li><p>拷贝证书到配置文件指定的目录下</p></li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo cp server.crt /private/etc/apache2/ssl/ssl.crt
</span><span class='line'>sudo cp server.key /private/etc/apache2/ssl/ssl.key</span></code></pre></td></tr></table></div></figure>


<ol>
<li>重启Apache，打开 <a href="https://localhost">https://localhost</a> 测试是否工作正常</li>
</ol>


<p>问题：Invalid command &lsquo;SSLMutex&rsquo;, perhaps misspelled or defined by a module not included in the server configuration<br/>
解决办法：注释掉/private/etc/apache2/extra/httpd-ssl.conf中SSLMutex解决了这个问题。</p>

<p>Reference:<a href="http://webdevstudios.com/2013/05/24/how-to-set-up-ssl-with-osx-mountain-lions-built-in-apache/">http://webdevstudios.com/2013/05/24/how-to-set-up-ssl-with-osx-mountain-lions-built-in-apache/</a> <br/>
<a href="http://www.akadia.com/services/ssh_test_certificate.html  ">http://www.akadia.com/services/ssh_test_certificate.html  </a>
<a href="http://charles.lescampeurs.org/2014/04/01/how-to-configure-httpsssl-under-apache-and-osx">http://charles.lescampeurs.org/2014/04/01/how-to-configure-httpsssl-under-apache-and-osx</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enumerated constants]]></title>
    <link href="http://DamianSheldon.github.io/blog/enumerated-constants.html/"/>
    <updated>2015-05-08T16:38:20+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/enumerated-constants</id>
    <content type="html"><![CDATA[<p>Objective-C中的枚举常量大致有以下四种情形：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// 1. unnamed enumerations
</span><span class='line'>enum {
</span><span class='line'>    NSBorderlessWindowMask      = 0,
</span><span class='line'>    NSTitledWindowMask          = 1 &lt;&lt; 0,
</span><span class='line'>    NSClosableWindowMask        = 1 &lt;&lt; 1,
</span><span class='line'>    NSMiniaturizableWindowMask  = 1 &lt;&lt; 2,
</span><span class='line'>    NSResizableWindowMask       = 1 &lt;&lt; 3
</span><span class='line'> 
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>`- (void)setStyleMask:(NSUInteger)styleMask`
</span><span class='line'>
</span><span class='line'>// 2 
</span><span class='line'>typedef enum _NSMatrixMode {
</span><span class='line'>    NSRadioModeMatrix           = 0,
</span><span class='line'>    NSHighlightModeMatrix       = 1,
</span><span class='line'>    NSListModeMatrix            = 2,
</span><span class='line'>    NSTrackModeMatrix           = 3
</span><span class='line'>} NSMatrixMode;
</span><span class='line'>
</span><span class='line'>// 3
</span><span class='line'>typedef NS_ENUM(NSInteger, UITableViewCellStyle) {
</span><span class='line'>    UITableViewCellStyleDefault,
</span><span class='line'>    UITableViewCellStyleValue1,
</span><span class='line'>    UITableViewCellStyleValue2,
</span><span class='line'>    UITableViewCellStyleSubtitle
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>// 4
</span><span class='line'>typedef NS_OPTIONS(NSUInteger, NSLayoutFormatOptions) {
</span><span class='line'>    NSLayoutFormatAlignAllLeft = (1 &lt;&lt; NSLayoutAttributeLeft),
</span><span class='line'>    NSLayoutFormatAlignAllRight = (1 &lt;&lt; NSLayoutAttributeRight),
</span><span class='line'>    NSLayoutFormatAlignAllTop = (1 &lt;&lt; NSLayoutAttributeTop),
</span><span class='line'>    NSLayoutFormatAlignAllBottom = (1 &lt;&lt; NSLayoutAttributeBottom),
</span><span class='line'>    NSLayoutFormatAlignAllLeading = (1 &lt;&lt; NSLayoutAttributeLeading),
</span><span class='line'>    NSLayoutFormatAlignAllTrailing = (1 &lt;&lt; NSLayoutAttributeTrailing),
</span><span class='line'>    NSLayoutFormatAlignAllCenterX = (1 &lt;&lt; NSLayoutAttributeCenterX),
</span><span class='line'>    NSLayoutFormatAlignAllCenterY = (1 &lt;&lt; NSLayoutAttributeCenterY),
</span><span class='line'>    NSLayoutFormatAlignAllBaseline = (1 &lt;&lt; NSLayoutAttributeBaseline),
</span><span class='line'>    NSLayoutFormatAlignAllLastBaseline = NSLayoutFormatAlignAllBaseline,
</span><span class='line'>    NSLayoutFormatAlignAllFirstBaseline NS_ENUM_AVAILABLE_IOS(8_0) = (1 &lt;&lt; NSLayoutAttributeFirstBaseline),
</span><span class='line'>    
</span><span class='line'>    NSLayoutFormatAlignmentMask = 0xFFFF,
</span><span class='line'>    
</span><span class='line'>    /* choose only one of these three
</span><span class='line'>     */
</span><span class='line'>    NSLayoutFormatDirectionLeadingToTrailing = 0 &lt;&lt; 16, // default
</span><span class='line'>    NSLayoutFormatDirectionLeftToRight = 1 &lt;&lt; 16,
</span><span class='line'>    NSLayoutFormatDirectionRightToLeft = 2 &lt;&lt; 16,  
</span><span class='line'>    
</span><span class='line'>    NSLayoutFormatDirectionMask = 0x3 &lt;&lt; 16,  
</span><span class='line'>};
</span></code></pre></td></tr></table></div></figure>


<p>情形一相当于定义了常量，但不定义类型;<br/>
情形二定义了一个NSMatrixMode类型;</p>

<p>情形三定义了一个NSInteger的UITableViewCellStyle类型;<br/>
情形四支持C++的枚举特性。</p>

<blockquote><p>The NS_OPTIONS macro is defined in different ways if compiling as C++ or not. If it’s not C++, it’s expanded out the same as NS_ENUM. However, if it is C++, it’s expanded out slightly differently. Why? The C++ compiler acts differently when two enumeration values are bitwise OR’ed together. This is something, as shown earlier, that is commonly done with the options type of enumeration. When two values are OR’ed together, C++ considers the resulting value to be of the type the enumeration represents: NSUInteger. It also doesn’t allow the implicit cast to the enumeration type.</p></blockquote>

<p>Reference:<br/>
Effective Objective-C 2.0<br/>
<a href="http://nshipster.cn/ns_enum-ns_options/">NS_ENUM &amp; NS_OPTIONS</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux命令行整理]]></title>
    <link href="http://DamianSheldon.github.io/blog/linux-useful-command-line.html/"/>
    <updated>2015-03-18T21:12:56+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/linux-useful-command-line</id>
    <content type="html"><![CDATA[<h3>Create new account</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo adduser --home /home/username --shell /bin/bash --ingroup git username</span></code></pre></td></tr></table></div></figure>


<h3>List all groups and the user names that were in each group</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>for u in `cut -f1 -d: /etc/passwd`; do echo -n $u:; groups $u; done | sort
</span><span class='line'>
</span><span class='line'>groups $(cut -f1 -d":" /etc/passwd) | sort</span></code></pre></td></tr></table></div></figure>


<h3>How to set up ssh so you aren&rsquo;t asked for a password</h3>

<p>You can create a RSA authentication key to be able to log into a remote site from your account, without having to type your password.</p>

<p>Note that once you&rsquo;ve set this up, if an intruder breaks into your account/site, they are given access to the site you are allowed in without a password, too! For this reason, this should never be done from root.</p>

<ul>
<li>Run ssh-keygen(1) on your machine, and just hit enter when asked for a password.
This will generate both a private and a public key. With older SSH versions, they will be stored in ~/.ssh/identity and ~/.ssh/identity.pub; with newer ones, they will be stored in ~/.ssh/id_rsa and ~/.ssh/id_rsa.pub.</li>
<li>Next, add the contents of the public key file into ~/.ssh/authorized_keys on the remote site (the file should be mode 600).
If you are a developer and you want to access debian.org systems with such a key, it&rsquo;s possible to have the developer database propagate your key to all of the debian.org machines. See the LDAP gateway documentation.
You should then be able to use ssh to log in to the remote server without being asked for a password.</li>
</ul>


<p>Reference:<a href="https://www.debian.org/devel/passwordlessssh">https://www.debian.org/devel/passwordlessssh</a></p>

<h3>Finding all files containing a text string on Linux</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grep -rnw 'directory' -e "pattern"</span></code></pre></td></tr></table></div></figure>


<p>Reference: <a href="http://stackoverflow.com/questions/16956810/finding-all-files-containing-a-text-string-on-linux">http://stackoverflow.com/questions/16956810/finding-all-files-containing-a-text-string-on-linux</a></p>

<h3>Show bash script commands without executing them</h3>

<p>There are two useful debug outputs for that task (both are written to stderr):</p>

<p>set -v mode (set -o verbose)
prints commands to be executed to stderr just like they are read from input (script file or keyboard)
prints everything before anything ( substitutions and expansions, …) big is applied
set -x mode (set -o xtrace)
prints everything like it really is executed, after substitutions and expansions applied
indicates the depth-level of the subshell (by default by preceeding a + (plus) sign to the shown command)
indicates the recognized words after word splitting by marking them like &lsquo;x y&rsquo;
in a 4.1 version of the shell, this debug output can be printed to a configurable file descriptor (by setting the BASH_XTRACEFD variable) rather than stdout</p>

<p>Hint: These modes can be entered when calling Bash:</p>

<p>from commandline: bash -vx ./myscript
eventually (OS dependant) from shebang: #!/bin/bash -vx</p>

<p>Reference:<a href="http://wiki.bash-hackers.org/scripting/debuggingtips">http://wiki.bash-hackers.org/scripting/debuggingtips</a></p>

<h3>Toggle Web Sharing on or off in OSX 10.10</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Start
</span><span class='line'>sudo apachectl start
</span><span class='line'>
</span><span class='line'>// Stop
</span><span class='line'>sudo apachectl stop
</span><span class='line'>
</span><span class='line'>// Restart
</span><span class='line'>sudo apachectl restart
</span><span class='line'>
</span><span class='line'>// find the Apache version
</span><span class='line'>httpd -v
</span><span class='line'>
</span><span class='line'>// After starting Apache – test to see if the webserver is working in the browser – http://localhost – you should see the “It Works!” text.
</span></code></pre></td></tr></table></div></figure>


<p>Reference:<a href="http://coolestguidesontheplanet.com/get-apache-mysql-php-phpmyadmin-working-osx-10-10-yosemite/">http://coolestguidesontheplanet.com/get-apache-mysql-php-phpmyadmin-working-osx-10-10-yosemite/</a></p>

<h3>List open ports on your machine (Mac OS X)</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo lsof -i -P | grep -i "listen"</span></code></pre></td></tr></table></div></figure>


<p>Reference:<a href="http://juretta.com/log/2007/08/08/list_open_ports_on_your_machine_mac_os_x_/">http://juretta.com/log/2007/08/08/list_open_ports_on_your_machine_mac_os_x_/</a></p>

<h3>What do the numbers in a man page mean?</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>MANUAL SECTIONS
</span><span class='line'>    The standard sections of the manual include:
</span><span class='line'>
</span><span class='line'>    1      User Commands
</span><span class='line'>    2      System Calls
</span><span class='line'>    3      C Library Functions
</span><span class='line'>    4      Devices and Special Files
</span><span class='line'>    5      File Formats and Conventions
</span><span class='line'>    6      Games et. Al.
</span><span class='line'>    7      Miscellanea
</span><span class='line'>    8      System Administration tools and Deamons
</span><span class='line'>
</span><span class='line'>    Distributions customize the manual section to their specifics,
</span><span class='line'>    which often include additional sections.</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Thread笔记]]></title>
    <link href="http://DamianSheldon.github.io/blog/nsthread-thechnology-notes.html/"/>
    <updated>2015-03-16T16:27:17+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/nsthread-thechnology-notes</id>
    <content type="html"><![CDATA[<ol>
<li>Thread是什么？</li>
<li>iOS中怎么使用Thread？</li>
</ol>


<h3>Thread是什么</h3>

<blockquote><p>Threads are a relatively lightweight way to implement multiple paths of execution inside of an application. At the system level, programs run side by side, with the system doling out execution time to each program based on its needs and the needs of other programs. Inside each program, however, exists one or more threads of execution, which can be used to perform different tasks simultaneously or in a nearly simultaneous manner. The system itself actually manages these threads of execution, scheduling them to run on the available cores and preemptively interrupting them as needed to allow other threads to run.</p>

<p>From a technical standpoint, a thread is a combination of the kernel-level and application-level data structures needed to manage the execution of code. The kernel-level structures coordinate the dispatching of events to the thread and the preemptive scheduling of the thread on one of the available cores. The application-level structures include the call stack for storing function calls and the structures the application needs to manage and manipulate the thread’s attributes and state.</p></blockquote>

<h3>iOS中怎么使用Thread</h3>

<p>iOS中的Thread技术主要有以下两种：</p>

<table>
<thead>
<tr>
<th></th>
<th> Technology </th>
<th> Description </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> Cocoa threads </td>
<td> Cocoa implements threads using the NSThread class. Cocoa also provides methods on NSObject for spawning new threads and executing code on already-running threads. </td>
</tr>
<tr>
<td></td>
<td> POSIX threads </td>
<td> POSIX threads provide a C-based interface for creating threads. If you are not writing a Cocoa application, this is the best choice for creating threads. The POSIX interface is relatively simple to use and offers ample flexibility for configuring your threads.</td>
</tr>
</tbody>
</table>


<h4>Creating a Thread</h4>

<ol>
<li><p>Using NSThread</p>

<ul>
<li>Use the detachNewThreadSelector:toTarget:withObject: class method to spawn the new thread.</li>
<li>Create a new NSThread object and call its start method. (Supported only in iOS and OS X v10.5 and later.)</li>
</ul>
</li>
<li><p>Using POSIX Threads</p>

<ul>
<li>OS X and iOS provide C-based support for creating threads using the POSIX thread API. This technology can actually be used in any type of application (including Cocoa and Cocoa Touch applications) and might be more convenient if you are writing your software for multiple platforms. The POSIX routine you use to create threads is called, appropriately enough, pthread_create.</li>
</ul>
</li>
<li><p>Using NSObject to Spawn a Thread</p>

<ul>
<li>In iOS and OS X v10.5 and later, all objects have the ability to spawn a new thread and use it to execute one of their methods. The performSelectorInBackground:withObject: method creates a new detached thread and uses the specified method as the entry point for the new thread.</li>
</ul>
</li>
</ol>


<h4>Configuring Thread Attributes</h4>

<p>Thread的配置项有：</p>

<ul>
<li>Stack Size of a Thread</li>
<li>Thread-Local Storage</li>
<li>Detached State of a Thread</li>
<li>Thread Priority</li>
</ul>


<h4>Writing Your Thread Entry Routine</h4>

<p>编写Thread的入口程序通常需要做如下事项：</p>

<ul>
<li>Creating an Autorelease Pool</li>
<li>Setting Up an Exception Handler</li>
<li>Setting Up a Run Loop</li>
</ul>


<h4>Terminating a Thread</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS App 开发问题汇总（二）]]></title>
    <link href="http://DamianSheldon.github.io/blog/ios-app-problems-part-2.html/"/>
    <updated>2015-03-16T16:14:50+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/ios-app-problems-part-2</id>
    <content type="html"><![CDATA[<h3>问题描述：Ad Hoc分发应用</h3>

<p>导出Ad Hoc授权应用
Xcode > Product > Archive > Export</p>

<p>安装Ad Hoc分发的应用
Open iTunes > File > Add To Library&hellip; > select Ad Hoc provisioning profile and App.ipa > Sync</p>

<h3>问题描述：Xcode编译出现如下警告提示：</h3>

<p>[WARN]warning: no rule to process file xxx.h’ of type sourcecode.c.h for architecture armv7</p>

<p>解决办法:这是因为检查到有.h文件在编译列表中了。所以只要在列表中去掉就可以了。</p>

<p>点击你的xcode项目文件，然后点击[Build Phases]，确保在[Compile Sources]中没有.h文件。</p>

<p>Reference:<a href="http://hearrain.com/2014/01/774">http://hearrain.com/2014/01/774</a></p>

<h3>问题描述：iPhone每次连接Mac都会弹出iPhoto</h3>

<p>解决办法：</p>

<ol>
<li>Plug in your iPad/iPhone</li>
<li>Open Image Capture</li>
<li>Select your device (&ldquo;devMikePad&rdquo;)</li>
<li>Press the triangle in square symbol in the lower left corner.</li>
<li>Select &ldquo;No application&rdquo; in the menu.</li>
</ol>


<p>iPhoto:
Preferences > General > &ldquo;Connecting Camera Opens &hellip;&rdquo;
set it to &ldquo;No Application&rdquo;</p>

<!--more-->


<h3>问题描述:ld: warning: directory not found for option &lsquo;-L/Users/dongmeiliang/Documents/soh.client.iOS/sohiOSApp/sohiOSApp/Component/BaiduMap_IOSSDK_v2-2/Release-iphonesimulator&rsquo;</h3>

<p>Undefined symbols for architecture x86_64:
  &ldquo;_DDExtractFileNameWithoutExtension&rdquo;, referenced from:</p>

<pre><code>  ___57-[AJSocketBinaryClientChannel setupReadTimerWithTimeout:]_block_invoke76 in libPods-sohiOSApp-AJFrame.iOS.a(AJSocketBinaryClientChannel.o)
  -[AJSocketBinaryClientChannel doReadTimeout] in libPods-sohiOSApp-AJFrame.iOS.a(AJSocketBinaryClientChannel.o)
  -[AJSocketBinaryClientChannel endCurrentRead] in libPods-sohiOSApp-AJFrame.iOS.a(AJSocketBinaryClientChannel.o)
</code></pre>

<p>  &ldquo;<em>OBJC_CLASS</em>$_DDLog&rdquo;, referenced from:</p>

<pre><code>  objc-class-ref in libPods-sohiOSApp-AJFrame.iOS.a(AJSocketBinaryClientChannel.o)
</code></pre>

<p>  &ldquo;<em>OBJC_CLASS</em>$_GCDAsyncSocket&rdquo;, referenced from:</p>

<pre><code>  objc-class-ref in libPods-sohiOSApp-AJFrame.iOS.a(AJTcpConnector.o)
</code></pre>

<p>ld: symbol(s) not found for architecture x86_64</p>

<p>解决办法：从输出的日志可以看出问题是出在链接，由Cocoapods管理的第三方库安装后链接配置项没有设置正确，需要手动设置没有被自动链接的库，例如这里我需要链接：-l&#8221;Pods-CocoaAsyncSocket&#8221;。</p>

<h3>问题描述:dyld: could not load inserted library &lsquo;/usr/lib/libgmalloc.dylib&rsquo; because image not found</h3>

<p>解决办法：Edit Scheme > Run > Diagnostics > Memory Managerment</p>

<p>Malloc uncheck Enable Scribble</p>

<pre><code>    uncheck Enable Guard Edges  
    uncheck Enable Guard Malloc  
</code></pre>

<p>Reference:<a href="http://blog.csdn.net/chocolateloveme/article/details/18258443">http://blog.csdn.net/chocolateloveme/article/details/18258443</a></p>

<h3>问题描述：APNs服务器地址</h3>

<p>答案：
gateway.push.apple.com 2195 (Product)<br/>
gateway.sandbox.push.apple.com 2195 (Development)</p>

<h3>问题描述：/Users/user/XCodeWork/iPhoneDev/MyAppSourceFolder/en.lproj/MainWindow-iPhone.xib:</h3>

<p>  Compilation failed. Unable to write to path:      <br/>
  /Users/user/Library/Developer/Xcode/DerivedData/MYAPPNAME-
  dudnhxzgpqtcnqcgaguirvkhmvco/Build/Intermediates/ArchiveIntermediates/
  MYAPPNAME/InstallationBuildProductsLocation/Applications/MyAppname.app/
  en.lproj/MainWindow-iPhone.nib</p>

<p>解决办法：For every xib&rsquo;s that we&rsquo;ve problems, in the right panel go to the first tab, &ldquo;Interface Builder Document&rdquo; &ndash;> &ldquo;Builds for&rdquo; and select &ldquo;iOS 7.0 and Later&rdquo;. My old configuration was &ldquo;iOS 4.3 and Later&rdquo;.</p>

<p>Reference:<a href="http://stackoverflow.com/questions/19688276/interface-builder-xib-error-unable-to-write-to-path">http://stackoverflow.com/questions/19688276/interface-builder-xib-error-unable-to-write-to-path</a></p>

<h3>问题描述:duplicate symbol <em>OBJC_METACLASS</em>$_SDWebImagePrefetcher in:</h3>

<pre><code>/Users/dongmeiliang/Library/Developer/Xcode/DerivedData/jiaxiaotong-dxrmnnwbexugoqfekesgvdiijcdm/Build/Products/Debug-iphonesimulator/libPods-weima-SDWebImage.a(SDWebImagePrefetcher.o)
/Users/dongmeiliang/Library/Developer/Xcode/DerivedData/jiaxiaotong-dxrmnnwbexugoqfekesgvdiijcdm/Build/Products/Debug-iphonesimulator/libPods-SDWebImage.a(SDWebImagePrefetcher.o)
</code></pre>

<p>ld: 727 duplicate symbols for architecture x86_64</p>

<p>解决办法：问题出现的原因是我用CocoaPods管理第三方库，在Build Settings > Linking > Other Linker Flags 里面即显示指定了-l&#8221;Pods-SDWebImagePrefetcher&#8221;,又设置了变量$(inherited)。我去掉$(inherited)就好。</p>

<h3>问题描述:2015-04-05 22:35:26.917 weima[67059:2338954] NSScanner: nil string argument</h3>

<p>2015-04-05 22:35:26.917 weima[67059:2338954] NSScanner: nil string argument
libc++abi.dylib: terminate_handler unexpectedly threw an exception</p>

<h3>Cannot send push notifications using Javapns/Javaapns SSL handshake failure</h3>

<p>解决办法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>developer_identity.cer &lt;= download from Apple (aps cert)
</span><span class='line'>mykey.p12 &lt;= Your private key (CSR generate private key or install aps cert get a private key both ok)
</span><span class='line'>
</span><span class='line'>openssl x509 -in developer_identity.cer -inform DER -out developer_identity.pem -outform PEM
</span><span class='line'>openssl pkcs12 -nocerts -in mykey.p12 -out mykey.pem
</span><span class='line'>openssl pkcs12 -export -inkey mykey.pem -in developer_identity.pem -out iphone_dev.p12</span></code></pre></td></tr></table></div></figure>


<p>Reference:<a href="http://stackoverflow.com/questions/12585858/cannot-send-push-notifications-using-javapns-javaapns-ssl-handshake-failure">http://stackoverflow.com/questions/12585858/cannot-send-push-notifications-using-javapns-javaapns-ssl-handshake-failure</a></p>

<h3>导航栏如何显示两行文本？</h3>

<p>解决办法：After setting up your titleView or titleLabel, call sizeToFit on it, also make sure titleLabel.textAlignment = UITextAlignmentCenter. It&rsquo;ll be centered in the width of the navbar rather than in the space between the button edge and far edge of navbar.</p>

<p>Reference <a href="http://stackoverflow.com/questions/3681990/adjusting-navigationitem-titleviews-frame">http://stackoverflow.com/questions/3681990/adjusting-navigationitem-titleviews-frame</a></p>

<h3>SVN how to resolve “local unversioned, incoming add upon update”</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ svn status
</span><span class='line'>D     C logs
</span><span class='line'>      &gt;   local unversioned, incoming add upon update
</span><span class='line'>Summary of conflicts:
</span><span class='line'>  Tree conflicts: 1</span></code></pre></td></tr></table></div></figure>


<p>解决办法:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ svn resolve --accept working logs
</span><span class='line'>Resolved conflicted state of 'logs'
</span><span class='line'>$ svn revert logs
</span><span class='line'>Reverted 'logs'
</span><span class='line'>$ svn status</span></code></pre></td></tr></table></div></figure>


<p>Reference <a href="http://tomhennigan.blogspot.com/2012/01/resolve-tree-conflict-svn-local.html">http://tomhennigan.blogspot.com/2012/01/resolve-tree-conflict-svn-local.html</a></p>

<h3>问题描述：Calling a C function from within a function in a .mm file</h3>

<p>解决办法：The .mm file is looking to call a mangled version of the function name. You need either <strong>BEGIN_DECLS and </strong>END_DECLS around the C function declarations seen by the C++-compiled file, or you need to do the equivalent yourself. The idea is to mark those function declarations as extern &ldquo;C&rdquo; when seen by an (Obj-)C++ compiler, but not when seen by any other sort of compiler.</p>

<p>Referenc: <a href="http://stackoverflow.com/questions/4984523/calling-a-c-function-from-within-a-function-in-a-mm-file">http://stackoverflow.com/questions/4984523/calling-a-c-function-from-within-a-function-in-a-mm-file</a></p>

<h3>问题描述：Compilation failed. Unable to write to path</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Underlying Errors:
</span><span class='line'>    Description: The file “objects.nib” doesn’t exist.
</span><span class='line'>    Failure Reason: The file doesn’t exist.
</span><span class='line'>    Underlying Errors:
</span><span class='line'>        Description: The operation couldn’t be completed. No such file or directory
</span><span class='line'>        Failure Reason: No such file or directory
</span><span class='line'>    Description: “DMLUserElementCell~iphone.nib” couldn’t be removed.
</span><span class='line'>    Failure Reason: The file doesn’t exist.
</span><span class='line'>    Underlying Errors:
</span><span class='line'>        Description: The operation couldn’t be completed. No such file or directory
</span><span class='line'>        Failure Reason: No such file or directory</span></code></pre></td></tr></table></div></figure>


<p>解决办法：在Target > Build Phases > Compile Sources里去掉出错的nib文件。</p>

<p>Reference:<a href="http://stackoverflow.com/questions/20570340/xcode-5-storyboard-compile-failure">http://stackoverflow.com/questions/20570340/xcode-5-storyboard-compile-failure</a></p>

<h3>问题描述：Where iPhoto Pictures are Located and How to Access the iPhoto Library and Picture Files</h3>

<p>解决办法：iPhoto 11 (9.0) Photo Library Storage Location:~/Pictures/iPhoto Library.photolibrary/Masters/</p>

<p>Reference:<a href="http://osxdaily.com/2011/08/30/where-iphoto-pictures-are-located/">http://osxdaily.com/2011/08/30/where-iphoto-pictures-are-located/</a></p>

<h3>问题描述：Checking the Entitlements for an iOS app Submission to the App Store</h3>

<p>Making an Inspectable .ipa file<br/>
In the Xcode Organizer, instead of Submit to the iOS App Store, do Save for Enterprise or Ad-Hoc Deployment. This will create a local copy of the .ipa file that would be submitted to the App Store.<br/>
When asked to choose the provisioning profile to sign with, select the same distribution profile you use when submitting to the App Store. Take a screenshot of your choice (command-shift-3) so you can verify this step later. During submission, this screenshot will be the only record you have identifying which profile was used to sign the app.<br/>
When asked to save the package, uncheck Save for Enterprise Distribution, then save the .ipa file.<br/>
Checking the Entitlements of an .ipa file<br/>
Find the .ipa file and change its the extension to .zip.<br/>
Expand the .zip file. This will produce a Payload folder containing your .app bundle.<br/>
Use the codesign tool to check the entitlements on the .app bundle like this:
$ codesign -d &mdash;entitlements :&ndash; &ldquo;Payload/YourApp.app&rdquo;
where YourApp.app is the actual name of your .app bundle.<br/>
Use the security tool to check the entitlements of the app&rsquo;s embedded provisioning profile:
// should add cms, Apple may be a typo
$ security cms -D -i &ldquo;Payload/YourApp.app/embedded.mobileprovision&rdquo;</p>

<p>where YourApp.app is the actual name of your .app bundle.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何创建私有的Pod]]></title>
    <link href="http://DamianSheldon.github.io/blog/private-pods.html/"/>
    <updated>2015-03-11T17:23:04+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/private-pods</id>
    <content type="html"><![CDATA[<p>公司的代码经常是需要保密的，我们可以创建私有的pod来方便我们的日常开发工作。</p>

<p>Cocoa Pods工作依赖于两个文件：<br/>
1. podspec:一个pod的配置是什么，pod的代码放在哪里<br/>
2. Podfile:项目依赖哪个pod，以何种方式依赖，它的podspec放在哪里</p>

<p>Cocoa Pods提供创建静态库pod的方法pod lib create [Pod name]，但这次我由于各种原因不是这样开始的，而是手动先创建了静态库，然后再新建开发工程的方式。于是我需要手动创建podspec文件:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pod spec create --verbose project</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>然后编辑podspecs文件，这里有几个地方需要注意：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// s.source指定工程的源码地址,这里路径有些怪异是因为我的git server是布署在Windows上的。
</span><span class='line'>s.source  = { :git =&gt; "ssh://dongmeiliang@192.168.1.100:/git/ICW/Git/AJFrame.iOS", :tag =&gt; "2.0.0" }
</span><span class='line'>
</span><span class='line'>// s.source_files指定哪些源文件需要包含在pod中
</span><span class='line'>s.source_files  = "AJFrame.iOS/*.{h,m}"
</span><span class='line'>
</span><span class='line'>// pod的依赖
</span><span class='line'>s.dependency "JSONKit", "~&gt; 1.4"
</span></code></pre></td></tr></table></div></figure>


<p>podspecs完成之后, pod spec lint命令可以检查有没有错误。接下来在需要依赖这个pod的工程的Podfile文件中指定podspec的存放路径。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pod 'AJFrame.iOS', :git =&gt; 'ssh://192.168.1.100:/git/ICW/Git/AJFrame.iOS', :tag =&gt; '2.0.0'</span></code></pre></td></tr></table></div></figure>


<h3>s.dependency 如何依赖私有 Pod？</h3>

<ol>
<li>Create a Private Spec Repo</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd /opt/git  
</span><span class='line'>$ mkdir Specs.git  
</span><span class='line'>$ cd Specs.git
</span><span class='line'>$ git init --bare</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Add your Private Repo to your CocoaPods installation</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pod repo add artsy-specs git@github:artsy/Specs.git
</span><span class='line'>
</span><span class='line'>$ pod repo add aijian-specs ssh://192.168.1.105:/git/ICW/Git/Specs.git --verbose</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Check your installation is successful and ready to go:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd ~/.cocoapods/repos/artsy-specs
</span><span class='line'>$ pod repo lint .</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Add your Podspec to your repo</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pod repo push artsy-specs ~/Desktop/Artsy+OSSUIFonts.podspec</span></code></pre></td></tr></table></div></figure>


<p>Your private Pod is ready to be used in a Podfile. You can use the spec repository with the source directive in your Podfile as shown in the following example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>source 'URL_TO_REPOSITORY'</span></code></pre></td></tr></table></div></figure>


<p><a href="http://stackoverflow.com/questions/25759170/how-to-add-a-private-cocoapod-as-a-dependency-in-another-pod-podspec-file">Solution Reference</a></p>

<h3>Reference</h3>

<p><a href="http://guides.cocoapods.org/making/using-pod-lib-create">Using Pod Lib Create</a><br/>
<a href="http://guides.cocoapods.org/using/the-podfile.html">The Podfile</a><br/>
<a href="http://www.iwangke.me/2013/04/18/advanced-cocoapods/">CocoaPods进阶：本地包管理</a><br/>
<a href="http://blog.devtang.com/blog/2014/05/25/use-cocoapod-to-manage-ios-lib-dependency/">用CocoaPods做iOS程序的依赖管理</a><br/>
<a href="http://studentdeng.github.io/blog/2013/09/13/cocoapods-tutorial/">Cocoapods 入门</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(翻译)How to Play, Record, and Edit Videos in iOS]]></title>
    <link href="http://DamianSheldon.github.io/blog/how-to-play.html/"/>
    <updated>2015-01-22T16:48:25+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/how-to-play</id>
    <content type="html"><![CDATA[<h4>AVAsset</h4>

<p>它是表示基于时间的视听媒体的抽象类例如视频和音频。每个assert包含用于展示或处理的记录集合，可以是任意一种通用媒体类型，包括但不仅限于音频，视频，文本，closed captions 和 subtitles。</p>

<p>一个AVAsset对象定义了定义记录的属性集合，它构成asset。一个记录用一个AVAssetTrack实例表示。</p>

<p>在典型的简单情况下，一个记录代表一个音频组件，另一个代表视频组件；在复杂的合成器中，可能会有多个重叠的音频和视频记录。你将会把合成的视频和音频文件表示成AVAsset对象。</p>

<h4>AVComposition</h4>

<p>An AVCompositionobject combines media data from multiple file-based sources in a custom temporal arrangement in order to present or process it together. All file-based audiovisual assets are eligible to be combined, regardless of container type.</p>

<p>一个AVComposition对象用自定义的时间顺序排列混合来自多个基于文件源的媒体使得可以一起显示或处理。所有基于文件的视听asset都可以混合，而不用管容器类型。</p>

<p>At its top level, an AVComposition is a collection of tracks, each presenting media of a specific type such as audio or video, according to a timeline. Each track is represented by an instance of AVCompositionTrack.</p>

<p>在它的上一级，AVComposition是记录的集合，每个依据时间线展示像音频或视频的媒体类型。每个记录由一个AVCompositionTrack实例代表。</p>

<p>AVMutableComposition and AVMutableCompositionTrack</p>

<p>A higher-level interface for constructing compositions is also presented by AVMutableComposition and AVMutableCompositionTrack. These objects offer insertion, removal, and scaling operations without direct manipulation of the trackSegment arrays of composition tracks.</p>

<p>AVMutableComposition and AVMutableCompositionTrack make use of higher-level constructs such as AVAsset and AVAssetTrack. This means the client can make use of the same references to candidate sources that it would have created in order to inspect or preview them prior to inclusion in a composition.</p>

<p>In short, you have an AVMutableComposition and you can add multiple AVMutableCompositionTrack instances to it. Each AVMutableCompositionTrack will have a separate media asset.</p>

<p>And the Rest</p>

<p>In order to apply a CGAffineTransform to a track, you will make use of AVVideoCompositionInstruction and AVVideoComposition. An AVVideoCompositionInstruction object represents an operation to be performed by a compositor. The object contains multiple AVMutableVideoCompositionLayerInstruction objects.</p>

<p>You use an AVVideoCompositionLayerInstruction object to modify the transform and opacity ramps to apply to a given track in an AV composition.</p>

<p>AVMutableVideoCompositionLayerInstruction is a mutable subclass of AVVideoCompositionLayerInstruction.</p>

<p>An AVVideoComposition object maintains an array of instructions to perform its composition, and an AVMutableVideoComposition object represents a mutable video composition.</p>

<p>Conclusion</p>

<p>To sum it all up:</p>

<p>You have a main AVMutableComposition object that contains multiple AVMutableCompositionTrack instances. Each track represents an asset.</p>

<p>You have AVMutableVideoComposition objects that contain multiple AVMutableVideoCompositionInstructions.</p>

<p>Each AVMutableVideoCompositionInstruction contains multiple AVMutableVideoCompositionLayerInstruction instances.</p>

<p>Each layer instruction is used to apply a certain transform to a given track.</p>

<h3><a href="http://www.raywenderlich.com/13418/how-to-play-record-edit-videos-in-ios">原文</a></h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Technical Interview Part 1]]></title>
    <link href="http://DamianSheldon.github.io/blog/ios-technical-interview-part-1.html/"/>
    <updated>2015-01-05T15:44:07+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/ios-technical-interview-part-1</id>
    <content type="html"><![CDATA[<h3>Explain method swizzling. When you would use it?</h3>

<h3>Take three objects: a grandparent, parent and child. The grandparent retains the parent, the parent retains the child and the child retains the parent. The grandparent releases the parent. Explain what happens.</h3>

<p>Answer:循环保留导致内存泄漏。</p>

<h3>What happens when you invoke a method on a nil pointer?</h3>

<p>Answer:返回0</p>

<p>Reference:<a href="http://nshipster.com/nil/">http://nshipster.com/nil/</a></p>

<h3>Give two separate and independent reasons why retainCount should never be used in shipping code.</h3>

<blockquote><p>There should be no reason to explicitly ask an object what its retain count is (see retainCount). The result is often misleading, as you may be unaware of what framework objects have retained an object in which you are interested. In debugging memory management issues, you should be concerned only with ensuring that your code adheres to the ownership rules.</p></blockquote>

<ol>
<li>结果不正确，因为你不知道框架中哪些对象已经引用了你感兴趣的对象;</li>
<li>产品代码中不应该包含无用代码。</li>
</ol>


<h3>Explain your process for tracing and fixing a memory leak.</h3>

<ol>
<li>Set the NSZombieEnabled argument in your executable options, which sometimes helps narrow down the cause</li>
<li>Run with Apple Instruments such as Leaks to look for memory issues</li>
</ol>


<p>Reference:<a href="http://www.raywenderlich.com/2696">http://www.raywenderlich.com/2696</a></p>

<h3>Explain how an autorelease pool works at the runtime level.</h3>

<h3>When dealing with property declarations, what is the difference between atomic and non-atomic?</h3>

<p>atomic是指存在竞争赋值时，我们会得到某次完整的赋值，而nonatomic则可能是几次赋值共同组合。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@property CGRect domain;
</span><span class='line'>
</span><span class='line'>&lt;b&gt;thread 1:&lt;/b&gt; puppy.domain = CGRectMake (1.0, 2.0, 3.0, 4.0);
</span><span class='line'>&lt;b&gt;thread 2:&lt;/b&gt; puppy.domain = CGRectMake (10.0, 20.0, 30.0, 40.0);
</span><span class='line'>
</span><span class='line'>atomic意味着在竞争赋值的情况下得到的结果是CGRectMake (1.0, 2.0, 3.0, 4.0)或者CGRectMake (10.0, 20.0, 30.0, 40.0)。
</span><span class='line'>
</span><span class='line'>noatomic情况得到的结果可能是CGRectMake (1.0, 2.0, 30.0, 40.0)这种两次组合的乱码。
</span></code></pre></td></tr></table></div></figure>


<p>再进一步，atomic是不是意味着代码是线程安全的呢？不是。atomic修饰符可以保证property的读写操作是串行的，但如果对象的指针不是atomic修饰的，代码仍然不是线程安全的。</p>

<h3>In C, how would you reverse a string as quickly as possible?</h3>

<h3>Which is faster: to iterate through an NSArray or an NSSet?</h3>

<p>NSArray</p>

<p>Reference:<a href="http://www.cocoawithlove.com/2008/08/nsarray-or-nsset-nsdictionary-or.html">http://www.cocoawithlove.com/2008/08/nsarray-or-nsset-nsdictionary-or.html</a></p>

<h3>Explain how code signing works.</h3>

<h3>What is posing in Objective-C?</h3>

<h3>List six instruments that are part of the standard.</h3>

<ol>
<li>Allocations</li>
<li>Core Animation</li>
<li>Leaks</li>
<li></li>
</ol>


<h3>What are the differences between copy and retain?</h3>

<p>copy是新创建一个对象副本；retain则是对象引用计数加一。</p>

<h3>What is the difference between frames and bounds?</h3>

<blockquote><p>The frame property contains the frame rectangle, which specifies the size and location of the view in its superview’s coordinate system.
The bounds property contains the bounds rectangle, which specifies the size of the view (and its content origin) in the view’s own local coordinate system.</p></blockquote>

<h3>What happens when the following code executes? Ball *ball = [[[[Ball alloc] init] autorelease] autorelease];</h3>

<p>The object gets released twice when the autorelease pool is destroyed.</p>

<p>Reference:<a href="http://stackoverflow.com/questions/11291801/autoreleasing-twice-an-object">http://stackoverflow.com/questions/11291801/autoreleasing-twice-an-object</a></p>

<h3>List the five iOS app states.</h3>

<table>
<thead>
<tr>
<th></th>
<th> State </th>
<th> Description </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> Not Running </td>
<td> The app has not been launched or was running but was terminated by the system.</td>
</tr>
<tr>
<td></td>
<td> Inactive </td>
<td> The app is running in the foreground but is currently not receiving events. (It may be executing other code though.) An app usually stays in this state only briefly as it transitions to a different state.</td>
</tr>
<tr>
<td></td>
<td> Active </td>
<td> The app is running in the foreground and is receiving events. This is the normal mode for foreground apps.</td>
</tr>
<tr>
<td></td>
<td> Background </td>
<td> The app is in the background and executing code. Most apps enter this state briefly on their way to being suspended. However, an app that requests extra execution time may remain in this state for a period of time. In addition, an app being launched directly into the background enters this state instead of the inactive state. For information about how to execute code while in the background</td>
</tr>
<tr>
<td></td>
<td> Suspended </td>
<td> The app is in the background but is not executing code. The system moves apps to this state automatically and does not notify them before doing so. While suspended, an app remains in memory but does not execute any code.</td>
</tr>
</tbody>
</table>


<p>When a low-memory condition occurs, the system may purge suspended apps without notice to make more space for the foreground app.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android开发问题汇总]]></title>
    <link href="http://DamianSheldon.github.io/blog/problems-of-android-development.html/"/>
    <updated>2014-12-17T09:38:20+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/problems-of-android-development</id>
    <content type="html"><![CDATA[<h3>Android Studio SDK Components安装提示操作超时</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// MacOS
</span><span class='line'>$ vim /etc/hosts
</span><span class='line'>203.208.46.146 dl.google.com
</span><span class='line'>203.208.46.146 dl-ssl.google.com</span></code></pre></td></tr></table></div></figure>


<h3>Android Studio Check Updates提示连接出错</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// MacOS
</span><span class='line'>$ vim /Applications/Android\ Studio.app/Contents/Info.plist
</span><span class='line'>
</span><span class='line'>// 搜索 VMOptions
</span><span class='line'>
</span><span class='line'>// 添加如下内容
</span><span class='line'>-Djava.net.preferIPv4Stack=true
</span><span class='line'>-Didea.updates.url=http://dl.google.com/android/studio/patches/updates.xml
</span><span class='line'>-Didea.patches.url=http://dl.google.com/android/studio/patches/
</span><span class='line'>
</span><span class='line'>// 结果
</span><span class='line'>&lt;key&gt;VMOptions&lt;/key&gt;
</span><span class='line'>&lt;string&gt;
</span><span class='line'>-Dfile.encoding=UTF-8 -ea 
</span><span class='line'>-Dsun.io.useCanonCaches=false 
</span><span class='line'>-Djava.net.preferIPv4Stack=true
</span><span class='line'> -Djna.nosys=true 
</span><span class='line'> -Djna.boot.library.path=  
</span><span class='line'> -Djna.debug_load=true 
</span><span class='line'> -Djna.debug_load.jna=true 
</span><span class='line'> -Djsse.enableSNIExtension=false 
</span><span class='line'> -XX:+UseCodeCacheFlushing 
</span><span class='line'> -XX:+UseConcMarkSweepGC 
</span><span class='line'> -XX:SoftRefLRUPolicyMSPerMB=50 
</span><span class='line'> -Xverify:none -Xbootclasspath/a:../lib/boot.jar 
</span><span class='line'> -Djava.net.preferIPv4Stack=true 
</span><span class='line'> -Didea.updates.url=http://dl.google.com/android/studio/patches/updates.xml 
</span><span class='line'> -Didea.patches.url=http://dl.google.com/android/studio/patches/
</span><span class='line'> &lt;/string&gt;
</span><span class='line'>
</span><span class='line'>// 重启 Android Studio</span></code></pre></td></tr></table></div></figure>


<h3>设置Gradle home</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Mac OS X
</span><span class='line'>Use local gradle distribution &gt; Gradle home &gt; /Applications/Android Studio.app/Contents/plugins/gradle</span></code></pre></td></tr></table></div></figure>


<h3>The project is using an unsupported version of Gradle</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>The project is using an unsupported version of Gradle.
</span><span class='line'>Please point to a supported Gradle version in the project's Gradle settings or in the project's Gradle wrapper (if applicable.)
</span><span class='line'>
</span><span class='line'>Consult IDE log for more details (Help | Show Log)</span></code></pre></td></tr></table></div></figure>




<!--more-->


<h3>Error:Error retrieving parent for item: No resource found that matches the given name &lsquo;android:Theme.AppCompat.Light&rsquo;.</h3>

<h3>Project&#8217;X&#8217; is missing required Java project &lsquo;Y&rsquo;</h3>

<p>Solution: Open Java project &lsquo;Y&rsquo;</p>

<h3>Unbound classpath container: &lsquo;Default System Library&rsquo;</h3>

<p>Solution: Eclipse > Preferences > Java > Installed JREs > Add > Standar VM > Select JRE Directory</p>

<p>My Mac JRE Directory is here:/Library/Java/JavaVirtualMachines/jdk1.8.0_11.jdk/Contents/Home/</p>

<h3>Eclipse Can&rsquo;t detect Android Device</h3>

<p>Solution: Disable device&rsquo;s usb debuggin then enable, It then prompted me for authorization for that computer, select ok, and then it worked fine.</p>

<p>Reference:<a href="http://stackoverflow.com/questions/8799982/why-eclipse-can-not-detect-android-device">http://stackoverflow.com/questions/8799982/why-eclipse-can-not-detect-android-device</a></p>

<h3>Unable to resolve target &ldquo;Android-5&rdquo;</h3>

<p>Solution:Android SDK Manager > Android 1.6 (API 4) > Intall</p>

<p>Eclipse > Preferences&hellip; > Android > Apply > OK</p>

<p>Project > Properties > Android > Project Build Target</p>

<h3>error: Error retrieving parent for item: No resource found that matches the given name &lsquo;@android:TextAppearance.Material.SearchResult.Subtitle&rsquo;.</h3>

<p>Solution:Project > Properties > Android > Project Build Target > 21</p>

<p>Reference:<a href="http://stackoverflow.com/questions/26457096/appcompat-v7-r21-returning-error-in-values-xml">http://stackoverflow.com/questions/26457096/appcompat-v7-r21-returning-error-in-values-xml</a></p>

<h3>Android studio Offline document path</h3>

<p>Solution:file:///Users/dongmeiliang/Library/Android/sdk/docs/index.html</p>

<h3>Error:Execution failed for task &lsquo;:app:processDebugManifest&rsquo;. Manifest merger failed : uses-sdk element cannot have a &ldquo;tools:node&rdquo; attribute</h3>

<p>Solution:Add this line to uses-sdk tag like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;uses-sdk
</span><span class='line'>    tools:node="merge"   &lt;----This line do the magic
</span><span class='line'>    android:minSdkVersion="14"
</span><span class='line'>    android:targetSdkVersion="19" /&gt;</span></code></pre></td></tr></table></div></figure>


<p>And add the tools name space in manifest :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;manifest xmlns:android="http://schemas.android.com/apk/res/android"
</span><span class='line'>xmlns:tools="http://schemas.android.com/tools" .....
</span><span class='line'>.../&gt;</span></code></pre></td></tr></table></div></figure>


<p>Reference:<a href="http://stackoverflow.com/questions/26688711/uses-sdk-element-cannot-have-a-toolsnode-attribute">http://stackoverflow.com/questions/26688711/uses-sdk-element-cannot-have-a-toolsnode-attribute</a></p>

<h3>Gradle DSL method not found: &lsquo;runProguard&rsquo;</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Error:(27, 0) Gradle DSL method not found: 'runProguard()'
</span><span class='line'>**Possible causes:
</span><span class='line'>The project 'Atomic4Mobile' may be using a version of Gradle that does not contain the method.
</span><span class='line'>**Gradle settings**
</span><span class='line'>The build file may be missing a Gradle plugin.
</span><span class='line'>**Apply Gradle plugin**</span></code></pre></td></tr></table></div></figure>


<p>Solution:runProguard was renamed to minifyEnabled in version 0.14.0.</p>

<p>Reference:<a href="http://stackoverflow.com/questions/27078075/gradle-dsl-method-not-found-runproguard">http://stackoverflow.com/questions/27078075/gradle-dsl-method-not-found-runproguard</a></p>

<h3>error “Library projects cannot set applicationId”</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Error: Library projects cannot set applicationId. applicationId is set to 'com.super.app' in default config.</span></code></pre></td></tr></table></div></figure>


<p>Solution:Removing applicationId variable from the library&rsquo;s build.gradle file should resolve the issue.</p>

<p>Reference:<a href="http://stackoverflow.com/questions/27374933/android-studio-1-0-and-error-library-projects-cannot-set-applicationid">http://stackoverflow.com/questions/27374933/android-studio-1-0-and-error-library-projects-cannot-set-applicationid</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[App如何与Server安全交互]]></title>
    <link href="http://DamianSheldon.github.io/blog/how-does-app-security-communicate-with-server.html/"/>
    <updated>2014-12-15T11:53:11+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/how-does-app-security-communicate-with-server</id>
    <content type="html"><![CDATA[<p>大多数App都需和Server通信来提供服务，这中间就牵涉到网络通信安全。网络通信安全是一个很大的话题，本文不打算全面覆盖，而是来理理HTTPS。</p>

<p>移动设备可能会处于不安全的网络环境中，比如连接了某个公共热点，攻击者不需要访问设备，只需访问设备所在的网络，就能获取到用户信息，所以，当应用中用户的信息需要保护时，开发者需要保证通信的安全性。</p>

<p>最简单直接的解决办法是采用HTTPS,在web服务器上安装一个自签名证书，启用HTTPS,然后对NSURLConnection进行配置以接受该自签名证书。</p>

<p>HTTPS是如何做到通信安全的呢？答案是TLS/SSL协议。TLS(Transport Layer Security)/SSL(Secure Socket  Layer)协议是专门为解决网络通信安全设计的。它的基石是非对称加密。</p>

<p>TLS/SSL链路中的数据是加密的，客户端给服务器发送的数据是用服务器的公钥加密的，由于非对称加密的数学特性，只有拥有私钥的服务器才能正确解密数据。服务器给客户端发送的数据则是用自己的私钥加密的，客户端用公钥解密。</p>

<p>那么我们如何判断服务器发给我们的公钥是值得信任的呢？通常商业网站的数字证书都是由中级证书或根证书来签名，而根证书是一开始就内置在设备中，不是通过网络交换的，这样当某个服务器声明说我是某某，我们可以通过证书链来判断真伪。</p>

<p>根证书其实是一个自签名证书，我们的应用也可以用自签名证书来确保网络通信安全，还可以省掉很大一笔证书费用，只要私钥足够安全，它甚至比商业证书更安全。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS App State Preservation and Restoration]]></title>
    <link href="http://DamianSheldon.github.io/blog/ios-app-state-preservation-and-restoration.html/"/>
    <updated>2014-12-08T11:55:48+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/ios-app-state-preservation-and-restoration</id>
    <content type="html"><![CDATA[<ol>
<li>什么是State Preservation and Restoration？</li>
<li>为什么要用State Preservation and Restoration？</li>
<li>如何使用State Preservation and Restoration？</li>
</ol>


<h3>什么是State Preservation and Restoration？</h3>

<p>State Preservation and Restoration组成UIKit的state preservation system，它提供简单而灵活的架构来保存和恢复应用的视图控制器和视图。</p>

<h3>为什么要用State Preservation and Restoration？</h3>

<blockquote><p>Even if your app supports background execution, it cannot run forever. At some point, the system might need to terminate your app to free up memory for the current foreground app. However, the user should never have to care if an app is already running or was terminated. From the user’s perspective, quitting an app should just seem like a temporary interruption. When the user returns to an app, that app should always return the user to the last point of use, so that the user can continue with whatever task was in progress. This behavior provides a better experience for the user and with the state restoration support built in to UIKit is relatively easy to achieve.</p></blockquote>

<p>即使你的应用支持后台运行，它也不可能一直运行。某个时刻，系统也许需要终止你的应用为当前应用释放内存。然而，用户应该永远不用关心应用是已经运行或终止。从用户的角度来看，退出应用应该就像暂时的中断。当用户回到应用，它应该回到上次使用的状态，以便用户能继续任何正在进行的任务。这种行为为用户提供了更好的体验，UIKit内置了这种状态恢复支持很容易就能实现。</p>

<!-- more -->


<h3>如何使用State Preservation and Restoration？</h3>

<p>State Restoreation成功的前提条件如下： <br/>
1. <strong>状态保留必须成功。</strong>也就是说应用终止前必须进入后台运行状态。 <br/>
2. <strong>应用不可以强制退出。</strong> <br/>
3. <strong>从最近一次状态保留开始，应用必须没有启动失败过。</strong></p>

<p>Checklist for Implementing State Preservation and Restoration</p>

<ol>
<li>(Required) Implement the <code>application:shouldSaveApplicationState:</code> and <code>application:shouldRestoreApplicationState:</code>methods in your app delegate;</li>
<li>(Required) Assign restoration identifiers to each view controller you want to preserve by assigning a non empty string to their <code>restorationIdentifier</code> property;If you want to save the state of specific views too, assign non empty strings to their <code>restorationIdentifier</code> properties;</li>
<li>(Required) Show your app’s window from the <code>application:willFinishLaunchingWithOptions:</code> method of your app delegate. The state restoration machinery needs the window so that it can restore scroll positions and other relevant bits of your app’s interface.</li>
<li>Assign restoration classes to the appropriate view controllers. (If you do not do this, your app delegate is asked to provide the corresponding view controller at restore time.)</li>
<li>(Recommended) Encode and decode the state of your views and view controllers using the <code>encodeRestorableStateWithCoder:</code> and <code>decodeRestorableStateWithCoder:</code> methods of those objects;</li>
<li>Encode and decode any version information or additional state information for your app using the <code>application:willEncodeRestorableStateWithCoder:</code> and <code>application:didDecodeRestorableStateWithCoder:</code> methods of your app delegate;</li>
<li>Objects that act as data sources for table views and collection views should implement the <strong>UIDataSourceModelAssociation</strong> protocol. Although not required, this protocol helps preserve the selected and visible items in those types of views.</li>
</ol>


<h3>注意事项</h3>

<div style="text-align: center" markdown="1">

    <img name="state_vc_caveats_2x" src="http://DamianSheldon.github.io/images/state_vc_caveats_2x.png" width="594" height="862">

</div>


<p>上图有颜色的视图控制器的状态是不会被保存和恢复的。</p>

<h3>Reference</h3>

<p>App Programming Guide for iOS</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何创建自定义的Xcode 6 工程模板]]></title>
    <link href="http://DamianSheldon.github.io/blog/how-to-creating-custom-xcode-6-project-templates.html/"/>
    <updated>2014-12-05T14:34:04+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/how-to-creating-custom-xcode-6-project-templates</id>
    <content type="html"><![CDATA[<p>使用Xcode 6新建工程时，Apple准备了好些模板，这些模板写个Demo还是没有问题的，但是用来组织项目文件还是太弱了，所以情况经常是不得不每次去新建各种目录，这种重复性的劳动一来乏味，二来浪费时间。那么我们能不像创建自己的模板呢？这样新建的工程就能按自己的想法包含各种目录和文件。好消息是可以，坏消息是Apple没有提供相应的文档。虽然没有文档，还是试着来创建一个模板，每次都重复实在太烦（就是这么任性）。</p>

<p>既然没有文档，我们就把Apple的模板复制一份，在它的基础上修改成我们需要的样子。<strong>/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/Xcode/Templates/Project\ Templates/iOS/Application/</strong>有iOS所有工程模板。用户自定义的模板建议放到<strong>~/Library/Developer/Xcode/Templates/</strong>，目录如果不存在就创建。模板至少要包含两部分：一是扩展名为<strong>.xctemplate</strong>的文件夹；二是名称为<strong>TemplateInfo.plist</strong>的属性列表文件。好了，我们来创建一个自定义模板：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Step 1:
</span><span class='line'>$ mkdir ~/Library/Developer/Xcode/Templates/CocoaBite.xctemplate/
</span><span class='line'>
</span><span class='line'>// Step 2:
</span><span class='line'>$ cp /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/Xcode/Templates/Project\ Templates/iOS/Application/Single\ View\ Application.xctemplate/* ~/Library/Developer/Xcode/Templates/CocoaBite.xctemplate/
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>现在我们有了一个和Single View Application一样的模板，但这和我们目标还相差很远。接下来我们要做就是修改<strong>TemplateInfo.plist</strong>，让模板为我们做更多准备工作。</p>

<table>
<thead>
<tr>
<th></th>
<th> Keys </th>
<th> Advice </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> Ancestors   </td>
<td> No          | Import settings from another Project Template.</td>
</tr>
<tr>
<td></td>
<td> Concrete    </td>
<td> Recommended | Visible or hide Template form New Project Window.</td>
</tr>
<tr>
<td></td>
<td> Definitions </td>
<td> No          | Work with workplace. Can write to file example source code.</td>
</tr>
<tr>
<td></td>
<td> Description </td>
<td> Recommended | New Project Window &ndash; Project Template Description.</td>
</tr>
<tr>
<td></td>
<td> Identifier  </td>
<td> Yes         | Project Template Unique Identifier.</td>
</tr>
<tr>
<td></td>
<td> Kind        </td>
<td> Yes         | XCode Template Kind. Project or File.</td>
</tr>
<tr>
<td></td>
<td> Nodes       </td>
<td> Recommended | Create or Copy Files to Project. Copy works</td>
</tr>
<tr>
<td></td>
<td> Options     </td>
<td> Recommended | New Project Wizard >> Choose Options for Project. Add Text Fields, Combo Boxes.</td>
</tr>
<tr>
<td></td>
<td> Platforms   </td>
<td> Recommended | Set Platform.</td>
</tr>
<tr>
<td></td>
<td> Project     </td>
<td> Yes         | Set Project Build Settings.</td>
</tr>
<tr>
<td></td>
<td> Targets     </td>
<td> Recommended | Set Build Settings, Build Phases for Targets. Link Libraries.</td>
</tr>
</tbody>
</table>


<p>上面列出了TemplateInfo.plist大部分键，详细介绍在<a href="https://snipt.net/yonishin/about-xcode-4-project-template/">这里</a>。</p>

<p>我自己新建的模板主要用到Definitions和Nodes，它们俩组合起来可以控制模板会新建哪些文件。例如我想让模板包含Models目录：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Step 1:
</span><span class='line'>$ cd ~/Library/Developer/Xcode/Templates/CocoaBite.xctemplate/
</span><span class='line'>
</span><span class='line'>// Step 2:
</span><span class='line'>$ mkdir -p Models
</span><span class='line'>
</span><span class='line'>// Step 3: 编辑TemplateInfo.plist 如下图所示。
</span></code></pre></td></tr></table></div></figure>




<div style="text-align: center" markdown="1">

    <img name="PropertyList" src="http://DamianSheldon.github.io/images/PropertyList.png" width="623" height="836">

</div>


<p>完整的模板放在<a href="https://github.com/DamianSheldon/Xcode-6-Project-Templates">这里</a>。</p>

<h2>Reference</h2>

<p><a href="http://meandmark.com/blog/2011/12/creating-custom-xcode-4-project-templates/">Creating Custom Xcode 4 Project Templates</a><br/>
<a href="https://snipt.net/yonishin/about-xcode-4-project-template/">About XCode 4 Project Template (How To Create Custom Project Template)</a><br/>
<a href="https://github.com/reidmain/Xcode-6-Project-Templates">Xcode-6-Project-Templates</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[英语句子结构]]></title>
    <link href="http://DamianSheldon.github.io/blog/english-sentence.html/"/>
    <updated>2014-11-27T20:19:06+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/english-sentence</id>
    <content type="html"><![CDATA[<p>英语的基本语序是SVO(Subject-Verbe-Object),且基本上不能任意变换语序，除了在少数诗词以外；另一方面，有时英语会使用OSV(Object-Subject-Verbe)的语序。它有6大句型：</p>

<ol>
<li>SV (S:subject,V: verbal phrase)主语+谓语</li>
<li>SVP (P:predicative)主语+谓语+表语</li>
<li>SVO (O:object)主语+谓语+宾语</li>
<li>SVOiOd 主语+谓语+直接宾语+间接宾语</li>
<li>SVOC(C:complement) 主语+谓语+宾语+补语</li>
<li>There＋系动词＋主语</li>
</ol>


<h3>SV (S:subject,V: verbal phrase)主语+谓语</h3>

<p>John sleeps.<br/>
Jill is eating.<br/>
Jack will arrive next week.<br/>
The tlephone rang.<br/>
His father might have died.<br/>
Sandy walks in the playground evening.<br/>
He never gives up easily.<br/>
The children listened carefully.<br/>
Our Manager has arrived in pairs.<br/>
The water in the jar has ran out.<br/>
My brother will talk on the phone.<br/>
Mummy won&rsquo;t agree.</p>

<!-- more -->


<h3>SVP (P:predicative)主语+谓语+表语</h3>

<p>The plan sounds perfect.<br/>
Frank is an artist.<br/>
John runs too slowly.<br/>
I am a student.<br/>
The story sounds boring.<br/>
The parcel feels soft.<br/>
The candy tastes sweet.<br/>
The girl seems interested in the film.<br/>
He appears a normal person perfectly.<br/>
Dinner smells good.<br/>
My son has grown almost an inch in the past month.<br/>
The strong fellow has suddenly fallen ill.<br/>
The tiger got more and more angry.<br/>
The weather has turned cold and windy.</p>

<h3>SVO (O:object)主语+谓语+宾语</h3>

<p>I saw a bird.<br/>
My sister enjoyed the plan.<br/>
Father phones me. <br/>
I finished work at 6 p.m.<br/>
He draws a picture every morning.<br/>
The family sing a song in concert every year.<br/>
I saw a dog in the garden just now.<br/>
They built the house three years ago.<br/>
They stopped talking.<br/>
Both sides agree to discuss it next time.<br/>
They&rsquo;ve put up a tent in open air.<br/>
The nurses have taken good care of these old people.<br/>
Mary will find the truth soon.</p>

<h3>SVOiOd 主语+谓语+直接宾语+间接宾语</h3>

<p>The lady gave jack a watch.<br/>
My father bought me a bicycle.<br/>
When waiting in the queue, show me your ID card, please.<br/>
Get me my coat, please.<br/>
She ask me a question/a question of me.<br/>
He give me a case/a case to me.<br/>
My brother bought me some money/some money to me.<br/>
He offered me a seat/ a seat to me.<br/>
They allow me three days to do the work.<br/>
Throw me a towel, please.<br/>
She cooked herself a meal.<br/>
I&rsquo;ll choose you some books.<br/>
My wife has ordered me a new suit.<br/>
Please sing us a folk song.</p>

<h3>SVOC(C:complement) 主语+谓语+宾语+补语</h3>

<p>They called him a fool.<br/>
She found the children fast sleep.</p>

<h3>There＋系动词＋主语</h3>

<p>There is a man. <br/>
There are three apples on the table.<br/>
There are many types of businesses in a free-market economy.</p>

<p>那么主语、谓语&hellip;分别是什么呢？它们分别可以由哪些元素充当呢？下一篇我们来梳理下这个知识点。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[英语起步]]></title>
    <link href="http://DamianSheldon.github.io/blog/english-basic.html/"/>
    <updated>2014-11-26T22:01:08+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/english-basic</id>
    <content type="html"><![CDATA[<p>如果从初中开始算起自己接触英语已十多年了，但很遗憾直到今天我对自己写出的英语句子是否有语法错误是不自信的，所以我打算按自己理解的方法梳理总结下英语语法。</p>

<p>C语言中有个概念叫宏，当程序预编译时，宏会被替换成原来复杂的样子，我打算按这种思路来梳理英语语法。一篇文章由若干句子组成，句子由单词和标点符号按语言发展过程形成的规则组成，这样看来语法的重点就是句子。</p>

<p>既然如此，那么英语的句子的基本结构有哪些？英语的构词法是怎样的？标点符号有哪些？它们该如何使用？后续的文章会按照这种总分的结构来展开。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS App Cache]]></title>
    <link href="http://DamianSheldon.github.io/blog/ios-app-cache.html/"/>
    <updated>2014-11-25T16:36:04+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/ios-app-cache</id>
    <content type="html"><![CDATA[<p>在互联网时代的今天，iOS App几乎都要联网，缓存可以解决网络连接不良甚至无网络所造成的性能问题，而且还可以节约用户的流量。我们可以采用两种缓存策略：预缓存和按需缓存。预缓存就是应用启动以后开个后台线程去把需要用到的数据先取下来。按需缓存就是应用请求网络数据后在本地保存一份，只要本地数据没有过期就使用本地数据。</p>

<h3>预缓存</h3>

<p>实现预缓存可能需要一个后台线程访问数据并以有意义的格式保存，以便本地缓存无需连接服务器即可被编辑。Core Data(或者任何结构化存储)是实现这种缓存的一种方式。</p>

<h3>按需缓存</h3>

<p>按需缓存工作原理类似于浏览器缓存，它允许我们查看以前访问过的内容，主要有四种实现方法：</p>

<ol>
<li>URL缓存；</li>
<li>数据模型缓存；</li>
<li>Core Data;</li>
<li>SQLite。</li>
</ol>


<p>上述的序号是推荐使用的顺序。</p>

<h4>URL缓存</h4>

<p>如果服务器设计得体，遵循HTTP 1.1的缓存规范时，URL缓存效果最好，通常网络库会提供支持。</p>

<!-- more -->


<h4>数据模型缓存</h4>

<p>数据模型缓存是把模型对象用NSKeyedArchiver归档，模型类需要实现NSCoding协议。</p>

<p>使用数据模型缓存时，有个小技巧，可以为它创建内存缓存。这样有两点好处：一是可以延长闪存的使用寿命；二是可以略微提高性能。</p>

<h4>Core Data</h4>

<p>使用Core Data进行按需缓存，需要权衡Core Data的复杂度是否值得。</p>

<h4>SQLite</h4>

<p>使用SQLite时，要注意当前的二进制包是否是线程安全的。</p>

<h2>Reference</h2>

<p>iOS 6 Programming Push the Limits</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode 调试技巧（持续更新）]]></title>
    <link href="http://DamianSheldon.github.io/blog/xcode-debug-tips.html/"/>
    <updated>2014-11-24T17:14:52+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/xcode-debug-tips</id>
    <content type="html"><![CDATA[<p>iOS App开发过程中不可避免地遇到程序崩溃的问题。当程序崩溃时，我们首先要找到它崩溃的原因。一旦找到原因，问题就容易解决了。Xcode Debugger是查找崩溃原因的有利工具，我们应该学会熟练使用它，迅速解决问题，节约宝贵的开发时间。</p>

<h3>崩溃在main( )</h3>

<p>添加Exception Breakpoint</p>

<p>Project > Breakpoint navigator > +（Bottom left）> Add Exception Breakpoint</p>

<h3>符号断点</h3>

<p>符号断点是我们验证某个方法是否被调用的一种方法。添加方法：</p>

<p>Project > Breakpoint navigator > +（Bottom left）> Add Symbolic Breakpoint</p>

<p>例如：<code>application:DidFinishLaunchingWithOptions:</code>。</p>

<h3>打印方法名</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSLog(@"%s", __PRETTY_FUNCTION__);
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>控制台打印</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(lldb) p // 打印标量变量
</span><span class='line'>(lldb) p (int)self.myAge
</span><span class='line'>(lldb) p (CGPoint)self.view.center
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>(lldb) po // 打印对象
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<h3>打印异常信息</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/*
</span><span class='line'>The symbol $eax refers to one of the CPU registers.    
</span><span class='line'>In the case of an exception,   
</span><span class='line'>this register will contain a pointer to the NSException object.   
</span><span class='line'>Note: $eax only works for the simulator,   
</span><span class='line'>if you’re debugging on the device you’ll need to use register $r0.  
</span><span class='line'>*/
</span><span class='line'>// Simulator
</span><span class='line'>
</span><span class='line'>(lldb) po [$eax class]
</span><span class='line'>
</span><span class='line'>(lldb) po [$eax name]
</span><span class='line'>
</span><span class='line'>(lldb) po [$eax reason]
</span><span class='line'>
</span><span class='line'>// Real Device
</span><span class='line'>(lldb) po $r0</span></code></pre></td></tr></table></div></figure>


<h3>输出View结构</h3>

<p>任意时刻暂停App，在lldb中输入:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(lldb) po [[[[UIApplication sharedApplication] delegate] window] recursiveDescription]
</span></code></pre></td></tr></table></div></figure>


<h3>SIGABRT</h3>

<p>SIGABRT:SIGNAL ABORT(中止信号)。通常可以让程序继续运行，之后会输出些有助于定位问题的信息。</p>

<h3>EXC_BAD_ACCESS</h3>

<p>它出现的原因是因为访问一个已经释放的对象或向它发送消息。通常可以开启Zombie Objects(Toolbar > Edit Scheme&hellip; > Run > Diagnostics > Enabled Zombie Objects)重新运行程序以定位问题。</p>

<p>Note that you shouldn’t leave Zombie Objects enabled all the time. Because this tool never deallocates memory, but simply marks it as being undead, you end up leaking all over the place and will run out of free memory at some point. So only enable Zombie Objects to diagnose a memory-related error, and then disable it again.</p>

<p>Enabled Zombie Objects后，控制台通常会打印出<code>*** -[CFNumber respondsToSelector:]: message sent to deallocated instance 0x31ab5cfe0</code>类似的信息，那么问题来了，我们怎么知道0x31ab5cfe0是哪个对象？</p>

<p>Apple Memory Usage Performace Guidelines中介绍了记录内存分配历史的方法，简述如下：</p>

<ol>
<li>设置环境变量： MallocStackLogging，MallocStackLoggingNoCompact为1；</li>
</ol>


<div style="text-align: center" markdown="1">

    <img name="Environment" src="http://DamianSheldon.github.io/images/Environment.png" width="448" height="252">

</div>




<div style="text-align: center" markdown="1">

    <img name="Zombie" src="http://DamianSheldon.github.io/images/Zombie.png" width="448" height="252">

</div>


<ol>
<li>使用malloc_history命令找到相应的对象。</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>malloc_history &lt;pid/partial-process-name&gt; [options] &lt;mode&gt; [&lt;address&gt; ...]
</span><span class='line'>
</span><span class='line'>// pid/partial-process-name是当前上下文NSLog输出时的前面[]的对应数字
</span><span class='line'>2014-12-02 14:44:39.355 srsApp[7946:300216] selector:0x1014d70b3, jsonValue:0x31a896fd0
</span><span class='line'>
</span><span class='line'>malloc_history 5968/224511 0x2d9e23fe0 | grep "0x2d9e23fe0"。</span></code></pre></td></tr></table></div></figure>




<div style="text-align: center" markdown="1">

    <img name="Malloc_history" src="http://DamianSheldon.github.io/images/Malloc_history.png" width="720" height="106">

</div>


<p>Reference:</p>

<p>Memory Usage Performace Guidelines <br/>
iOS 6 Programming Pushing the Limits<br/>
<a href="http://www.raywenderlich.com/10209/my-app-crashed-now-what-part-1">My App Crashed, Now What? – Part 1</a>  <br/>
<a href="http://www.raywenderlich.com/10505/my-app-crashed-now-what-part-2">My App Crashed, Now What? – Part 2</a><br/>
<a href="http://www.raywenderlich.com/28289/debugging-ios-apps-in-xcode-4-5">Intermediate Debugging with Xcode 4.5</a>   <br/>
<a href="http://www.iwangke.me/2013/01/15/xcode-debugging-tips/">Xcode调试技巧</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS App 数据持久化]]></title>
    <link href="http://DamianSheldon.github.io/blog/ios-app-data-persistence.html/"/>
    <updated>2014-11-13T15:06:25+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/ios-app-data-persistence</id>
    <content type="html"><![CDATA[<p>数据的持久化就是让数据能够持久的保存，实现它的方法有两种：云端和本地。本文试着简单总结本地持久化的方法。</p>

<p>本地持久化其实就是将数据保存到闪存，那么我们应该用什么方法保存，又应该保存在哪呢？</p>

<h2>文件系统基础</h2>

<p>在OS X和iOS中，文件系统处理数据文件，应用程序和操作系统本身相关文件的持久存储。
我们要知道把数据保存到哪，就要知道些iOS文件系统的知识。</p>

<p>iOS应用和文件系统的交互基本上仅限于它沙盒内目录。新应用安装过程中，安装程序为应用创建了数个容器。每个容器有个特定的角色。The bundle container holds the app’s bundle, whereas the data container holds data for both the application and the user. The data container is further divided into a number of directories that the app can use to sort and organize its data. The app may also request access to additional containers—for example, the iCloud container—at runtime.</p>

<p>这些容器构成了应用文件系统的基本面。下图是应用沙盒的示意图。</p>

<div style="text-align:center" markdown="1">

<img name="ios_app_layout_2x" src="images/ios_app_layout_2x.png" width="383" height="417">

</div>




<!-- more -->


<p>iOS应用常用的目录列表：</p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> Directory </th>
<th align="left"> Description </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> AppName.app </td>
<td align="left"> This is the app’s bundle</td>
</tr>
<tr>
<td></td>
<td align="left"> Documents/ </td>
<td align="left"> Use this directory to store user-generated content.</td>
</tr>
<tr>
<td></td>
<td align="left"> Documents/Inbox </td>
<td align="left"> Use this directory to access files that your app was asked to open by outside entities.</td>
</tr>
<tr>
<td></td>
<td align="left"> Library/ </td>
<td align="left"> This is the top-level directory for any files that are not user data files.</td>
</tr>
<tr>
<td></td>
<td align="left"> tmp/ </td>
<td align="left"> Use this directory to write temporary files that do not need to persist between launches of your app.</td>
</tr>
</tbody>
</table>


<h3>数据的建议存储位置</h3>

<p>限于篇幅，关于应用的数据应该放到哪，可以查阅<strong>File System Programming Guide</strong> > <strong>File System Basics</strong> > <strong>About the iOS File System</strong> > <strong>Where You Should Put Your App’s Files</strong>。</p>

<h3>数据持久化的方法</h3>

<ol>
<li>NSUserDefaults;</li>
<li>Property Lists;</li>
<li>Archive;</li>
<li>数据库;</li>
<li>Core Data。</li>
</ol>


<h4>NSUserDefaults</h4>

<p>NSUserDefaults类提供与默认系统交互的程序接口。默认系统允许应用去自定义它的行为来符合用户的偏好。所以它主要是用来存储些配置信息。
它支持的数据类型有：floats，doubles，integers，Booleans，URLs，NSData，NSString，NSNumber，NSDate，NSArray和NSDictionary。如果还想存储其他类型的对象，需要使用NSData对它们进行归档。</p>

<h4>Property Lists</h4>

<p>当我们的需要持久化的数据量在几百KB内时，property list为我们提供了统一而方便的方法持久化数据。如果我们对象的全由NSDictionary, NSArray, NSString, NSDate, NSData, 或NSNumber类派生，我们可以创建property list。事实上，NSUserDefaults就是把数据保存在property list中。</p>

<p>Property list有三种存储方式：XML, binary format, &ldquo;old-style&rdquo; ASCII format inherited from OpenStep。old-style format的序列化API是只读的。</p>

<p>XML property list比binary格式的可移植性好，可以手动编辑，但是binary property lists兼容性好，需要的存储空间少，读写速度要优于XML property lists。通常来说，如果你的property list相对较小，XML property lists的优点会战胜它相对binary property lists的I/O速度，难兼容的缺点。如果你有大量数据，binary property lists, keyed archives，或自定义数据格式会是更好的解决方案。</p>

<h4>Archive</h4>

<p>Archives提供了一种把对象和值转成结构独立的字节流，它保留了对象与值，以及对象与对象的关系信息。</p>

<p>Cocoa archives可以持有Objective-c对象，标量，数组，结构体和字符串。它不能持有和平台相关的类型，例如union, void *, function pointers, 和long chains of pointers。</p>

<p>对象写入archive和从archive读出是使用coder对象。Coder对象是抽象类NSCoder具体子类的实例。它通过给对象发送NSCoding协议定义的encodeWithCoder: 和initWithCoder:方法分别写入或读出archiver。只有支持NSCoding协议的对象才能写入archiver。</p>

<h4>数据库</h4>

<p>iOS中有了以上数据持久化方法，我们为什么还需要数据库？</p>

<p>目前在iOS App开发中，SQLite是个不错的选择。</p>

<hr />

<p>SQLite</p>

<blockquote><p>SQLite is an in-process library that implements a self-contained, serverless, zero-configuration, transactional SQL database engine.</p></blockquote>

<p>SQLite在众多数据库中脱颖而出，目前是个不错的选择，但由于它是C接口，操作略显繁琐，就有了很多对它的封装，FMDB是个不错的选择。</p>

<h4>Core Data</h4>

<p>Core Data是Apple为我们提供的一种持久化方法，比较强大也比较复杂。</p>

<h1>Reference</h1>

<p>File System Programming Guide <br/>
Property List Programming Guide   <br/>
Archives and Serializations Programming Guide  <br/>
<a href="http://www.infoq.com/cn/articles/data-storage-in-ios">对比iOS中的四种数据存储</a>  <br/>
<a href="http://www.cnblogs.com/kenshincui/p/3885689.html#archiver">IOS开发系列—Objective-C之Foundation框架</a>  <br/>
<a href="http://www.cnblogs.com/kenshincui/p/4077833.html">iOS开发系列&mdash;数据存取</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Key-Value Coding &amp; Key-Value Observing]]></title>
    <link href="http://DamianSheldon.github.io/blog/key-value-coding-and-key-value-observing.html/"/>
    <updated>2014-11-12T16:06:13+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/key-value-coding-and-key-value-observing</id>
    <content type="html"><![CDATA[<h2>Key-Value Coding</h2>

<ol>
<li>Key-Value Coding是什么？</li>
<li>为什么要用Key-Value Coding？</li>
<li>如何使用Key-Value Coding?</li>
</ol>


<h3>Key-Value Coding是什么？</h3>

<blockquote><p>Key-value coding is a mechanism for accessing an object’s properties indirectly, using strings to identify properties, rather than through invocation of an accessor method or accessing them directly through instance variables.</p></blockquote>

<p>Key-value coding是一种间接访问对象属性和机制，使用字符串去区别属性，而不是通过调用存取方法或者通过实例变量直接访问它们。</p>

<h3>为什么要用Key-Value Coding？</h3>

<ol>
<li>Scripting（OS X）;</li>
<li>简化代码和提高灵活性；</li>
</ol>


<h3>如何使用Key-Value Coding?</h3>

<p>Key-value coding支持对象属性，也可以是标量类型和结构体。在开始使用之前，我们先熟悉些下key-value coding术语，后文我们用术语来阐述，方便交流。</p>

<p>除了重载现有的术语，key-value coding定义了些专属的术语。</p>

<p>Key-value coding可以被用来访问三种不同的类型的对象值：<strong>attributes</strong>, <strong>to-one relationships</strong>, 和<strong>to-many relationships</strong>。术语<strong>property</strong>指三种类型值的任意一种。</p>

<p>attribute是简单值的property，像标量，字符串，或者布尔值。NSNumber和其他的不可变类型如NSColor也都被认为是attributes。</p>

<p>to-one relationship是拥有自己properties的对象。这些内部的properties可以改变而对象却不变。例如，NSView实例的superview就是to-one relationship。</p>

<p>to-many relationship包括一个相关对象的集合。NSArray或NSSet经常被用来持有这样一个集合。但是，key-value coding允许你使用自定义的类作为集合并且通过实现在to-many Properties中讨论的key-value coding存取方法仍然可以可以像它们是NSArray或NSSet那样访问它们。</p>

<p>既然key-value coding是一种间接访问对象属性的机制，访问就包括存取。</p>

<!-- more -->


<h4>使用key-value coding读取attribute值</h4>

<p>NSKeyValueCoding中定义的的attribute读取方法有：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (id)valueForKey:(NSString *)key;
</span><span class='line'>
</span><span class='line'>- (NSMutableArray *)mutableArrayValueForKey:(NSString *)key;
</span><span class='line'>
</span><span class='line'>- (id)valueForKeyPath:(NSString *)keyPath;
</span><span class='line'>
</span><span class='line'>- (NSMutableArray *)mutableArrayValueForKeyPath:(NSString *)keyPath;
</span><span class='line'>
</span><span class='line'>- (NSDictionary *)dictionaryWithValuesForKeys:(NSArray *)keys;
</span><span class='line'>
</span><span class='line'>- (id)valueForUndefinedKey:(NSString *)key;
</span></code></pre></td></tr></table></div></figure>


<h4>使用key-value coding存储attribute值</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)setValue:(id)value forKey:(NSString *)key;
</span><span class='line'>
</span><span class='line'>- (NSMutableSet *)mutableSetValueForKey:(NSString *)key;
</span><span class='line'>
</span><span class='line'>- (void)setValue:(id)value forKeyPath:(NSString *)keyPath;
</span><span class='line'>
</span><span class='line'>- (NSMutableSet *)mutableSetValueForKeyPath:(NSString *)keyPath;
</span><span class='line'>
</span><span class='line'>- (void)setValue:(id)value forUndefinedKey:(NSString *)key;
</span><span class='line'>
</span><span class='line'>- (void)setNilValueForKey:(NSString *)key;
</span><span class='line'>
</span><span class='line'>- (void)setValuesForKeysWithDictionary:(NSDictionary *)keyedValues;
</span></code></pre></td></tr></table></div></figure>


<p>你需要考虑一个额外的问题就是当你尝试设置非对象的property为nil。这种情况下，接收者给它自己发送一个setNilValueForKey:消息。它默认的实现是抛出NSInvalidArgumentException异常。你的应用可以覆盖这个方法替换默认值或标记值，然后你用新值调用setValue:forKey:。</p>

<p>现在，我们知道怎么用key-value coding去间接访问对象的property了。但是，如果想让我们自定义的类的property也支持key-value coding的话，我们应该怎么做呢？</p>

<h4>如何让自定义类的属性支持key-value coding?</h4>

<blockquote><p>Key-value coding attempts to use accessor methods to get and set values, before resorting to directly accessing the instance variable.</p></blockquote>

<p>在依靠直接访问实例变量之前，key-value coding尝试使用存取方法去访问和设置值。也就是说我们最好实现相应的存取方法，至少也要存在合适的实例变量。</p>

<p>前面提到key-value coding支持三个类型的attribute,针对三种类型的attribute,key-value coding分别是怎么来搜索存取方法和实例变量的呢？</p>

<ol>
<li>简单attributes存取方法搜索模式；</li>
<li>顺序集合存取方法的搜索模式；</li>
<li>唯一顺序集合存取方法的搜索模式；</li>
<li>无序集合存取方法的搜索模式。</li>
</ol>


<p>搜索的细节可以查阅Key-Value Coding Programming Guide。</p>

<h2>Key-Value Observing</h2>

<ol>
<li>Key-Value Observing是什么？</li>
<li>为什么要用Key-Value Observing？</li>
<li>如何使用Key-Value Observing?</li>
</ol>


<h3>Key-Value Observing是什么？</h3>

<blockquote><p>Key-value observing is a mechanism that allows objects to be notified of changes to specified properties of other objects.</p></blockquote>

<p>Key-value observing是一种允许一对对象的特定属性改变时另一个对象被通知的机制。</p>

<h3>为什么要用Key-Value Observing？</h3>

<p>KVO的主要好处是你不需要实现一套属性每次改变发送通知的机制。</p>

<h3>如何使用Key-Value Observing?</h3>

<ol>
<li>Registering as an Observer;</li>
<li>Receiving Notification of a Change;</li>
<li>Removing an Object as an Observer.</li>
</ol>


<p>同样，自定义的类如何才能让其他的开发者能使用KVO呢？我们要做的是符合KVO标准。</p>

<h4>KVO Compliance</h4>

<ul>
<li>The class must be <strong>key-value coding compliant</strong> for the property, as specified in <strong>Ensuring KVC Compliance</strong> in <strong>Key-Value Coding Programming Guide</strong>.</li>
<li>The class emits KVO change notifications for the property.</li>
<li>Dependent keys are registered appropriately (see <strong>Registering Dependent Keys</strong>).</li>
</ul>


<hr />

<p>There are two techniques for ensuring the change notifications are emitted. Automatic support is provided by NSObject and is by default available for all properties of a class that are key-value coding compliant. Typically, if you follow standard Cocoa coding and naming conventions, you can use automatic change notifications—you don’t have to write any additional code.</p>

<p>Manual change notification provides additional control over when notifications are emitted, and requires additional coding. You can control automatic notifications for properties of your subclass by implementing the class method automaticallyNotifiesObserversForKey:.</p>

<hr />

<h4>One more thing</h4>

<p>Key-Value Observing Implementation Details</p>

<p>Automatic key-value observing is implemented using a technique called <strong>isa-swizzling</strong>.</p>

<p>The <strong>isa</strong> pointer, as the name suggests, points to the object&rsquo;s class which maintains a dispatch table. This dispatch table essentially contains pointers to the methods the class implements, among other data.</p>

<p>When an observer is registered for an attribute of an object the isa pointer of the observed object is modified, pointing to an intermediate class rather than at the true class. As a result the value of the isa pointer does not necessarily reflect the actual class of the instance.</p>

<p>You should never rely on the <strong>isa</strong> pointer to determine class membership. Instead, you should use the <strong>class</strong> method to determine the class of an object instance.</p>

<p>So how does <strong>class</strong> method determine the class of an object?</p>

<h1>Reference</h1>

<p>Key-Value Coding Programming Guide <br/>
Key-Value Observing Programming Guide</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(翻译)iOS 设计模式]]></title>
    <link href="http://DamianSheldon.github.io/blog/ios-design-patterns.html/"/>
    <updated>2014-11-10T08:35:43+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/ios-design-patterns</id>
    <content type="html"><![CDATA[<p>iOS设计模式&mdash;你也许听说过这个术语，但是你知道它意味着什么吗？尽管大多数开发者可能同意设计模式非常重要，但关于它的文章并不多，咱们开发者们写代码时并没有花大多注意力放到设计模式上。</p>

<p>在软件设计中设计模式是对常见问题的可复用的解决方法。他们被设计成模板帮助你写出容易理解和复用的代码。他们也帮助你写出低藕合的代码以便你不需要太多争论就能改变或替换你代码的组件。</p>

<p>如果你刚刚接触设计模式，告诉你些好消息！首先，你已经使用过很多设计模式，这得感谢Cocoa建立的方式以及你被鼓励使用的最佳实践。其次，这篇教程将让你掌握iOS的主要（次要）设计模式，它们在Cocoa中很常用。</p>

<p>教程分成多个部分，每部分包含一种设计模式。在每部分，你会看到如下顺序的解释：</p>

<ul>
<li>该设计模式是什么；</li>
<li>你为什么应该使用它；</li>
<li>如何使用它，以及什么场景合适，使用时需要留意的常见陷阱；</li>
</ul>


<p>这篇教程中，你将创建一个Music Library应用，它会显示你的专辑和它们相关的信息。</p>

<p>在开发应用的过程中，你会慢慢熟悉多数常见的Cocoa设计模式：</p>

<ul>
<li>构造类：单例(Singleton)和 抽象工厂(Abstract Factory);</li>
<li>架构类：模型-视图-控制器(MVC), 修饰(Decorator), 适配器(Adapter), 门面(Facade)和合成（Composite);</li>
<li>行为类：观察者(Observer), 记忆(Memento), 响应链(Chain of Responsibility)和命令（Command）。</li>
</ul>


<p>别被误导认为这是篇纯理论的文章；你会在你音乐应用中使用这些应用模式中的大多数。你的应用最终看起来像这样：</p>

<div style="text-align:center" markdown="1">

<img name="finalapp-180x320" src="http://DamianSheldon.github.io/images/finalapp-180x320.png" width="180" height="320">  

</div>




<!-- more -->


<h3>开始吧</h3>

<p>下载<a href="http://cdn2.raywenderlich.com/wp-content/uploads/2013/07/BlueLibrary-Starter.zip">启动工程</a>,解压ZIP文件内容，然后在Xcode中打开。</p>

<p>里面内容不多，仅仅是默认的ViewController和一个未实现的简单HTTP客户端。</p>

<p><strong>Note</strong>:你知道吗？当你创建一个新的工程你的代码就已经符合设计模式了。MVC, Delegate, Protocol, Singleton&mdash;你免费得到全部！:]</p>

<p>在你深入第一个设计模式之前，你必须创建两个类去持有和显示专辑数据。</p>

<p>导航到<strong>“File\New\File…”</strong>(或简单地按Command+N)。选中<strong>iOS > Cocoa Touch</strong>，然后<strong>Objective-C class</strong>和单击<strong>Next</strong>。设置类名为<strong>Album</strong>并继承<strong>NSObject</strong>。单击<strong>Next</strong>然后<strong>Create</strong>。</p>

<p>打开<strong>Album.h</strong>，然后添加如下属性和方法原型到<strong>@interface</strong> 和 <strong>@end</strong>间:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@property (nonatomic, copy, readonly) NSString *title, *artist, *genre, *coverUrl, *year;
</span><span class='line'> 
</span><span class='line'>- (id)initWithTitle:(NSString*)title artist:(NSString*)artist coverUrl:(NSString*)coverUrl year:(NSString*)year;</span></code></pre></td></tr></table></div></figure>


<p>注意到所有的属性都是可读的，因为Album对象被创建之后不需要被改变。</p>

<p>方法是对象的初始化方法。当你创建一个新alum，你将传入album name, artist, album cover URL和year。</p>

<p>现在打开<strong>Album.m</strong>,添加下列代码到<strong>@implementation</strong>和<strong>@end</strong>中间:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (id)initWithTitle:(NSString*)title artist:(NSString*)artist coverUrl:(NSString*)coverUrl year:(NSString*)year
</span><span class='line'>{
</span><span class='line'>    self = [super init];
</span><span class='line'>    if (self)
</span><span class='line'>    {
</span><span class='line'>        _title = title;
</span><span class='line'>        _artist = artist;
</span><span class='line'>        _coverUrl = coverUrl;
</span><span class='line'>        _year = year;
</span><span class='line'>        _genre = @"Pop";
</span><span class='line'>    }
</span><span class='line'>    return self;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>这里没有什么神奇的；仅仅是一个简单的init方法去创建一个新Album实例。</p>

<p>再次导航到<strong>File\New\File…</strong>。选择<strong>Cocoa Touch</strong>然后<strong>Objective-C class</strong>，点击<strong>Next</strong>。设置类名为<strong>AlbumView</strong>，但是这次设置它为<strong>UIView</strong>的子类。点击<strong>Next</strong>然后<strong>Create</strong>。</p>

<p><strong>Note</strong>:如果你发现快捷键更容易用的话，<strong>Command+N</strong>将创建新的文件，<strong>Command+Option+N</strong>将创建新组，<strong>Command+B</strong>将编译你的工程，<strong>Command+R</strong>将运行工程。</p>

<p>打开<strong>AlbumView.h</strong>,然后添加下列方法原型到<strong>@interface</strong>和<strong>@end</strong>的中间。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (id)initWithFrame:(CGRect)frame albumCover:(NSString*)albumCover;</span></code></pre></td></tr></table></div></figure>


<p>Now open AlbumView.m and replace all the code after @implementation with the following code:</p>

<p>现在打开<strong>AlbumView.m</strong>，用下面的代码替换<strong>@implementation</strong>之后的内容：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@implementation AlbumView
</span><span class='line'>{
</span><span class='line'>    UIImageView *coverImage;
</span><span class='line'>    UIActivityIndicatorView *indicator;
</span><span class='line'>}
</span><span class='line'> 
</span><span class='line'>- (id)initWithFrame:(CGRect)frame albumCover:(NSString*)albumCover
</span><span class='line'>{
</span><span class='line'>    self = [super initWithFrame:frame];
</span><span class='line'>    if (self)
</span><span class='line'>    {
</span><span class='line'> 
</span><span class='line'>        self.backgroundColor = [UIColor blackColor];
</span><span class='line'>        // the coverImage has a 5 pixels margin from its frame
</span><span class='line'>        coverImage = [[UIImageView alloc] initWithFrame:CGRectMake(5, 5, frame.size.width-10, frame.size.height-10)];
</span><span class='line'>        [self addSubview:coverImage];
</span><span class='line'> 
</span><span class='line'>        indicator = [[UIActivityIndicatorView alloc] init];
</span><span class='line'>        indicator.center = self.center;
</span><span class='line'>        indicator.activityIndicatorViewStyle = UIActivityIndicatorViewStyleWhiteLarge;
</span><span class='line'>        [indicator startAnimating];
</span><span class='line'>        [self addSubview:indicator];
</span><span class='line'>    }
</span><span class='line'>    return self;
</span><span class='line'>}
</span><span class='line'> 
</span><span class='line'>@end</span></code></pre></td></tr></table></div></figure>


<p>你注意到的第一件事是这里有个名为coverImage的实例变量。变量代表专辑的封面图片。第二个变量是一个指示器，当专辑在下载时它转动指示器。</p>

<p>在初始化方法的实现中，你设置背影为黑色，创建一个与主视图周边有5个点距离的图片视图，创建并添加了一个活动指示器。</p>

<p><strong>Note</strong>:很奇怪为什么把私有变量定义在实现文件中而不是接口文件中？这是因为AlbumView类之外的其他类并不需要知道这些变量的存在，它们仅被类的内部实现中使用。如果你是在开发库或框架让其他开发者使用，这个惯例极其重要。</p>

<p>编译你的工程（<strong>Command+B</strong>）确认所有事情都准备就绪。都好了吗？然后准备迎接你的第一个设计模式！:]</p>

<h3>模型&mdash;视图&mdash;控制器，设计模式之王</h3>

<div style="text-align:center" markdown="1">

<img name="mvcking" src="http://DamianSheldon.github.io/images/mvcking.png" width="293" height="196">  

</div>


<p>模型&mdash;视图&mdash;控制器（MVC）是Cocoa的一个基石，它毫无疑问是被用得最多的设计模式。它依据应用中类的角色给它们分类，鼓励基于角色简洁地分隔代码。</p>

<p>这三个角色是：</p>

<ul>
<li><p>模型：持有你应用数据并定义如何操作它们的对象。例如，这个应用中的模型是你的Album类。</p></li>
<li><p>视图：控制模型类的可视显示以及和用户的交互的对象;所有的UIView和它们的子类基本上都是。在你这个应用中AlbumView代表视图。</p></li>
<li><p>控制器：控制器是中间件，它协调所有的工作。它从模型类访问数据并显示到视图上，监听事件，在需要时操作数据。你能猜到哪个类是你的控制器吗？对，是ViewController。</p></li>
</ul>


<p>你应用中这个设计模式好的实现意味着每个对象都会是三者之一。</p>

<p>视图和模型的通信可以被最佳描述成下图：</p>

<div style="text-align:center" markdown="1">

<img name="mvc0" src="http://DamianSheldon.github.io/images/mvc0.png" width="424" height="194">  

</div>


<p>任何数据发生改变模型类便通知控制器，接下来，控制器将数据更新到视图上。视图接收到用户的动作时可以通知控制器，控制器会根据需要更新模型数据或获取任何请求的数据。</p>

<p>你也许会奇怪为什么不拿掉Controller,在同一个类中实现视图和模型，这看起来更容易。</p>

<p>这都来源于代码的去藕合和可可复用。理想情况下，视图应该完全和模型隔离，这样它可以被不同的模型复用去展示其他的数据。</p>

<p>例如，如果未来你也想添加电影或书本到你的收藏库中，你仍然可以使用相同的AlbumView去展示你的电影和图书对象。此外，如果你创建了一个新的对象，它和专辑有些关系，你可以简单地复用你的Album类，因为它不依赖任何视图。这就是MVC的强大之处！</p>

<h3>如何使用MVC设计模式</h3>

<p>首先，你需要保证你工程中的类是Controller，View, Model三者之一；不要混合两个角色的功能到一个类中。你创建的<strong>Album</strong>和<strong>AlbumView</strong>到目前为止都做的很好。</p>

<p>其次，为了确保你习惯这种工作方式，你应该创建三个工程组来持有你的代码，每组对应一个类别。</p>

<p>导航到<strong>File\New\Group</strong>（或按<strong>Command+Option+N</strong>）并命名为Model，用相同的方法创建<strong>View</strong>和<strong>Controller</strong>组。</p>

<p>现在拖拽<strong>Album.h</strong>和<strong>Album.m</strong>到<strong>Model</strong>组。拖拽<strong>AlbumView.h</strong>和<strong>AlbumView.m</strong>到<strong>View</strong>组，最后拖拽<strong>ViewController.h</strong>和<strong>ViewController.m</strong>到<strong>Controller</strong>组。</p>

<p>目前你的工程结构应该看起来像这样：</p>

<div style="text-align:center" markdown="1">

<img name="mvc2-255x320" src="http://DamianSheldon.github.io/images/mvc2-255x320.png" width="255" height="320">  

</div>


<p>你的工程已经没有混乱的文件了看起来好多了。你明显能拥有其他的组和类，但这三个类别中的类是应用的核心。</p>

<p>现在你的组件被组织起来了，你需要从其他地方得到你的专辑数据。你将创建一个API类用于全部代码的数据管理&mdash;这提供了一个机会和你探讨下一个设计模式&mdash;单例。</p>

<h3>单例设计模式</h3>

<p>单例设计模式确保对于指定的类仅存在一个实例，全局的访问都指向它。它经常使用懒散加载，只有第一次需要时才创建这个实例。</p>

<p><strong>Note</strong>:Apple大量使用这种方法。例如：<strong>[NSUserDefaults standardUserDefaults]</strong>, <strong>[UIApplication sharedApplication]</strong>, <strong>[UIScreen mainScreen]</strong>, <strong>[NSFileManager defaultManager]</strong> 全都返回单例对象。</p>

<p>你也许会奇怪为什么你要关心一个类是不是只有一个实例，毕竟代码和内存都很便宜，对不对？</p>

<p>有些场景对于类只存在一个实例是有意义的。例如，没有必要存在多个Logger实例，除非你想同时输出多个log文件。以或者来看一个全局配置处理类：像配置文件，对于单个共享资源实现线程安全访问要比在同时可能有很多配置文件修改时容易的多。</p>

<h3>如何使用单例设计模式</h3>

<p>看下下面这个图：</p>

<div style="text-align:center" markdown="1">

<img name="singleton" src="http://DamianSheldon.github.io/images/singleton.png" width="233" height="152">  

</div>


<p>上图示例了一个Logger类，它有一个属性（它就是这个单独的实例），和两个方法：sharedInstance和init。</p>

<p>客户端第一次发送sharedInstance消息，属性的实例还没被初始化，所以你创建类的一个新的实例，然后返回它的一个引用。</p>

<p>下次调用sharedInstance，实例会立即返回不用初始化。这个逻辑保证任何时候都只仅存在一个实例。</p>

<p>你将实现这种模式通过创建一个单例类来管理专辑的所有数据。</p>

<p>你将注意到工程里有一个组叫<strong>API</strong>；这是你放所有将为应用提供服务类的地方。在组里用<strong>iOS\Cocoa Touch\Objective-C class</strong>模板创建一个新的类。命名为<strong>LibraryAPI</strong>，设置它是<strong>NSObject</strong>的子类。</p>

<p>打开<strong>LibraryAPI.h</strong>,用如下内容替代它：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@interface LibraryAPI : NSObject
</span><span class='line'> 
</span><span class='line'>+ (LibraryAPI*)sharedInstance;
</span><span class='line'> 
</span><span class='line'>@end</span></code></pre></td></tr></table></div></figure>


<p>Now go to LibraryAPI.m and insert this method right after the @implentation line:</p>

<p>现在到<strong>LibraryAPI.m</strong>，在<strong>@implentation</strong>之后插入这个方法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+ (LibraryAPI*)sharedInstance
</span><span class='line'>{
</span><span class='line'>    // 1
</span><span class='line'>    static LibraryAPI *_sharedInstance = nil;
</span><span class='line'> 
</span><span class='line'>    // 2
</span><span class='line'>    static dispatch_once_t oncePredicate;
</span><span class='line'> 
</span><span class='line'>    // 3
</span><span class='line'>    dispatch_once(&oncePredicate, ^{
</span><span class='line'>        _sharedInstance = [[LibraryAPI alloc] init];
</span><span class='line'>    });
</span><span class='line'>    return _sharedInstance;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>简短的方法里有不少内容：</p>

<ol>
<li><p>声明了一个静态变量来持有你类的实例，确保它在你的类中是全局可用的。</p></li>
<li><p>声明了一个<strong>dispatch_once_t</strong>静态变量，它确保初始化方法只会被执行一次。</p></li>
<li><p>使用Grand Central Dispatch (GCD)来执行块，它初始化了一个<strong>LibraryAPI</strong>的实例。这是单例设计模式的要义：类被实例化之后初始化方法就不会被调用了。</p></li>
</ol>


<p>下次你调用<strong>sharedInstance</strong>，在<strong>dispatch_once</strong>块中代码就不会被执行了（因为它已经被执行过一次了），你会得到一个之前创建的<strong>LibraryAPI</strong>的实例引用。</p>

<p>Note:想了解更多GCD内容以及它的用法，看下网站中的这两篇教程：<a href="http://www.raywenderlich.com/?p=4295">Multithreading and Grand Central Dispatch</a>和<a href="http://www.raywenderlich.com/?p=9328">How to Use Blocks</a>。</p>

<p>你现在有一个单例对象作为入口去管理专辑。我们把它进一步完善，创建一个类来处理你收藏库数据的持久化。</p>

<p>以<strong>iOS\Cocoa Touch\Objective-C class</strong>为模板在API组中创建一个新的类，命名为<strong>PersistencyManager</strong>，设置它为<strong>NSObject</strong>的子类。</p>

<p>打开<strong>PersistencyManager.h</strong>，添加下列引用到文件的顶端:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import "Album.h"</span></code></pre></td></tr></table></div></figure>


<p>Next, add the following code to PersistencyManager.h after the @interface line:</p>

<p>然后，添加下列代码到<strong>PersistencyManager.h</strong>中<strong>@interface</strong>后面：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (NSArray*)getAlbums;
</span><span class='line'>- (void)addAlbum:(Album*)album atIndex:(int)index;
</span><span class='line'>- (void)deleteAlbumAtIndex:(int)index;</span></code></pre></td></tr></table></div></figure>


<p>上面是你处理专辑数据的三个方法原型。</p>

<p>打开PersistencyManager.m，添加下列代码到@implementation前面：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@interface PersistencyManager () {
</span><span class='line'>    // an array of all albums
</span><span class='line'>    NSMutableArray *albums;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>上面添加了一个类的扩展，它是另一种给类添加私有方法和变量而不会暴露给外部类的方法。这里你声明了一个<strong>NSMutableArray</strong>来持有专辑数据。数组的可变性可以让你很容易添加和删除专辑数据。</p>

<p>现在添加下现代码实现到PersistencyManager.m文件中@implementation的后面：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (id)init
</span><span class='line'>{
</span><span class='line'>    self = [super init];
</span><span class='line'>    if (self) {
</span><span class='line'>      // a dummy list of albums
</span><span class='line'>        albums = [NSMutableArray arrayWithArray:
</span><span class='line'>                 @[[[Album alloc] initWithTitle:@"Best of Bowie" artist:@"David Bowie" coverUrl:@"http://www.coversproject.com/static/thumbs/album/album_david%20bowie_best%20of%20bowie.png" year:@"1992"],
</span><span class='line'>                 [[Album alloc] initWithTitle:@"It's My Life" artist:@"No Doubt" coverUrl:@"http://www.coversproject.com/static/thumbs/album/album_no%20doubt_its%20my%20life%20%20bathwater.png" year:@"2003"],
</span><span class='line'>                 [[Album alloc] initWithTitle:@"Nothing Like The Sun" artist:@"Sting" coverUrl:@"http://www.coversproject.com/static/thumbs/album/album_sting_nothing%20like%20the%20sun.png" year:@"1999"],
</span><span class='line'>                 [[Album alloc] initWithTitle:@"Staring at the Sun" artist:@"U2" coverUrl:@"http://www.coversproject.com/static/thumbs/album/album_u2_staring%20at%20the%20sun.png" year:@"2000"],
</span><span class='line'>                 [[Album alloc] initWithTitle:@"American Pie" artist:@"Madonna" coverUrl:@"http://www.coversproject.com/static/thumbs/album/album_madonna_american%20pie.png" year:@"2000"]]];
</span><span class='line'>    }
</span><span class='line'>    return self;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>在init中，你用5个样本专辑填充了数组。如果上面的专辑你不喜欢，用你喜欢的音乐替换它们吧. :]</p>

<p>现在添加下面三个方法到<strong>PersistencyManager.m</strong>：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (NSArray*)getAlbums
</span><span class='line'>{
</span><span class='line'>    return albums;
</span><span class='line'>}
</span><span class='line'> 
</span><span class='line'>- (void)addAlbum:(Album*)album atIndex:(int)index
</span><span class='line'>{
</span><span class='line'>    if (albums.count &gt;= index)
</span><span class='line'>      [albums insertObject:album atIndex:index];
</span><span class='line'>    else
</span><span class='line'>      [albums addObject:album];
</span><span class='line'>}
</span><span class='line'> 
</span><span class='line'>- (void)deleteAlbumAtIndex:(int)index
</span><span class='line'>{
</span><span class='line'>    [albums removeObjectAtIndex:index];
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>这些方法能让你获取，添加，删除专辑。</p>

<p>编译你的工程，确保所有的文件仍然能成功被编译。</p>

<p>到这，你可能会奇怪<strong>PersistencyManager</strong>来看哪里呢？它又不是单例。<strong>LibraryAPI</strong>和<strong>PersistencyManager</strong>的关系，我们在下一节会进一步揭示，你还会看到<strong>门面</strong>设计模式。</p>

<h3>门面设计模式</h3>

<div style="text-align:center" markdown="1">

<img name="facade" src="http://DamianSheldon.github.io/images/facade.jpg" width="300" height="212">  

</div>


<p>门面设计模式为复杂的子系统提供一个单一的接口。与其把一系列类和它们的API暴露给用户，还不如仅仅暴露给它们一个简单统一的API。</p>

<p>下图解释了这种理念：</p>

<div style="text-align:center" markdown="1">

<img name="facade2-480x241" src="http://DamianSheldon.github.io/images/facade2-480x241.png" width="480" height="241">  

</div>


<p>API的使用者们完全感觉不到它后面的复杂。当很多类协作时，这种设计模式十分理想，特别是当它们对用户很复杂或很难理解。</p>

<p>门面模式让使用系统的代码从接口和你隐藏实现的类解藕；它也减少了外部代码对内部子系统工作的依赖。当门面底下的类想改变时，这也很有用，因为门面能保留相同的API，尽管后面的代码已经改变了。</p>

<p>例如，如果有一天你想替换你的后端服务，你不需要去修改使用你API的代码。</p>

<h3>如何使用门面设计模式</h3>

<p>目前你有<strong>PersistencyManager</strong>保存专辑数据到本地，<strong>HTTPClient</strong>处理远程交互。工程中其他的类不应该意识到这个逻辑的存在。</p>

<p>为了实现这个设计模式，仅<strong>LibraryAPI</strong>应该持有<strong>PersistencyManager</strong>和<strong>HTTPClient</strong>的实例。然后，<strong>LibraryAPI</strong>会对其他的服务暴露一个简单的API。</p>

<p><strong>Note</strong>:通常，单例在整个应用的生命周期都存在。你不应该让单例保持大多其他对象的强引用，因为他们直到应用关闭才会被释放。</p>

<p>设计看起来像下面这样：</p>

<div style="text-align:center" markdown="1">

<img name="design-patterns-facade-uml-480x71" src="http://DamianSheldon.github.io/images/design-patterns-facade-uml-480x71.png" width="480" height="71">  

</div>


<p><strong>LibraryAPI</strong>将暴露给其他代码，但是会对应用的其他部分隐藏<strong>HTTPClient</strong>和<strong>PersistencyManager</strong>的复杂。</p>

<p>打开<strong>LibraryAPI.h</strong>，添加下列引用到文件的顶端：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import "Album.h"</span></code></pre></td></tr></table></div></figure>


<p>然后，添加下列方法定义到<strong>LibraryAPI.h</strong>：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (NSArray*)getAlbums;
</span><span class='line'>- (void)addAlbum:(Album*)album atIndex:(int)index;
</span><span class='line'>- (void)deleteAlbumAtIndex:(int)index;</span></code></pre></td></tr></table></div></figure>


<p>现在，这些方法是你会暴露给其他类的。</p>

<p>到LibraryAPI.m中，添加下面两个引用：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import "PersistencyManager.h"
</span><span class='line'>#import "HTTPClient.h"</span></code></pre></td></tr></table></div></figure>


<p>这将是你唯一导入这些类的地方。记住：你的API将会是唯一的入口去访问你&#8221;复杂&#8221;的系统。</p>

<p>现在，通过类的扩展添加些私有变量（在@implementation上面）：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@interface LibraryAPI () {
</span><span class='line'>    PersistencyManager *persistencyManager;
</span><span class='line'>    HTTPClient *httpClient;
</span><span class='line'>    BOOL isOnline;
</span><span class='line'>}
</span><span class='line'> 
</span><span class='line'>@end</span></code></pre></td></tr></table></div></figure>


<p><strong>isOnline</strong>决定任何专辑列表的改变，例如，添加或删除专辑，是否应该被更新到服务器。</p>

<p>你现在需要通过<strong>init</strong>来初始化这些变量。添加下列代码到<strong>LibraryAPI.m</strong>：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (id)init
</span><span class='line'>{
</span><span class='line'>    self = [super init];
</span><span class='line'>    if (self) {
</span><span class='line'>        persistencyManager = [[PersistencyManager alloc] init];
</span><span class='line'>        httpClient = [[HTTPClient alloc] init];
</span><span class='line'>        isOnline = NO;
</span><span class='line'>    }
</span><span class='line'>    return self;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>HTTP Client最终不会和真实的服务器交互，这里仅仅是为示例门面模式的使用，所以<strong>isOnline</strong>将一直是<strong>NO</strong>。</p>

<p>下一步，添加下面三个方法到<strong>LibraryAPI.m</strong>：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (NSArray*)getAlbums
</span><span class='line'>{
</span><span class='line'>    return [persistencyManager getAlbums];
</span><span class='line'>}
</span><span class='line'> 
</span><span class='line'>- (void)addAlbum:(Album*)album atIndex:(int)index
</span><span class='line'>{
</span><span class='line'>    [persistencyManager addAlbum:album atIndex:index];
</span><span class='line'>    if (isOnline)
</span><span class='line'>    {
</span><span class='line'>        [httpClient postRequest:@"/api/addAlbum" body:[album description]];
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'> 
</span><span class='line'>- (void)deleteAlbumAtIndex:(int)index
</span><span class='line'>{
</span><span class='line'>    [persistencyManager deleteAlbumAtIndex:index];
</span><span class='line'>    if (isOnline)
</span><span class='line'>    {
</span><span class='line'>        [httpClient postRequest:@"/api/deleteAlbum" body:[@(index) description]];
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>看一眼<strong>addAlbum:atIndex:</strong>。类首先更新本地数据，然后如果是联网的话，更新远程服务器。这是门面的真正力量；当你系统外面添加一个新专辑，它不知道，也不需要知道这底下的复杂。</p>

<p><strong>Note</strong>:当你为子系统的类设计门面时，记住没任何东西防止客户端直接访问隐藏的类。不要吝啬你的防御代码，不要假设所有客户端按门面相同的方式使用这些类是必须的。</p>

<p>编译并运行你的应用。你会看到像下面这样令人兴奋和无法置信的空的黑色屏幕。</p>

<div style="text-align:center" markdown="1">

<img name="2013-09-01_12-08-44-211x320" src="http://DamianSheldon.github.io/images/2013-09-01_12-08-44-211x320.png" width="211" height="320">  

</div>


<p>你将会需要些东西来显示专辑数据到屏幕上&mdash;这是个完美的使用场景对于你的下个设计模式：修饰。</p>

<h3>修饰设计模式</h3>

<p>修饰设计模式动态添加行为和能力到一个对象而不需要修改它的代码。它是不同于子类那样通过包装到另一个对象来修改类的行为的方法。</p>

<p>在Objective-C中，这种设计模式有两个很常见的实现：<strong>Category</strong>和<strong>Delegation</strong>。</p>

<h4>Category</h4>

<p>Category是一个极其强大的机制，它允许你添加方法到已经存在的类而不需要子类化。新的方法在编译时被添加，可以像扩展类的普通方法一样被执行。它和经典的修饰模式有点不同，因为一个Category不能持有扩展类的实例。</p>

<p><strong>Note</strong>:除了扩展你自己的类，你还可以添加方法到任意Cocoa拥有的类。</p>

<h4>如何使用Categories</h4>

<p>想像这么一个场景，你有一个Album对象，你想让它显示在一个表格视图中:</p>

<div style="text-align:center" markdown="1">

<img name="design-patterns-category1" src="http://DamianSheldon.github.io/images/design-patterns-category1.png" width="310" height="188">  

</div>


<p>专辑标题是从哪来的呢？<strong>Album</strong>是一个模型对象，所以它不关心你如何展示数据。你将需要些外部代码来为<strong>Album</strong>类添加该功能，但是不能直接修改类。</p>

<p>你将创建一个category，这是Album的扩展；它将定义一个新方法，这个新方法会返回一个让UITableView很容易使用的数据结构。</p>

<p>The data structure will look like the following:</p>

<p>这个数据结构会看起来像这样：</p>

<div style="text-align:center" markdown="1">

<img name="delegate2-480x67" src="http://DamianSheldon.github.io/images/delegate2-480x67.png" width="480" height="67">  

</div>


<p>为了添加<strong>Category</strong>到<strong>Album</strong>，导航到<strong>File\New\File…</strong>，选择<strong>Objective-C category</strong>模板&mdash;不要习惯性地选择了<strong>Objective-C class</strong>！输入<strong>TableRepresentation</strong>到<strong>Category</strong>字段，<strong>Album</strong>到<strong>Category on</strong>字段。</p>

<p>Note:你有没注意到新文件的名字？<strong>Album+TableRepresentation</strong>意味着你正在扩展<strong>Album</strong>类。这个惯例很重要，因为它易读并且它防止和你事其他人可能创建的categories冲突。</p>

<p>Go to Album+TableRepresentation.h and add the following method prototype:</p>

<p>进入Album+TableRepresentation.h，添加如下方法原型：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (NSDictionary*)tr_tableRepresentation;</span></code></pre></td></tr></table></div></figure>


<p>注意这里的方法名前有个<strong>tr_</strong>，是<strong>category:TableRepresentation</strong>的缩写。再次提醒，像这样的惯例将防止和其他方法冲突！</p>

<p><strong>Note</strong>:如果你在category中声明的方法和源类，或都同一个类其他的category（甚至父类）方法相同，运行时会使用哪个方法实现是示定义的。这种情况在你使用自己拥有类的category时很少发生，但是当使用categories添加方法到标准的Cocoa或Cocoa Touch类时能导致严重问题。</p>

<p>Go to Album+TableRepresentation.m and add the following method:</p>

<p>进入<strong>Album+TableRepresentation.m</strong>，添加如下方法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (NSDictionary*)tr_tableRepresentation
</span><span class='line'>{
</span><span class='line'>    return @{@"titles":@[@"Artist", @"Album", @"Genre", @"Year"],
</span><span class='line'>             @"values":@[self.artist, self.title, self.genre, self.year]};
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Consider for a moment how powerful this pattern can be:</p>

<p>思考下这种模式在某个时刻有多强大：</p>

<ul>
<li>你正在使用直接来自Album属性。</li>
<li>你添加了内容到Album类，但是你并没有子类化它。如果你需要子类化Album，你仍然也可以这么做。</li>
<li>这个简单的额外内容让你能返回一个UITableView式的专辑，并没有修改Album的代码。</li>
</ul>


<p>Apple在Foundation类中大量使用Categories。打开<strong>NSString.h</strong>看下他们是如何做的。找到 <strong>@interface NSString</strong>，你将会看到总共定义了三个categories：<strong>NSStringExtensionMethods</strong>, <strong>NSExtendedStringPropertyListParsing</strong> 和 <strong>NSStringDeprecated</strong>。Categories帮助方法组织和分隔到各个部分。</p>

<h4>Delegation</h4>

<p>另一个修饰设计模式，Delegation，是一种一个对象的行为代表或协调另一个对象。例如，当你使用<strong>UITableView</strong>，你必须实现的方法之一是<strong>tableView:numberOfRowsInSection:</strong>。</p>

<p>你不能期望UITableView知道你想每个部分有多少行，因为这是应用特定的。因此，计算每个部分有多少行的任务传递给了UITableView delegate。它允许UITableView类独立于它显示的数据。</p>

<p>这里有一个当你创建一个UITableView时是如何进行的虚拟场景解释：</p>

<div style="text-align:center" markdown="1">

<img name="delegate-480x252" src="http://DamianSheldon.github.io/images/delegate-480x252.png" width="480" height="252">  

</div>


<p>UITableView对象的工作是显示table view。但是，最终它将需要一些它没有的信息。然后，它救助于它的delegates，发送消息询问额外的信息。在Objective-C中实现delegate模式，一个类通过protocol可以声明可选和必选的方法。你将教程的稍候全面了解protocols。</p>

<p>表面看起来仅仅去继承一个对象然后覆盖必要的方法要简单，但是考虑下你只能继承单一的一个类。如果你想让某个类成为两或多个对象的delegate，这是不能通过继承实现的。</p>

<p>Note:这是个很重要的模式。Apple应用这种方法到大多数UIKit类：<strong>UITableView</strong>, <strong>UITextView</strong>, <strong>UITextField</strong>, <strong>UIWebView</strong>, <strong>UIAlert</strong>, <strong>UIActionSheet</strong>, <strong>UICollectionView</strong>, <strong>UIPickerView</strong>, <strong>UIGestureRecognizer</strong>, <strong>UIScrollView</strong>。列表还在继续。</p>

<p>未完待续&hellip;</p>

<h3>原文</h3>

<p>iOS Design Patterns（<a href="http://www.raywenderlich.com/46988/ios-design-patterns%EF%BC%89">http://www.raywenderlich.com/46988/ios-design-patterns%EF%BC%89</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为MacBook Pro配置一个像guake的终端]]></title>
    <link href="http://DamianSheldon.github.io/blog/setup-iterm2-to-behave-like-guake.html/"/>
    <updated>2014-11-07T10:31:19+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/setup-iterm2-to-behave-like-guake</id>
    <content type="html"><![CDATA[<p>以前在Arch下经常使用一个名为guake的终端，体验很好，用MacBook Pro之后也想有个这样的终端，由于各种原因，这事一直耽搁着，但并没有放下，今天特意找了下，还真找到了。不费话了，进入正题。</p>

<h3>让iTerm2的行为像guake</h3>

<p>1)下载<a href="http://iterm2.com/">iTerm2</a>,然后解压;</p>

<p>2)打开iTerm2,然后iTerm2&mdash;>Prefences&hellip;&ndash;>Profiles;</p>

<p>3)创建一个新Profiles,命名为guake;</p>

<p>4)在Window选项中根据自己的喜好配置;</p>

<p><img name="create_new_iterm_profile" src="http://DamianSheldon.github.io/images/create_new_iterm_profile.png" width="913" height="533"></p>

<p>5)在Keys选项中激活&#8221;Show/hide iTerm2 with a system-wide hotkey&#8221;,由于F12用来移动到Dashboard,只能用其他的快捷键了，可以根据自己喜好设置，我这里设置为⌘F12,(Note:⌘ + fn + F12);</p>

<p><img name="assign_a_hotkey" src="http://DamianSheldon.github.io/images/assign_a_hotkey.png" width="897" height="528"></p>

<!-- more -->


<h3>开机启动iTerm2时不打开终端窗口</h3>

<p>安装好iTerm2,并把它配置像guake, 加入开机自启动(System Preferences > Users&amp;Groups > Login Items > + iTerm2)之后，还有一个小问题困扰着我，就是它会默认打开一个终端窗口，这让人很不舒坦，解决方法如下:</p>

<p>1)打开iTerm2;</p>

<p>2)关闭所有的窗口(iTerm2菜单栏&mdash;>shell&mdash;>Close);</p>

<p>3)Window&mdash;>Save Window Arrangement;</p>

<p>4)将新的窗口布局命名为“No Windows”;</p>

<p>5)将这个新窗口布局设置默认布局，Preferences > Arrangements > Set it as default;</p>

<p>6)最后在Preferences… > General > Startup, 只选中“Open default window arrangement” 。</p>

<h3>Reference:</h3>

<p>SETUP ITERM2 TO BEHAVE LIKE GUAKE(<a href="http://ivanvillareal.com/osx/setup-iterm2-to-behave-like-guake/">http://ivanvillareal.com/osx/setup-iterm2-to-behave-like-guake/</a>)</p>

<p>Launch iTerm 2 on startup without opening a terminal window (<a href="http://rottmann.net/2013/03/launch-iterm-2-on-startup-without-opening-a-terminal-window/">http://rottmann.net/2013/03/launch-iterm-2-on-startup-without-opening-a-terminal-window/</a>)</p>
]]></content>
  </entry>
  
</feed>
