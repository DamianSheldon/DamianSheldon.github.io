<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hello World]]></title>
  <link href="http://DamianSheldon.github.io/atom.xml" rel="self"/>
  <link href="http://DamianSheldon.github.io/"/>
  <updated>2014-05-10T08:52:45+08:00</updated>
  <id>http://DamianSheldon.github.io/</id>
  <author>
    <name><![CDATA[Sheldon]]></name>
    <email><![CDATA[dongmeilianghy@sina.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Objective-C Class and Object]]></title>
    <link href="http://DamianSheldon.github.io/blog/2014/05/10/objective-c-class-and-object/"/>
    <updated>2014-05-10T07:54:58+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/2014/05/10/objective-c-class-and-object</id>
    <content type="html"><![CDATA[<p>Objective-C是一门面向对象的编程语言，既然是面向对象，那我们就有必要对它的对象作进一步的理解，而且它的很多特性与这也大有关系。</p>

<h2>1,Class</h2>

<pre><code>/// An opaque type that represents an Objective-C class.
typedef struct objc_class *Class;

struct objc_class {
Class isa  OBJC_ISA_AVAILABILITY;

#if !__OBJC2__
Class super_class                                                                               OBJC2_UNAVAILABLE;
const char *name                                                                                OBJC2_UNAVAILABLE;
long version                                                                                    OBJC2_UNAVAILABLE;
long info                                                                                       OBJC2_UNAVAILABLE;
long instance_size                                                                              OBJC2_UNAVAILABLE;
struct objc_ivar_list *ivars                                                                    OBJC2_UNAVAILABLE;
struct objc_method_list **methodLists                                                           OBJC2_UNAVAILABLE;
struct objc_cache *cache                                                                        OBJC2_UNAVAILABLE;
struct objc_protocol_list *protocols                                                            OBJC2_UNAVAILABLE;
#endif

} OBJC2_UNAVAILABLE;
</code></pre>

<h2>2,Object</h2>

<pre><code>/// Represents an instance of a class.
struct objc_object {
    Class isa  OBJC_ISA_AVAILABILITY;
};
</code></pre>

<p>从头文件的定义可以看出,对象的内存布局以一个Class 类型的isa指针开始,而类的内存布局也是以一个Class类型的isa指针开始，所以类也是对象，这样就满足了面向对象编程语言中所有的东西都是对象。</p>

<p>对象是对象，类也是对象。很容易混淆是吧，所以OC重用了一个术语来区分它们:类对象（Class Object）;实例对象（Instance Object）。实例对象的isa指针指向的类叫Class,类对象的isa指针指向的类叫meta-class。meta-class的isa指针指向根类meta-class,根类meta-class的isa指针指向自己。让我们看张图：
<img src="http://DamianSheldon.github.io/images/Objective-C_Class_And_Object.png" title="Objective-C Class And Object" ></p>

<p>那么类对象是怎么创建的呢？经过查找，得到的结论是编译器创建的，编译时所谓的类是指类对象（官方文档： The class object is the compiled version of the class.）。</p>

<h2>3,category</h2>

<p>因为对象在内存中的排布可以看成一个结构体，该结构体的大小并不能动态变化。所以无法在运行时动态给对象增加成员变量。
相对的，对象的方法定义都保存在类的可变区域中。Objective-C 2.0并未在头文件中将实现暴露出来，但在Objective-C 1.0中，我们可以看到方法的定义列表是一个名为 methodLists的指针的指针。通过修改该指针指向的指针的值，就可以实现动态地为某一个类增加成员方法。这也是Category实现的原理。同时也说明了为什么Category只可为对象增加成员方法，却不能增加成员变量。</p>

<h2>4,方法混写</h2>

<p>因为对象的方法可以改变，因此我们就有了方法混写的技术。</p>

<h2>5,isa混写</h2>

<p>除了对象的方法可以动态修改，因为isa本身也只是一个指针，所以我们也可以在运行时动态地修改isa指针的值，达到替换对象整个行为的目的。</p>

<p>典型示例：KVO。</p>

<h2>6,参考资料</h2>

<p>1,iOS 6 Programming Pushing the Limits, Rob Napier, Mugunth Kumar<br/>
2,深入浅出Cocoa之类与对象,(<a href="http://blog.csdn.net/kesalin/article/details/7211228">http://blog.csdn.net/kesalin/article/details/7211228</a>)<br/>
3,深入浅出Cocoa 之动态创建类(<a href="http://blog.csdn.net/kesalin/article/details/7219572">http://blog.csdn.net/kesalin/article/details/7219572</a>)<br/>
4,Objective-C对象模型及应用(<a href="http://blog.devtang.com/blog/2013/10/15/objective-c-object-model/">http://blog.devtang.com/blog/2013/10/15/objective-c-object-model/</a>)<br/>
5,Objective-C对象之类对象和元类对象（一）(<a href="http://blog.csdn.net/wzzvictory/article/details/8592492">http://blog.csdn.net/wzzvictory/article/details/8592492</a>)<br/>
6,Objcclass(<a href="http://studentdeng.github.io/blog/2011/10/05/objcclass/">http://studentdeng.github.io/blog/2011/10/05/objcclass/</a>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Octopress]]></title>
    <link href="http://DamianSheldon.github.io/blog/2014/05/09/hello-octopress/"/>
    <updated>2014-05-09T15:01:51+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/2014/05/09/hello-octopress</id>
    <content type="html"><![CDATA[<p>Octopress:A blogging framework for hackers.</p>

<p>看到介绍就被吸引了，正好最近想写些东西，于是决定用Octopress来搭个自己的博客。Octopress既然是为黑客准备的，有点难度那也是很正常的。网上很多都是介绍搭建的博客的步骤，但对出现各种问题以及解决办法的总结不是很多。而自己对ruby完全不懂，这过程中出现很多的问题，这里把遇到的问题贴上来，一来做个总结；二来也可以给遇到同样的问题的朋友一些帮助。</p>

<h1>问题1</h1>

<pre><code>An error occurred while installing RedCloth (4.2.9), and Bundler cannot continue.
Make sure that gem install RedCloth -v '4.2.9' succeeds before bundling.
</code></pre>

<p>Solution:这个问题不知道怎么回事，网上找了很久也没有找到解决办法。看到Octopress需要ruby1.9.3以上，而我系统上的ruby是一个通用的版本，我试着用rbenv装了个2.1.1版本，并设置成全局版本，问题解决了，不过还是没有弄明白是什么原因。</p>

<h1>问题2</h1>

<pre><code>rake aborted!
You have already activated rake 10.1.0, but your Gemfile requires rake 10.0.4. Prepending `bundle exec` to your command may solve this.
/Users/dongmeiliang/Documents/octopress/Rakefile:2:in `&lt;top (required)&gt;'
(See full trace by running task with --trace)
</code></pre>

<p>Solution:这个问题可以每次加上bundle exec,但是总有一种不舒坦的感觉，找了很久找到一点线索，最后用下面办法解决了:</p>

<pre><code>brew update
brew doctor
cd root_path_octopress
git pull octopress master
rm Gemfile.lock
vim Gemfile
gem 'rake', '~&gt; 10.1.0'//改成合适的版本
</code></pre>

<h1>问题3</h1>

<pre><code>dongmeiiangsmbp:octopress dongmeiliang$ rake generate
...
Build Failed
</code></pre>

<p>Solution:网上找了下，类似问题的原因可能是有空格之类的问题，用FileMerge比较了下发现是空格的原因。吐槽下这原因感觉有点难以接受啊。十分感谢原帖作者，忘记把链接复制下来了。</p>

<h1>问题4</h1>

<p>之前安装过程中，出于测试的目的，写了篇草稿发上来了，现在想重新把文章编辑下，但是奇怪的是source分支中找不到原文件了，如果你知道原因请告诉我一声。</p>

<p>Solution:我的解决办法是在_deploy路径下同步master分支，解决合并冲突，然后把blog目录下相应的index.html文件删除了，然后：</p>

<pre><code>rake generate
rake deploy
</code></pre>
]]></content>
  </entry>
  
</feed>
