<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: archive | Hello World]]></title>
  <link href="http://DamianSheldon.github.io/blog/categories/archive/atom.xml" rel="self"/>
  <link href="http://DamianSheldon.github.io/"/>
  <updated>2022-11-21T10:14:22+08:00</updated>
  <id>http://DamianSheldon.github.io/</id>
  <author>
    <name><![CDATA[Sheldon]]></name>
    <email><![CDATA[dongmeilianghy@sina.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[音频和视频格式]]></title>
    <link href="http://DamianSheldon.github.io/blog/audio-and-video-file-format.html"/>
    <updated>2016-10-21T15:15:53+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/audio-and-video-file-format</id>
    <content type="html"><![CDATA[<h2>音频格式</h2>

<p>我们通常说的音频格式准确地讲应该是音频文件格式，它是计算机系统上用于存放数字音频数据的文件格式，也可以看作一个容器。</p>

<p>音频数据的比特分布我们称为音频编码格式，它可以非压缩编码或压缩编码。压缩编码又分为无损压缩和有损压缩。</p>

<p>编码器(codec)就是来编解码原始音频数据的。</p>

<p>声音源 <code>--ADC--&gt;</code> raw audio data <code>--codec--&gt;</code> audio data(uncompressed/compressed) <code>--packed--&gt;</code> audio file format(container format)</p>

<blockquote><p>An audio file format is a file format for storing digital audio data on a computer system. The bit layout of the audio data (excluding metadata) is called the audio coding format and can be uncompressed, or compressed to reduce the file size, often using lossy compression. The data can be a raw bitstream in an audio coding format, but it is usually embedded in a container format or an audio data format with defined storage layer.</p>

<p>It is important to distinguish between the audio coding format, the container containing the raw audio data, and an audio codec. A codec performs the encoding and decoding of the raw audio data while this encoded data is (usually) stored in a container file. Although most audio file formats support only one type of audio coding data (created with an audio coder), a multimedia container format (as Matroska or AVI) may support multiple types of audio and video data.</p>

<p>There are three major groups of audio file formats:</p>

<p>  • Uncompressed audio formats, such as WAV, AIFF, AU or raw header-less PCM;</p>

<p>  • Formats with lossless compression, such as FLAC, Monkey&rsquo;s Audio (filename extension .ape), WavPack (filename extension .wv), TTA, ATRAC Advanced Lossless, ALAC (filename extension .m4a), MPEG-4 SLS, MPEG-4 ALS, MPEG-4 DST, Windows Media Audio Lossless (WMA Lossless), and Shorten (SHN).</p>

<p>  • Formats with lossy compression, such as Opus, MP3, Vorbis, Musepack, AAC, ATRAC and Windows Media Audio Lossy (WMA lossy).</p></blockquote>

<!--more-->


<h2>视频格式</h2>

<p>视频文件格式是计算机系统上一种用来存放数字视频数据的文件格式。视频几乎都是以压缩格式的形式存储的以便减小文件大小。</p>

<p>视频文件格式也是一个容器，里面包含编码完的视频和音频数据，同样是使用编码器来完成编解码工作。</p>

<blockquote><p>A video file format is a type of file format for storing digital video data on a computer system. Video is almost always stored in compressed form to reduce the file size.</p>

<p>A video file normally consists of a container format (e.g. Matroska) containing video data in a video coding format (e.g. VP9) alongside audio data in an audio coding format (e.g. Opus). The container format can also contain synchronization information, subtitles, and metadata such as title. A standardized (or in some cases de facto standard) video file type such as .webm is a profilespecified by a restriction on which container format and which video and audio compression formats are allowed.</p>

<p>The coded video and audio inside a video file container (i.e. not headers, footers and metadata) is called the essence. A program (or hardware) which can decode video or audio is called a codec; playing or encoding a video file will sometimes require the user to install a codec library corresponding to the type of video and audio coding used in the file.</p></blockquote>

<h2>iOS and Android supported audio &amp; video codec formats</h2>

<h3>iOS</h3>

<p>在 iOS Technology Overview 中 Apple 介绍说，</p>

<p>iOS supports many industry-standard and Apple-specific audio formats, including the following:</p>

<ul>
<li>AAC</li>
<li>Apple Lossless (ALAC)</li>
<li>A-law</li>
<li>IMA/ADPCM (IMA4)</li>
<li>Linear PCM</li>
<li>µ-law</li>
<li>DVI/Intel IMA ADPCM</li>
<li>Microsoft GSM 6.10</li>
<li>AES3-2003</li>
</ul>


<p>Preferred Audio Formats in iOS</p>

<ul>
<li><p>For uncompressed (highest quality) audio, use 16-bit, little endian, linear PCM audio data packaged in a CAF file.</p></li>
<li><p>For compressed audio when playing one sound at a time, and when you don’t need to play audio simultaneously with the iPod application, use the AAC format packaged in a CAF or m4a file.</p></li>
<li>For less memory usage when you need to play multiple sounds simultaneously, use IMA4 (IMA/ADPCM) compression. This reduces file size but entails minimal CPU impact during decompression. As with linear PCM data, package IMA4 data in a CAF file.</li>
</ul>


<p>iOS supports many industry-standard video formats and compression standards, including the following:</p>

<ul>
<li>H.264 video, up to 1.5 Mbps, 640 by 480 pixels, 30 frames per second, Low-Complexity version of the H.264 Baseline Profile with AAC-LC audio up to 160 Kbps, 48 kHz, stereo audio in .m4v, .mp4, and .mov file formats</li>
<li>H.264 video, up to 768 Kbps, 320 by 240 pixels, 30 frames per second, Baseline Profile up to Level 1.3 with AAC-LC audio up to 160 Kbps, 48 kHz, stereo audio in .m4v, .mp4, and .mov file formats</li>
<li>MPEG-4 video, up to 2.5 Mbps, 640 by 480 pixels, 30 frames per second, Simple Profile with AAC-LC audio up to 160 Kbps, 48 kHz, stereo audio in .m4v, .mp4, and .mov file formats</li>
<li>Numerous audio formats, including the ones listed in Audio Technologies</li>
</ul>


<p>在 Multimedia Programming Guide 的 Using Audio 中对音频格式相应介绍如下，</p>

<p>Audio playback formats and codecs</p>

<table>
<thead>
<tr>
<th style="text-align:left;"> Audio decoder/playback format </th>
<th style="text-align:left;"> Hardware-assisted decoding </th>
<th style="text-align:left;"> Software-based decoding </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> AAC (MPEG-4 Advanced Audio Coding) </td>
<td style="text-align:left;"> Yes </td>
<td style="text-align:left;"> Yes, starting in iOS 3.0 </td>
</tr>
<tr>
<td style="text-align:left;"> ALAC (Apple Lossless) </td>
<td style="text-align:left;"> Yes </td>
<td style="text-align:left;"> Yes, starting in iOS 3.0 </td>
</tr>
<tr>
<td style="text-align:left;"> HE-AAC (MPEG-4 High Efficiency AAC) </td>
<td style="text-align:left;"> Yes </td>
<td style="text-align:left;"> - </td>
</tr>
<tr>
<td style="text-align:left;"> iLBC (internet Low Bitrate Codec, another format for speech) </td>
<td style="text-align:left;"> - </td>
<td style="text-align:left;"> Yes </td>
</tr>
<tr>
<td style="text-align:left;"> IMA4 (IMA/ADPCM) </td>
<td style="text-align:left;"> - </td>
<td style="text-align:left;"> Yes </td>
</tr>
<tr>
<td style="text-align:left;"> Linear PCM (uncompressed, linear pulse-code modulation) </td>
<td style="text-align:left;"> - </td>
<td style="text-align:left;"> Yes </td>
</tr>
<tr>
<td style="text-align:left;"> MP3 (MPEG-1 audio layer 3) </td>
<td style="text-align:left;"> Yes </td>
<td style="text-align:left;"> Yes, starting in iOS 3.0 </td>
</tr>
<tr>
<td style="text-align:left;"> µ-law and a-law </td>
<td style="text-align:left;"> - </td>
<td style="text-align:left;"> Yes </td>
</tr>
</tbody>
</table>


<p>Audio recording formats and codecs</p>

<table>
<thead>
<tr>
<th style="text-align:left;"> Audio encoder/recording format </th>
<th style="text-align:left;"> Hardware-assisted encoding </th>
<th style="text-align:left;"> Software-based encoding </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> AAC (MPEG-4 Advanced Audio Coding) </td>
<td style="text-align:left;"> Yes, starting in iOS 3.1 for iPhone 3GS and iPod touch (2nd generation) Yes, starting in iOS 3.2 for iPad </td>
<td style="text-align:left;"> Yes, starting in iOS 4.0 for iPhone 3GS and iPod touch (2nd generation) </td>
</tr>
<tr>
<td style="text-align:left;"> ALAC (Apple Lossless) </td>
<td style="text-align:left;"> - </td>
<td style="text-align:left;"> Yes </td>
</tr>
<tr>
<td style="text-align:left;"> iLBC (internet Low Bitrate Codec, for speech) </td>
<td style="text-align:left;"> - </td>
<td style="text-align:left;"> Yes </td>
</tr>
<tr>
<td style="text-align:left;"> IMA4 (IMA/ADPCM) </td>
<td style="text-align:left;"> - </td>
<td style="text-align:left;"> Yes </td>
</tr>
<tr>
<td style="text-align:left;"> Linear PCM (uncompressed, linear pulse-code modulation) </td>
<td style="text-align:left;"> - </td>
<td style="text-align:left;"> Yes </td>
</tr>
<tr>
<td style="text-align:left;"> µ-law and a-law </td>
<td style="text-align:left;"> - </td>
<td style="text-align:left;"> Yes </td>
</tr>
</tbody>
</table>


<p>我们将上面的信息综合，可以得到下表：</p>

<table>
<thead>
<tr>
<th style="text-align:left;"> Format / Codec </th>
<th style="text-align:center;"> Encoder </th>
<th style="text-align:center;"> Decoder </th>
<th style="text-align:left;"> File Extension </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> AAC (MPEG-4 Advanced Audio Coding) </td>
<td style="text-align:center;"> Yes </td>
<td style="text-align:center;"> Yes </td>
<td style="text-align:left;"> MPEG/3GPP container <br> .m4a, .mp4, .3gp <br> Apple container <br> .m4a, .m4b, .m4p, .m4r, .m4v <br> ADTS stream <br> .aac </td>
</tr>
<tr>
<td style="text-align:left;"> ALAC (Apple Lossless) </td>
<td style="text-align:center;"> Yes </td>
<td style="text-align:center;"> Yes </td>
<td style="text-align:left;"> .m4a .caf </td>
</tr>
<tr>
<td style="text-align:left;"> HE-AAC (MPEG-4 High Efficiency AAC) </td>
<td style="text-align:center;"> No</td>
<td style="text-align:center;"> Yes </td>
<td style="text-align:left;"> Same as AAC </td>
</tr>
<tr>
<td style="text-align:left;"> iLBC (internet Low Bitrate Codec, another format for speech) </td>
<td style="text-align:center;"> Yes </td>
<td style="text-align:center;"> Yes </td>
<td style="text-align:left;"> .lbc </td>
</tr>
<tr>
<td style="text-align:left;"> IMA4 (IMA/ADPCM) </td>
<td style="text-align:center;"> Yes </td>
<td style="text-align:center;"> Yes </td>
<td style="text-align:left;">  </td>
</tr>
<tr>
<td style="text-align:left;"> Linear PCM (uncompressed, linear pulse-code modulation) </td>
<td style="text-align:center;"> Yes </td>
<td style="text-align:center;"> Yes </td>
<td style="text-align:left;"> .L16, .WAV, .AIFF, .AU, .PCM </td>
</tr>
<tr>
<td style="text-align:left;"> MP3 (MPEG-1 audio layer 3) </td>
<td style="text-align:center;"> No </td>
<td style="text-align:center;"> Yes </td>
<td style="text-align:left;"> .mp3 </td>
</tr>
<tr>
<td style="text-align:left;"> µ-law and a-law </td>
<td style="text-align:center;"> Yes </td>
<td style="text-align:center;"> Yes </td>
<td style="text-align:left;"> Same as Linear PCM </td>
</tr>
</tbody>
</table>


<h3>Android</h3>

<p>Audio</p>

<table>
<thead>
<tr>
<th style="text-align:left;"> Format / Codec </th>
<th style="text-align:center;"> Encoder </th>
<th style="text-align:center;"> Decoder </th>
<th style="text-align:left;"> File Extension </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> AAC LC </td>
<td style="text-align:center;"> Yes </td>
<td style="text-align:center;"> Yes </td>
<td style="text-align:left;"> MPEG/3GPP container <br> .m4a, .mp4, .3gp <br> Apple container <br> .m4a, .m4b, .m4p, .m4r, .m4v <br> ADTS stream <br> .aac </td>
</tr>
<tr>
<td style="text-align:left;"> HE-AACv1 (AAC+) </td>
<td style="text-align:center;"> Yes(Android 4.1+) </td>
<td style="text-align:center;"> Yes </td>
<td style="text-align:left;">  </td>
</tr>
<tr>
<td style="text-align:left;"> HE-AACv2 (enhanced AAC+) </td>
<td style="text-align:center;"> No </td>
<td style="text-align:center;"> Yes </td>
<td style="text-align:left;">  </td>
</tr>
<tr>
<td style="text-align:left;"> AAC ELD (enhanced low delay AAC) </td>
<td style="text-align:center;"> Yes(Android 4.1+) </td>
<td style="text-align:center;"> Yes(Android 4.1+) </td>
<td style="text-align:left;">  </td>
</tr>
<tr>
<td style="text-align:left;"> AMR-NB </td>
<td style="text-align:center;"> Yes </td>
<td style="text-align:center;"> Yes </td>
<td style="text-align:left;"> .3gp </td>
</tr>
<tr>
<td style="text-align:left;"> AMR-WB </td>
<td style="text-align:center;"> Yes </td>
<td style="text-align:center;"> Yes </td>
<td style="text-align:left;"> .3gp </td>
</tr>
<tr>
<td style="text-align:left;"> FLAC </td>
<td style="text-align:center;"> Yes(Android 4.1+) </td>
<td style="text-align:center;"> Yes(Android 3.1+) </td>
<td style="text-align:left;"> .flac </td>
</tr>
<tr>
<td style="text-align:left;"> GSM </td>
<td style="text-align:center;"> No </td>
<td style="text-align:center;"> Yes </td>
<td style="text-align:left;"> .gsm </td>
</tr>
<tr>
<td style="text-align:left;"> MIDI </td>
<td style="text-align:center;"> No </td>
<td style="text-align:center;"> Yes </td>
<td style="text-align:left;"> Type 0 and 1 (.mid, .xmf, .mxmf)<br>RTTTL/RTX (.rtttl, .rtx)<br>OTA (.ota) <br>iMelody (.imy) </td>
</tr>
<tr>
<td style="text-align:left;"> MP3 </td>
<td style="text-align:center;"> No </td>
<td style="text-align:center;"> Yes </td>
<td style="text-align:left;"> .mp3 </td>
</tr>
<tr>
<td style="text-align:left;"> Opus </td>
<td style="text-align:center;"> No </td>
<td style="text-align:center;"> Yes(Android 5.0+) </td>
<td style="text-align:left;"> .mkv </td>
</tr>
<tr>
<td style="text-align:left;"> PCM/WAVE </td>
<td style="text-align:center;"> Yes(Android 4.1+) </td>
<td style="text-align:center;"> Yes </td>
<td style="text-align:left;"> .wav </td>
</tr>
<tr>
<td style="text-align:left;"> Vorbis </td>
<td style="text-align:center;"> No </td>
<td style="text-align:center;"> Yes </td>
<td style="text-align:left;"> Ogg (.ogg) <br>Matroska (.mkv, Android 4.0+) </td>
</tr>
</tbody>
</table>


<p>Video</p>

<table>
<thead>
<tr>
<th style="text-align:left;"> Format / Codec </th>
<th style="text-align:center;"> Encoder </th>
<th style="text-align:center;"> Decoder </th>
<th style="text-align:left;"> File Extension </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> H.263 </td>
<td style="text-align:center;"> Yes </td>
<td style="text-align:center;"> Yes </td>
<td style="text-align:left;"> 3GPP (.3gp) <br>MPEG-4 (.mp4) </td>
</tr>
<tr>
<td style="text-align:left;"> H.264 AVC Baseline Profile (BP) </td>
<td style="text-align:center;"> Yes(Android 3.0+) </td>
<td style="text-align:center;"> Yes </td>
<td style="text-align:left;"> 3GPP (.3gp)<br>MPEG-4 (.mp4)<br>MPEG-TS (.ts, AAC audio only, not seekable, Android 3.0+) </td>
</tr>
<tr>
<td style="text-align:left;"> H.264 AVC Main Profile (MP) </td>
<td style="text-align:center;"> Yes(Android 6.0+) </td>
<td style="text-align:center;"> Yes </td>
<td style="text-align:left;">  </td>
</tr>
<tr>
<td style="text-align:left;"> H.265 HEVC </td>
<td style="text-align:center;"> No </td>
<td style="text-align:center;"> Yes(Android 5.0+) </td>
<td style="text-align:left;"> MPEG-4 (.mp4) </td>
</tr>
<tr>
<td style="text-align:left;"> MPEG-4 SP </td>
<td style="text-align:center;"> No </td>
<td style="text-align:center;"> Yes </td>
<td style="text-align:left;"> 3GPP (.3gp) </td>
</tr>
<tr>
<td style="text-align:left;"> VP8 </td>
<td style="text-align:center;"> Yes(Android 4.3+) </td>
<td style="text-align:center;"> Yes(Android 2.3.3+) </td>
<td style="text-align:left;"> WebM (.webm)<br> Matroska (.mkv, Android 4.0+) </td>
</tr>
<tr>
<td style="text-align:left;"> VP9 </td>
<td style="text-align:center;"> No </td>
<td style="text-align:center;"> Yes(Android 4.4+) </td>
<td style="text-align:left;"> WebM (.webm)<br> Matroska (.mkv, Android 4.0+) </td>
</tr>
</tbody>
</table>


<h3>iOS 和 Android 都支持的音频、视频格式</h3>

<p>Audio</p>

<ul>
<li>AAC LC (Low-Complexity profile)</li>
<li>Linear PCM</li>
<li>MP3(Decode only)</li>
</ul>


<p>Video</p>

<ul>
<li>H.264 AVC</li>
<li>MPEG-4 SP (Simple Profile)</li>
</ul>


<p>Profile</p>

<p>To address various applications ranging from low-quality, low-resolution surveillance cameras to high definition TV broadcasting and DVDs, many video standards group features into profiles and levels. MPEG-4 Part 2 has approximately 21 profiles, including profiles called Simple, Advanced Simple, Main, Core, Advanced Coding Efficiency, Advanced Real Time Simple, etc. The most commonly deployed profiles are Advanced Simple and Simple, which is a subset of Advanced Simple.</p>

<h2>Reference:</h2>

<ul>
<li><a href="https://en.wikipedia.org/wiki/Audio_file_format">Audio file format</a></li>
<li><a href="https://en.wikipedia.org/wiki/Video_file_format">Video file format</a></li>
<li>iOS Technology Overview</li>
<li><a href="https://developer.android.com/guide/appendix/media-formats.html">Supported Media Formats</a></li>
<li>Multimedia Programming Guide</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(翻译)How to Play, Record, and Edit Videos in iOS]]></title>
    <link href="http://DamianSheldon.github.io/blog/how-to-play.html"/>
    <updated>2015-01-22T16:48:25+08:00</updated>
    <id>http://DamianSheldon.github.io/blog/how-to-play</id>
    <content type="html"><![CDATA[<p>录制视频(并用代码播放它们)是你可以用手机来做的最酷的事情之一，但不是所有的应用都利用了它们。它需要 AVFoundation 框架，AVFoundation 从 Lion(10.7)开始是 OS X 的一部分，Apple 在 2010 年将它加入到 iOS 4.</p>

<p>从那之后 AVFoundation 也有了相当多的成长，现在拥有 100 多个类。本教程覆盖媒体播放和一些轻量级编辑来让你开始使用 AVFoundation.</p>

<h4>AVAsset</h4>

<p>它是表示基于时间的视听媒体的抽象类例如视频和音频。每个assert包含用于展示或处理的记录集合，可以是任意一种通用媒体类型，包括但不仅限于音频，视频，文本，closed captions 和 subtitles。</p>

<p>一个AVAsset对象定义了定义记录的属性集合，它构成asset。一个记录用一个AVAssetTrack实例表示。</p>

<p>在典型的简单情况下，一个记录代表一个音频组件，另一个代表视频组件；在复杂的合成器中，可能会有多个重叠的音频和视频记录。你将会把合成的视频和音频文件表示成AVAsset对象。</p>

<h4>AVComposition</h4>

<p>An AVCompositionobject combines media data from multiple file-based sources in a custom temporal arrangement in order to present or process it together. All file-based audiovisual assets are eligible to be combined, regardless of container type.</p>

<p>一个AVComposition对象用自定义的时间顺序排列混合来自多个基于文件源的媒体使得可以一起显示或处理。所有基于文件的视听asset都可以混合，而不用管容器类型。</p>

<p>At its top level, an AVComposition is a collection of tracks, each presenting media of a specific type such as audio or video, according to a timeline. Each track is represented by an instance of AVCompositionTrack.</p>

<p>在它的上一级，AVComposition是记录的集合，每个依据时间线展示像音频或视频的媒体类型。每个记录由一个AVCompositionTrack实例代表。</p>

<p>AVMutableComposition and AVMutableCompositionTrack</p>

<p>A higher-level interface for constructing compositions is also presented by AVMutableComposition and AVMutableCompositionTrack. These objects offer insertion, removal, and scaling operations without direct manipulation of the trackSegment arrays of composition tracks.</p>

<p>AVMutableComposition and AVMutableCompositionTrack make use of higher-level constructs such as AVAsset and AVAssetTrack. This means the client can make use of the same references to candidate sources that it would have created in order to inspect or preview them prior to inclusion in a composition.</p>

<p>In short, you have an AVMutableComposition and you can add multiple AVMutableCompositionTrack instances to it. Each AVMutableCompositionTrack will have a separate media asset.</p>

<p>And the Rest</p>

<p>In order to apply a CGAffineTransform to a track, you will make use of AVVideoCompositionInstruction and AVVideoComposition. An AVVideoCompositionInstruction object represents an operation to be performed by a compositor. The object contains multiple AVMutableVideoCompositionLayerInstruction objects.</p>

<p>You use an AVVideoCompositionLayerInstruction object to modify the transform and opacity ramps to apply to a given track in an AV composition.</p>

<p>AVMutableVideoCompositionLayerInstruction is a mutable subclass of AVVideoCompositionLayerInstruction.</p>

<p>An AVVideoComposition object maintains an array of instructions to perform its composition, and an AVMutableVideoComposition object represents a mutable video composition.</p>

<p>Conclusion</p>

<p>To sum it all up:</p>

<p>You have a main AVMutableComposition object that contains multiple AVMutableCompositionTrack instances. Each track represents an asset.</p>

<p>You have AVMutableVideoComposition objects that contain multiple AVMutableVideoCompositionInstructions.</p>

<p>Each AVMutableVideoCompositionInstruction contains multiple AVMutableVideoCompositionLayerInstruction instances.</p>

<p>Each layer instruction is used to apply a certain transform to a given track.</p>

<h3><a href="http://www.raywenderlich.com/13418/how-to-play-record-edit-videos-in-ios">原文</a></h3>
]]></content>
  </entry>
  
</feed>
